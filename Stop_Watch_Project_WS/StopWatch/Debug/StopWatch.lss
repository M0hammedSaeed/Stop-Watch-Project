
StopWatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  00002f32  00002fc6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800168  00800168  000030ce  2**0
                  ALLOC
  3 .stab         00002bd4  00000000  00000000  000030d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001749  00000000  00000000  00005ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000073ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000758d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000777f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00009b8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000af10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000c0e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000c2a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000c59e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cf0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 22 0f 	jmp	0x1e44	; 0x1e44 <__vector_1>
       8:	0c 94 55 0f 	jmp	0x1eaa	; 0x1eaa <__vector_2>
       c:	0c 94 88 0f 	jmp	0x1f10	; 0x1f10 <__vector_3>
      10:	0c 94 4c 08 	jmp	0x1098	; 0x1098 <__vector_4>
      14:	0c 94 19 08 	jmp	0x1032	; 0x1032 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 b0 07 	jmp	0xf60	; 0xf60 <__vector_7>
      20:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__vector_8>
      24:	0c 94 7d 07 	jmp	0xefa	; 0xefa <__vector_9>
      28:	0c 94 4a 07 	jmp	0xe94	; 0xe94 <__vector_10>
      2c:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a8 37       	cpi	r26, 0x78	; 120
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e2 e3       	ldi	r30, 0x32	; 50
      78:	ff e2       	ldi	r31, 0x2F	; 47
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <main>
      8a:	0c 94 97 17 	jmp	0x2f2e	; 0x2f2e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 60 17 	jmp	0x2ec0	; 0x2ec0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7c 17 	jmp	0x2ef8	; 0x2ef8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6c 17 	jmp	0x2ed8	; 0x2ed8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 88 17 	jmp	0x2f10	; 0x2f10 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6c 17 	jmp	0x2ed8	; 0x2ed8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 88 17 	jmp	0x2f10	; 0x2f10 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 60 17 	jmp	0x2ec0	; 0x2ec0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7c 17 	jmp	0x2ef8	; 0x2ef8 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 68 17 	jmp	0x2ed0	; 0x2ed0 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 84 17 	jmp	0x2f08	; 0x2f08 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 6c 17 	jmp	0x2ed8	; 0x2ed8 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 88 17 	jmp	0x2f10	; 0x2f10 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 6c 17 	jmp	0x2ed8	; 0x2ed8 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 88 17 	jmp	0x2f10	; 0x2f10 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 6c 17 	jmp	0x2ed8	; 0x2ed8 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 88 17 	jmp	0x2f10	; 0x2f10 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 70 17 	jmp	0x2ee0	; 0x2ee0 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 8c 17 	jmp	0x2f18	; 0x2f18 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 68 17 	jmp	0x2ed0	; 0x2ed0 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 84 17 	jmp	0x2f08	; 0x2f08 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <__vector_11>:

/*
 * [Description]: The ISR's specific For TIMER0
 */
ISR(TIMER0_OVF_vect)
{
     e2e:	1f 92       	push	r1
     e30:	0f 92       	push	r0
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	0f 92       	push	r0
     e36:	11 24       	eor	r1, r1
     e38:	2f 93       	push	r18
     e3a:	3f 93       	push	r19
     e3c:	4f 93       	push	r20
     e3e:	5f 93       	push	r21
     e40:	6f 93       	push	r22
     e42:	7f 93       	push	r23
     e44:	8f 93       	push	r24
     e46:	9f 93       	push	r25
     e48:	af 93       	push	r26
     e4a:	bf 93       	push	r27
     e4c:	ef 93       	push	r30
     e4e:	ff 93       	push	r31
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
	/* Call the Call Back function in the application after the Event is Occur */
	if(g_Ptr_To_Fun_TIMER_0 != NULL_PTR)
     e58:	80 91 68 01 	lds	r24, 0x0168
     e5c:	90 91 69 01 	lds	r25, 0x0169
     e60:	00 97       	sbiw	r24, 0x00	; 0
     e62:	29 f0       	breq	.+10     	; 0xe6e <__vector_11+0x40>
	{
		/* This is called --> Call Back Notification */
		/* another method to call the function using pointer to function g_Ptr_To_Fun_0(); */
		(*g_Ptr_To_Fun_TIMER_0)();
     e64:	e0 91 68 01 	lds	r30, 0x0168
     e68:	f0 91 69 01 	lds	r31, 0x0169
     e6c:	09 95       	icall
	}
}
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	ff 91       	pop	r31
     e74:	ef 91       	pop	r30
     e76:	bf 91       	pop	r27
     e78:	af 91       	pop	r26
     e7a:	9f 91       	pop	r25
     e7c:	8f 91       	pop	r24
     e7e:	7f 91       	pop	r23
     e80:	6f 91       	pop	r22
     e82:	5f 91       	pop	r21
     e84:	4f 91       	pop	r20
     e86:	3f 91       	pop	r19
     e88:	2f 91       	pop	r18
     e8a:	0f 90       	pop	r0
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	0f 90       	pop	r0
     e90:	1f 90       	pop	r1
     e92:	18 95       	reti

00000e94 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
     e94:	1f 92       	push	r1
     e96:	0f 92       	push	r0
     e98:	0f b6       	in	r0, 0x3f	; 63
     e9a:	0f 92       	push	r0
     e9c:	11 24       	eor	r1, r1
     e9e:	2f 93       	push	r18
     ea0:	3f 93       	push	r19
     ea2:	4f 93       	push	r20
     ea4:	5f 93       	push	r21
     ea6:	6f 93       	push	r22
     ea8:	7f 93       	push	r23
     eaa:	8f 93       	push	r24
     eac:	9f 93       	push	r25
     eae:	af 93       	push	r26
     eb0:	bf 93       	push	r27
     eb2:	ef 93       	push	r30
     eb4:	ff 93       	push	r31
     eb6:	df 93       	push	r29
     eb8:	cf 93       	push	r28
     eba:	cd b7       	in	r28, 0x3d	; 61
     ebc:	de b7       	in	r29, 0x3e	; 62
	if(g_Ptr_To_Fun_TIMER_0 != NULL_PTR)
     ebe:	80 91 68 01 	lds	r24, 0x0168
     ec2:	90 91 69 01 	lds	r25, 0x0169
     ec6:	00 97       	sbiw	r24, 0x00	; 0
     ec8:	29 f0       	breq	.+10     	; 0xed4 <__vector_10+0x40>
	{
		(*g_Ptr_To_Fun_TIMER_0)();
     eca:	e0 91 68 01 	lds	r30, 0x0168
     ece:	f0 91 69 01 	lds	r31, 0x0169
     ed2:	09 95       	icall
	}
}
     ed4:	cf 91       	pop	r28
     ed6:	df 91       	pop	r29
     ed8:	ff 91       	pop	r31
     eda:	ef 91       	pop	r30
     edc:	bf 91       	pop	r27
     ede:	af 91       	pop	r26
     ee0:	9f 91       	pop	r25
     ee2:	8f 91       	pop	r24
     ee4:	7f 91       	pop	r23
     ee6:	6f 91       	pop	r22
     ee8:	5f 91       	pop	r21
     eea:	4f 91       	pop	r20
     eec:	3f 91       	pop	r19
     eee:	2f 91       	pop	r18
     ef0:	0f 90       	pop	r0
     ef2:	0f be       	out	0x3f, r0	; 63
     ef4:	0f 90       	pop	r0
     ef6:	1f 90       	pop	r1
     ef8:	18 95       	reti

00000efa <__vector_9>:

/*
 * [Description]: The ISR's specific For TIMER1
 */
ISR(TIMER1_OVF_vect)
{
     efa:	1f 92       	push	r1
     efc:	0f 92       	push	r0
     efe:	0f b6       	in	r0, 0x3f	; 63
     f00:	0f 92       	push	r0
     f02:	11 24       	eor	r1, r1
     f04:	2f 93       	push	r18
     f06:	3f 93       	push	r19
     f08:	4f 93       	push	r20
     f0a:	5f 93       	push	r21
     f0c:	6f 93       	push	r22
     f0e:	7f 93       	push	r23
     f10:	8f 93       	push	r24
     f12:	9f 93       	push	r25
     f14:	af 93       	push	r26
     f16:	bf 93       	push	r27
     f18:	ef 93       	push	r30
     f1a:	ff 93       	push	r31
     f1c:	df 93       	push	r29
     f1e:	cf 93       	push	r28
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
	if(g_Ptr_To_Fun_TIMER_1 != NULL_PTR)
     f24:	80 91 6a 01 	lds	r24, 0x016A
     f28:	90 91 6b 01 	lds	r25, 0x016B
     f2c:	00 97       	sbiw	r24, 0x00	; 0
     f2e:	29 f0       	breq	.+10     	; 0xf3a <__vector_9+0x40>
	{
		(*g_Ptr_To_Fun_TIMER_1)();
     f30:	e0 91 6a 01 	lds	r30, 0x016A
     f34:	f0 91 6b 01 	lds	r31, 0x016B
     f38:	09 95       	icall
	}
}
     f3a:	cf 91       	pop	r28
     f3c:	df 91       	pop	r29
     f3e:	ff 91       	pop	r31
     f40:	ef 91       	pop	r30
     f42:	bf 91       	pop	r27
     f44:	af 91       	pop	r26
     f46:	9f 91       	pop	r25
     f48:	8f 91       	pop	r24
     f4a:	7f 91       	pop	r23
     f4c:	6f 91       	pop	r22
     f4e:	5f 91       	pop	r21
     f50:	4f 91       	pop	r20
     f52:	3f 91       	pop	r19
     f54:	2f 91       	pop	r18
     f56:	0f 90       	pop	r0
     f58:	0f be       	out	0x3f, r0	; 63
     f5a:	0f 90       	pop	r0
     f5c:	1f 90       	pop	r1
     f5e:	18 95       	reti

00000f60 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
     f60:	1f 92       	push	r1
     f62:	0f 92       	push	r0
     f64:	0f b6       	in	r0, 0x3f	; 63
     f66:	0f 92       	push	r0
     f68:	11 24       	eor	r1, r1
     f6a:	2f 93       	push	r18
     f6c:	3f 93       	push	r19
     f6e:	4f 93       	push	r20
     f70:	5f 93       	push	r21
     f72:	6f 93       	push	r22
     f74:	7f 93       	push	r23
     f76:	8f 93       	push	r24
     f78:	9f 93       	push	r25
     f7a:	af 93       	push	r26
     f7c:	bf 93       	push	r27
     f7e:	ef 93       	push	r30
     f80:	ff 93       	push	r31
     f82:	df 93       	push	r29
     f84:	cf 93       	push	r28
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
	interruptSecondFlag = TRUE;
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	80 93 6e 01 	sts	0x016E, r24

	if(g_Ptr_To_Fun_TIMER_1 != NULL_PTR)
     f90:	80 91 6a 01 	lds	r24, 0x016A
     f94:	90 91 6b 01 	lds	r25, 0x016B
     f98:	00 97       	sbiw	r24, 0x00	; 0
     f9a:	29 f0       	breq	.+10     	; 0xfa6 <__vector_7+0x46>
	{
		(*g_Ptr_To_Fun_TIMER_1)();
     f9c:	e0 91 6a 01 	lds	r30, 0x016A
     fa0:	f0 91 6b 01 	lds	r31, 0x016B
     fa4:	09 95       	icall
	}
}
     fa6:	cf 91       	pop	r28
     fa8:	df 91       	pop	r29
     faa:	ff 91       	pop	r31
     fac:	ef 91       	pop	r30
     fae:	bf 91       	pop	r27
     fb0:	af 91       	pop	r26
     fb2:	9f 91       	pop	r25
     fb4:	8f 91       	pop	r24
     fb6:	7f 91       	pop	r23
     fb8:	6f 91       	pop	r22
     fba:	5f 91       	pop	r21
     fbc:	4f 91       	pop	r20
     fbe:	3f 91       	pop	r19
     fc0:	2f 91       	pop	r18
     fc2:	0f 90       	pop	r0
     fc4:	0f be       	out	0x3f, r0	; 63
     fc6:	0f 90       	pop	r0
     fc8:	1f 90       	pop	r1
     fca:	18 95       	reti

00000fcc <__vector_8>:

ISR(TIMER1_COMPB_vect)
{
     fcc:	1f 92       	push	r1
     fce:	0f 92       	push	r0
     fd0:	0f b6       	in	r0, 0x3f	; 63
     fd2:	0f 92       	push	r0
     fd4:	11 24       	eor	r1, r1
     fd6:	2f 93       	push	r18
     fd8:	3f 93       	push	r19
     fda:	4f 93       	push	r20
     fdc:	5f 93       	push	r21
     fde:	6f 93       	push	r22
     fe0:	7f 93       	push	r23
     fe2:	8f 93       	push	r24
     fe4:	9f 93       	push	r25
     fe6:	af 93       	push	r26
     fe8:	bf 93       	push	r27
     fea:	ef 93       	push	r30
     fec:	ff 93       	push	r31
     fee:	df 93       	push	r29
     ff0:	cf 93       	push	r28
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62
	if(g_Ptr_To_Fun_TIMER_1 != NULL_PTR)
     ff6:	80 91 6a 01 	lds	r24, 0x016A
     ffa:	90 91 6b 01 	lds	r25, 0x016B
     ffe:	00 97       	sbiw	r24, 0x00	; 0
    1000:	29 f0       	breq	.+10     	; 0x100c <__vector_8+0x40>
	{
		(*g_Ptr_To_Fun_TIMER_1)();
    1002:	e0 91 6a 01 	lds	r30, 0x016A
    1006:	f0 91 6b 01 	lds	r31, 0x016B
    100a:	09 95       	icall
	}
}
    100c:	cf 91       	pop	r28
    100e:	df 91       	pop	r29
    1010:	ff 91       	pop	r31
    1012:	ef 91       	pop	r30
    1014:	bf 91       	pop	r27
    1016:	af 91       	pop	r26
    1018:	9f 91       	pop	r25
    101a:	8f 91       	pop	r24
    101c:	7f 91       	pop	r23
    101e:	6f 91       	pop	r22
    1020:	5f 91       	pop	r21
    1022:	4f 91       	pop	r20
    1024:	3f 91       	pop	r19
    1026:	2f 91       	pop	r18
    1028:	0f 90       	pop	r0
    102a:	0f be       	out	0x3f, r0	; 63
    102c:	0f 90       	pop	r0
    102e:	1f 90       	pop	r1
    1030:	18 95       	reti

00001032 <__vector_5>:

/*
 * [Description]: The ISR's specific For TIMER1
 */
ISR(TIMER2_OVF_vect)
{
    1032:	1f 92       	push	r1
    1034:	0f 92       	push	r0
    1036:	0f b6       	in	r0, 0x3f	; 63
    1038:	0f 92       	push	r0
    103a:	11 24       	eor	r1, r1
    103c:	2f 93       	push	r18
    103e:	3f 93       	push	r19
    1040:	4f 93       	push	r20
    1042:	5f 93       	push	r21
    1044:	6f 93       	push	r22
    1046:	7f 93       	push	r23
    1048:	8f 93       	push	r24
    104a:	9f 93       	push	r25
    104c:	af 93       	push	r26
    104e:	bf 93       	push	r27
    1050:	ef 93       	push	r30
    1052:	ff 93       	push	r31
    1054:	df 93       	push	r29
    1056:	cf 93       	push	r28
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
	if(g_Ptr_To_Fun_TIMER_2 != NULL_PTR)
    105c:	80 91 6c 01 	lds	r24, 0x016C
    1060:	90 91 6d 01 	lds	r25, 0x016D
    1064:	00 97       	sbiw	r24, 0x00	; 0
    1066:	29 f0       	breq	.+10     	; 0x1072 <__vector_5+0x40>
	{
		(*g_Ptr_To_Fun_TIMER_2)();
    1068:	e0 91 6c 01 	lds	r30, 0x016C
    106c:	f0 91 6d 01 	lds	r31, 0x016D
    1070:	09 95       	icall
	}
}
    1072:	cf 91       	pop	r28
    1074:	df 91       	pop	r29
    1076:	ff 91       	pop	r31
    1078:	ef 91       	pop	r30
    107a:	bf 91       	pop	r27
    107c:	af 91       	pop	r26
    107e:	9f 91       	pop	r25
    1080:	8f 91       	pop	r24
    1082:	7f 91       	pop	r23
    1084:	6f 91       	pop	r22
    1086:	5f 91       	pop	r21
    1088:	4f 91       	pop	r20
    108a:	3f 91       	pop	r19
    108c:	2f 91       	pop	r18
    108e:	0f 90       	pop	r0
    1090:	0f be       	out	0x3f, r0	; 63
    1092:	0f 90       	pop	r0
    1094:	1f 90       	pop	r1
    1096:	18 95       	reti

00001098 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    1098:	1f 92       	push	r1
    109a:	0f 92       	push	r0
    109c:	0f b6       	in	r0, 0x3f	; 63
    109e:	0f 92       	push	r0
    10a0:	11 24       	eor	r1, r1
    10a2:	2f 93       	push	r18
    10a4:	3f 93       	push	r19
    10a6:	4f 93       	push	r20
    10a8:	5f 93       	push	r21
    10aa:	6f 93       	push	r22
    10ac:	7f 93       	push	r23
    10ae:	8f 93       	push	r24
    10b0:	9f 93       	push	r25
    10b2:	af 93       	push	r26
    10b4:	bf 93       	push	r27
    10b6:	ef 93       	push	r30
    10b8:	ff 93       	push	r31
    10ba:	df 93       	push	r29
    10bc:	cf 93       	push	r28
    10be:	cd b7       	in	r28, 0x3d	; 61
    10c0:	de b7       	in	r29, 0x3e	; 62
	if(g_Ptr_To_Fun_TIMER_2 != NULL_PTR)
    10c2:	80 91 6c 01 	lds	r24, 0x016C
    10c6:	90 91 6d 01 	lds	r25, 0x016D
    10ca:	00 97       	sbiw	r24, 0x00	; 0
    10cc:	29 f0       	breq	.+10     	; 0x10d8 <__vector_4+0x40>
	{
		(*g_Ptr_To_Fun_TIMER_0)();
    10ce:	e0 91 68 01 	lds	r30, 0x0168
    10d2:	f0 91 69 01 	lds	r31, 0x0169
    10d6:	09 95       	icall
	}
}
    10d8:	cf 91       	pop	r28
    10da:	df 91       	pop	r29
    10dc:	ff 91       	pop	r31
    10de:	ef 91       	pop	r30
    10e0:	bf 91       	pop	r27
    10e2:	af 91       	pop	r26
    10e4:	9f 91       	pop	r25
    10e6:	8f 91       	pop	r24
    10e8:	7f 91       	pop	r23
    10ea:	6f 91       	pop	r22
    10ec:	5f 91       	pop	r21
    10ee:	4f 91       	pop	r20
    10f0:	3f 91       	pop	r19
    10f2:	2f 91       	pop	r18
    10f4:	0f 90       	pop	r0
    10f6:	0f be       	out	0x3f, r0	; 63
    10f8:	0f 90       	pop	r0
    10fa:	1f 90       	pop	r1
    10fc:	18 95       	reti

000010fe <TIMER_Init>:
 *                  The same time from Configuration of timer .
 * [Args]  : void
 * [RUTURN]: Void
 */
void TIMER_Init(void)
{
    10fe:	df 93       	push	r29
    1100:	cf 93       	push	r28
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62

		TCCR1A_REG |= TIMER1_MODE_PWM_PHASECORRECT_10_BIT_A_MSK;
		TCCR1B_REG |= TIMER1_MODE_PWM_PHASECORRECT_10_BIT_B_MSK;
		break;
	case TIMER1_MODE_CTC_MSK:
		TCCR1A_REG &= TIMER1_MODE_clr_A_MSK;
    1106:	af e4       	ldi	r26, 0x4F	; 79
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	ef e4       	ldi	r30, 0x4F	; 79
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	8c 7f       	andi	r24, 0xFC	; 252
    1112:	8c 93       	st	X, r24
		TCCR1B_REG &= TIMER1_MODE_clr_B_MSK;
    1114:	ae e4       	ldi	r26, 0x4E	; 78
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	ee e4       	ldi	r30, 0x4E	; 78
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	87 7e       	andi	r24, 0xE7	; 231
    1120:	8c 93       	st	X, r24

		TCCR1A_REG |= TIMER1_MODE_CTC_A_MSK;
    1122:	af e4       	ldi	r26, 0x4F	; 79
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	ef e4       	ldi	r30, 0x4F	; 79
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	8c 60       	ori	r24, 0x0C	; 12
    112e:	8c 93       	st	X, r24
		TCCR1B_REG |= TIMER1_MODE_CTC_B_MSK;
    1130:	ae e4       	ldi	r26, 0x4E	; 78
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	ee e4       	ldi	r30, 0x4E	; 78
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	80 81       	ld	r24, Z
    113a:	88 60       	ori	r24, 0x08	; 8
    113c:	8c 93       	st	X, r24
	case TIMER1_CLK_WITH_64_PRESCALER_MSK:
		TCCR1B_REG &= TIMER1_CLK_WITH_PRESCALER_clr_MSK;
		TCCR1B_REG |= TIMER1_CLK_WITH_64_PRESCALER_MSK;
		break;
	case TIMER1_CLK_WITH_256_PRESCALER_MSK:
		TCCR1B_REG &= TIMER1_CLK_WITH_PRESCALER_clr_MSK;
    113e:	ae e4       	ldi	r26, 0x4E	; 78
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	ee e4       	ldi	r30, 0x4E	; 78
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	88 7f       	andi	r24, 0xF8	; 248
    114a:	8c 93       	st	X, r24
		TCCR1B_REG |= TIMER1_CLK_WITH_256_PRESCALER_MSK;
    114c:	ae e4       	ldi	r26, 0x4E	; 78
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	ee e4       	ldi	r30, 0x4E	; 78
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	84 60       	ori	r24, 0x04	; 4
    1158:	8c 93       	st	X, r24
		TCCR1B_REG |= TIMER1_EXTERNAL_CLK_WITH_RISING_EDGE_MSK;
		break;
	}

	/* Initial value for Timer/Counter1 */
	TCNT1_REG = TIMER1_INITIAL_VALUE;
    115a:	ec e4       	ldi	r30, 0x4C	; 76
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	11 82       	std	Z+1, r1	; 0x01
    1160:	10 82       	st	Z, r1

	/* Compare value for Timer/Counter0 */
	OCR1A_REG = TIMER1_COMPARE_A_VALUE;
    1162:	ea e4       	ldi	r30, 0x4A	; 74
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	82 e1       	ldi	r24, 0x12	; 18
    1168:	9a e7       	ldi	r25, 0x7A	; 122
    116a:	91 83       	std	Z+1, r25	; 0x01
    116c:	80 83       	st	Z, r24
	OCR1B_REG = TIMER1_COMPARE_B_VALUE;
    116e:	e8 e4       	ldi	r30, 0x48	; 72
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	11 82       	std	Z+1, r1	; 0x01
    1174:	10 82       	st	Z, r1
	/* Compare value for Timer/Counter2 */
	OCR2_REG = TIMER2_COMPARE_VALUE;
#endif

	/* To enable TIMER's Interrupt */
	TIMER_EnableInterrupt();
    1176:	0e 94 c0 08 	call	0x1180	; 0x1180 <TIMER_EnableInterrupt>
}
    117a:	cf 91       	pop	r28
    117c:	df 91       	pop	r29
    117e:	08 95       	ret

00001180 <TIMER_EnableInterrupt>:
 *                  Depend on Timer That you made it Enable.
 * [Args]  : void
 * [RUTURN]: Void
 */
void TIMER_EnableInterrupt(void)
{
    1180:	df 93       	push	r29
    1182:	cf 93       	push	r28
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62
#if TIMER1 == ENABLE

#if TIMER1_OVF_INT_EN == ENABLE
	SET_BIT(TIMSK_REG,TIMSK_TOIE1);
#elif TIMER1_COMPA_INT_EN == ENABLE
	SET_BIT(TIMSK_REG,TIMSK_OCIE1A);
    1188:	a9 e5       	ldi	r26, 0x59	; 89
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	e9 e5       	ldi	r30, 0x59	; 89
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	80 61       	ori	r24, 0x10	; 16
    1194:	8c 93       	st	X, r24
	SET_BIT(TIMSK_REG,TIMSK_TOIE2);
#elif TIMER2_COMP_INT_EN == ENABLE
	SET_BIT(TIMSK_REG,TIMSK_OCIE2);
#endif
#endif
}
    1196:	cf 91       	pop	r28
    1198:	df 91       	pop	r29
    119a:	08 95       	ret

0000119c <TIMER0_SetCallBack>:
 *                  Every set callback function follow specific Timer.
 * [Args]  : Pointer To Function take void and return void
 * [RUTURN]: Void
 */
void TIMER0_SetCallBack(void (*Ptr_To_fun)(void))
{
    119c:	df 93       	push	r29
    119e:	cf 93       	push	r28
    11a0:	00 d0       	rcall	.+0      	; 0x11a2 <TIMER0_SetCallBack+0x6>
    11a2:	cd b7       	in	r28, 0x3d	; 61
    11a4:	de b7       	in	r29, 0x3e	; 62
    11a6:	9a 83       	std	Y+2, r25	; 0x02
    11a8:	89 83       	std	Y+1, r24	; 0x01
	g_Ptr_To_Fun_TIMER_0 = (volatile void *)Ptr_To_fun;
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
    11ac:	9a 81       	ldd	r25, Y+2	; 0x02
    11ae:	90 93 69 01 	sts	0x0169, r25
    11b2:	80 93 68 01 	sts	0x0168, r24
}
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	cf 91       	pop	r28
    11bc:	df 91       	pop	r29
    11be:	08 95       	ret

000011c0 <TIMER1_SetCallBack>:

void TIMER1_SetCallBack(void (*Ptr_To_fun)(void))
{
    11c0:	df 93       	push	r29
    11c2:	cf 93       	push	r28
    11c4:	00 d0       	rcall	.+0      	; 0x11c6 <TIMER1_SetCallBack+0x6>
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
    11ca:	9a 83       	std	Y+2, r25	; 0x02
    11cc:	89 83       	std	Y+1, r24	; 0x01
	g_Ptr_To_Fun_TIMER_1 = (volatile void *)Ptr_To_fun;
    11ce:	89 81       	ldd	r24, Y+1	; 0x01
    11d0:	9a 81       	ldd	r25, Y+2	; 0x02
    11d2:	90 93 6b 01 	sts	0x016B, r25
    11d6:	80 93 6a 01 	sts	0x016A, r24
}
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	cf 91       	pop	r28
    11e0:	df 91       	pop	r29
    11e2:	08 95       	ret

000011e4 <TIMER2_SetCallBack>:

void TIMER2_SetCallBack(void (*Ptr_To_fun)(void))
{
    11e4:	df 93       	push	r29
    11e6:	cf 93       	push	r28
    11e8:	00 d0       	rcall	.+0      	; 0x11ea <TIMER2_SetCallBack+0x6>
    11ea:	cd b7       	in	r28, 0x3d	; 61
    11ec:	de b7       	in	r29, 0x3e	; 62
    11ee:	9a 83       	std	Y+2, r25	; 0x02
    11f0:	89 83       	std	Y+1, r24	; 0x01
	g_Ptr_To_Fun_TIMER_2 = (volatile void *)Ptr_To_fun;
    11f2:	89 81       	ldd	r24, Y+1	; 0x01
    11f4:	9a 81       	ldd	r25, Y+2	; 0x02
    11f6:	90 93 6d 01 	sts	0x016D, r25
    11fa:	80 93 6c 01 	sts	0x016C, r24
}
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	cf 91       	pop	r28
    1204:	df 91       	pop	r29
    1206:	08 95       	ret

00001208 <TIMER_DeInit>:
 * [DISCRIPTION]  : This function is responsible to De-initialization all Timers
 * [Args]  : void
 * [RUTURN]: Void
 */
void TIMER_DeInit(void)
{
    1208:	df 93       	push	r29
    120a:	cf 93       	push	r28
    120c:	cd b7       	in	r28, 0x3d	; 61
    120e:	de b7       	in	r29, 0x3e	; 62
	/* TIMER0 De-init */
	TCCR0_REG = 0;
    1210:	e3 e5       	ldi	r30, 0x53	; 83
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	10 82       	st	Z, r1
	/* TIMER2 De-init */
	TCCR2_REG = 0;
    1216:	e5 e4       	ldi	r30, 0x45	; 69
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	10 82       	st	Z, r1

	/* TIMER1 De-init */
	TCCR1A_REG = 0;
    121c:	ef e4       	ldi	r30, 0x4F	; 79
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	10 82       	st	Z, r1
	TCCR1B_REG = 0;
    1222:	ee e4       	ldi	r30, 0x4E	; 78
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	10 82       	st	Z, r1
}
    1228:	cf 91       	pop	r28
    122a:	df 91       	pop	r29
    122c:	08 95       	ret

0000122e <Timer0_PWM_DutyCycle>:
 *					 5. Setup the direction for OC0 as output pin.
 * [Args]  : required input duty cycle
 * [RUTURN]: Void
 */
void Timer0_PWM_DutyCycle(uint8 duty_cycle)
{
    122e:	0f 93       	push	r16
    1230:	1f 93       	push	r17
    1232:	df 93       	push	r29
    1234:	cf 93       	push	r28
    1236:	0f 92       	push	r0
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62
    123c:	89 83       	std	Y+1, r24	; 0x01
	/* Initial value for Timer/Counter0 */
	TCNT0_REG = TIMER0_INITIAL_VALUE;
    123e:	e2 e5       	ldi	r30, 0x52	; 82
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	10 82       	st	Z, r1

	/* Set Compare value */
	OCR0_REG = ((float32)duty_cycle / 100) * 255;
    1244:	0c e5       	ldi	r16, 0x5C	; 92
    1246:	10 e0       	ldi	r17, 0x00	; 0
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	88 2f       	mov	r24, r24
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	a0 e0       	ldi	r26, 0x00	; 0
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	bc 01       	movw	r22, r24
    1254:	cd 01       	movw	r24, r26
    1256:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    125a:	dc 01       	movw	r26, r24
    125c:	cb 01       	movw	r24, r22
    125e:	bc 01       	movw	r22, r24
    1260:	cd 01       	movw	r24, r26
    1262:	20 e0       	ldi	r18, 0x00	; 0
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	48 ec       	ldi	r20, 0xC8	; 200
    1268:	52 e4       	ldi	r21, 0x42	; 66
    126a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    126e:	dc 01       	movw	r26, r24
    1270:	cb 01       	movw	r24, r22
    1272:	bc 01       	movw	r22, r24
    1274:	cd 01       	movw	r24, r26
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	4f e7       	ldi	r20, 0x7F	; 127
    127c:	53 e4       	ldi	r21, 0x43	; 67
    127e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1282:	dc 01       	movw	r26, r24
    1284:	cb 01       	movw	r24, r22
    1286:	bc 01       	movw	r22, r24
    1288:	cd 01       	movw	r24, r26
    128a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    128e:	dc 01       	movw	r26, r24
    1290:	cb 01       	movw	r24, r22
    1292:	f8 01       	movw	r30, r16
    1294:	80 83       	st	Z, r24
	case TIMER0_CLK_WITH_NO_PRESCALER_MSK:
		TCCR0_REG &= TIMER0_CLK_WITH_PRESCALER_clr_MSK;
		TCCR0_REG |= TIMER0_CLK_WITH_NO_PRESCALER_MSK;
		break;
	case TIMER0_CLK_WITH_8_PRESCALER_MSK:
		TCCR0_REG &= TIMER0_CLK_WITH_PRESCALER_clr_MSK;
    1296:	a3 e5       	ldi	r26, 0x53	; 83
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	e3 e5       	ldi	r30, 0x53	; 83
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	88 7f       	andi	r24, 0xF8	; 248
    12a2:	8c 93       	st	X, r24
		TCCR0_REG |= TIMER0_CLK_WITH_8_PRESCALER_MSK;
    12a4:	a3 e5       	ldi	r26, 0x53	; 83
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e3 e5       	ldi	r30, 0x53	; 83
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	82 60       	ori	r24, 0x02	; 2
    12b0:	8c 93       	st	X, r24
	case TIMER0_EXTERNAL_CLK_WITH_RISING_EDGE_MSK:
		TCCR0_REG &= TIMER0_CLK_WITH_PRESCALER_clr_MSK;
		TCCR0_REG |= TIMER0_EXTERNAL_CLK_WITH_RISING_EDGE_MSK;
		break;
	}
}
    12b2:	0f 90       	pop	r0
    12b4:	cf 91       	pop	r28
    12b6:	df 91       	pop	r29
    12b8:	1f 91       	pop	r17
    12ba:	0f 91       	pop	r16
    12bc:	08 95       	ret

000012be <Timer1_PWM_DutyCycle>:
 *					 5. Setup the direction for OC1B as output pin.
 * [Args]  : required input duty cycle
 * [RUTURN]: Void
 */
void Timer1_PWM_DutyCycle(uint16  duty_cycle)
{
    12be:	0f 93       	push	r16
    12c0:	1f 93       	push	r17
    12c2:	df 93       	push	r29
    12c4:	cf 93       	push	r28
    12c6:	00 d0       	rcall	.+0      	; 0x12c8 <Timer1_PWM_DutyCycle+0xa>
    12c8:	cd b7       	in	r28, 0x3d	; 61
    12ca:	de b7       	in	r29, 0x3e	; 62
    12cc:	9a 83       	std	Y+2, r25	; 0x02
    12ce:	89 83       	std	Y+1, r24	; 0x01
	/* Initial value for Timer/Counter1 */
	TCNT1_REG = TIMER1_INITIAL_VALUE;
    12d0:	ec e4       	ldi	r30, 0x4C	; 76
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	11 82       	std	Z+1, r1	; 0x01
    12d6:	10 82       	st	Z, r1
	/*
	 * use fast mode with top value at OCRA reg
	 * diconnect OC1A PIN ,and generate the PWM on OC1B PIN
	 */
	/* Compare value for Timer/Counter0 */
	OCR1A_REG = TIMER1_COMPARE_A_VALUE;
    12d8:	ea e4       	ldi	r30, 0x4A	; 74
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	82 e1       	ldi	r24, 0x12	; 18
    12de:	9a e7       	ldi	r25, 0x7A	; 122
    12e0:	91 83       	std	Z+1, r25	; 0x01
    12e2:	80 83       	st	Z, r24
	OCR1B_REG = ((float32)duty_cycle / 100) * 65535;
    12e4:	08 e4       	ldi	r16, 0x48	; 72
    12e6:	10 e0       	ldi	r17, 0x00	; 0
    12e8:	89 81       	ldd	r24, Y+1	; 0x01
    12ea:	9a 81       	ldd	r25, Y+2	; 0x02
    12ec:	cc 01       	movw	r24, r24
    12ee:	a0 e0       	ldi	r26, 0x00	; 0
    12f0:	b0 e0       	ldi	r27, 0x00	; 0
    12f2:	bc 01       	movw	r22, r24
    12f4:	cd 01       	movw	r24, r26
    12f6:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    12fa:	dc 01       	movw	r26, r24
    12fc:	cb 01       	movw	r24, r22
    12fe:	bc 01       	movw	r22, r24
    1300:	cd 01       	movw	r24, r26
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	48 ec       	ldi	r20, 0xC8	; 200
    1308:	52 e4       	ldi	r21, 0x42	; 66
    130a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    130e:	dc 01       	movw	r26, r24
    1310:	cb 01       	movw	r24, r22
    1312:	bc 01       	movw	r22, r24
    1314:	cd 01       	movw	r24, r26
    1316:	20 e0       	ldi	r18, 0x00	; 0
    1318:	3f ef       	ldi	r19, 0xFF	; 255
    131a:	4f e7       	ldi	r20, 0x7F	; 127
    131c:	57 e4       	ldi	r21, 0x47	; 71
    131e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1322:	dc 01       	movw	r26, r24
    1324:	cb 01       	movw	r24, r22
    1326:	bc 01       	movw	r22, r24
    1328:	cd 01       	movw	r24, r26
    132a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    132e:	dc 01       	movw	r26, r24
    1330:	cb 01       	movw	r24, r22
    1332:	f8 01       	movw	r30, r16
    1334:	91 83       	std	Z+1, r25	; 0x01
    1336:	80 83       	st	Z, r24
	case TIMER1_CLK_WITH_64_PRESCALER_MSK:
		TCCR1B_REG &= TIMER1_CLK_WITH_PRESCALER_clr_MSK;
		TCCR1B_REG |= TIMER1_CLK_WITH_64_PRESCALER_MSK;
		break;
	case TIMER1_CLK_WITH_256_PRESCALER_MSK:
		TCCR1B_REG &= TIMER1_CLK_WITH_PRESCALER_clr_MSK;
    1338:	ae e4       	ldi	r26, 0x4E	; 78
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	ee e4       	ldi	r30, 0x4E	; 78
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	88 7f       	andi	r24, 0xF8	; 248
    1344:	8c 93       	st	X, r24
		TCCR1B_REG |= TIMER1_CLK_WITH_256_PRESCALER_MSK;
    1346:	ae e4       	ldi	r26, 0x4E	; 78
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	ee e4       	ldi	r30, 0x4E	; 78
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	84 60       	ori	r24, 0x04	; 4
    1352:	8c 93       	st	X, r24
	case TIMER1_EXTERNAL_CLK_WITH_RISING_EDGE_MSK:
		TCCR1B_REG &= TIMER1_CLK_WITH_PRESCALER_clr_MSK;
		TCCR1B_REG |= TIMER1_EXTERNAL_CLK_WITH_RISING_EDGE_MSK;
		break;
	}
}
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
    1358:	cf 91       	pop	r28
    135a:	df 91       	pop	r29
    135c:	1f 91       	pop	r17
    135e:	0f 91       	pop	r16
    1360:	08 95       	ret

00001362 <Timer2_PWM_DutyCycle>:
 *					 5. Setup the direction for OCR2 as output pin.
 * [Args]  : required input duty cycle
 * [RUTURN]: Void
 */
void Timer2_PWM_DutyCycle(uint8 duty_cycle)
{
    1362:	0f 93       	push	r16
    1364:	1f 93       	push	r17
    1366:	df 93       	push	r29
    1368:	cf 93       	push	r28
    136a:	0f 92       	push	r0
    136c:	cd b7       	in	r28, 0x3d	; 61
    136e:	de b7       	in	r29, 0x3e	; 62
    1370:	89 83       	std	Y+1, r24	; 0x01

	/* Initial value for Timer/Counter2 */
	TCNT2_REG = TIMER2_INITIAL_VALUE;
    1372:	e4 e4       	ldi	r30, 0x44	; 68
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	10 82       	st	Z, r1

	/* Compare value for Timer/Counter2 */
	OCR2_REG = ((float32)duty_cycle / 100) * 255;
    1378:	03 e4       	ldi	r16, 0x43	; 67
    137a:	10 e0       	ldi	r17, 0x00	; 0
    137c:	89 81       	ldd	r24, Y+1	; 0x01
    137e:	88 2f       	mov	r24, r24
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	a0 e0       	ldi	r26, 0x00	; 0
    1384:	b0 e0       	ldi	r27, 0x00	; 0
    1386:	bc 01       	movw	r22, r24
    1388:	cd 01       	movw	r24, r26
    138a:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    138e:	dc 01       	movw	r26, r24
    1390:	cb 01       	movw	r24, r22
    1392:	bc 01       	movw	r22, r24
    1394:	cd 01       	movw	r24, r26
    1396:	20 e0       	ldi	r18, 0x00	; 0
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	48 ec       	ldi	r20, 0xC8	; 200
    139c:	52 e4       	ldi	r21, 0x42	; 66
    139e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    13a2:	dc 01       	movw	r26, r24
    13a4:	cb 01       	movw	r24, r22
    13a6:	bc 01       	movw	r22, r24
    13a8:	cd 01       	movw	r24, r26
    13aa:	20 e0       	ldi	r18, 0x00	; 0
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	4f e7       	ldi	r20, 0x7F	; 127
    13b0:	53 e4       	ldi	r21, 0x43	; 67
    13b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13b6:	dc 01       	movw	r26, r24
    13b8:	cb 01       	movw	r24, r22
    13ba:	bc 01       	movw	r22, r24
    13bc:	cd 01       	movw	r24, r26
    13be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13c2:	dc 01       	movw	r26, r24
    13c4:	cb 01       	movw	r24, r22
    13c6:	f8 01       	movw	r30, r16
    13c8:	80 83       	st	Z, r24
	TCCR2_REG &= TIMER2_MODE_clr_MSK;
	TCCR2_REG |= TIMER2_MODE_FASTPWM_MSK;
#endif

#if TIMER2_OC2_BEHAVIOR_SELECTOR == TIMER2_OC2_NON_INVERTING_MSK
	TCCR2_REG &= TIMER2_OC2_clr_MSK;
    13ca:	a5 e4       	ldi	r26, 0x45	; 69
    13cc:	b0 e0       	ldi	r27, 0x00	; 0
    13ce:	e5 e4       	ldi	r30, 0x45	; 69
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	8f 7c       	andi	r24, 0xCF	; 207
    13d6:	8c 93       	st	X, r24
	GPIO_SetPinDir(TIMER2_OC2_PORT, TIMER2_OC2_Pin, pin_output);
    13d8:	83 e0       	ldi	r24, 0x03	; 3
    13da:	67 e0       	ldi	r22, 0x07	; 7
    13dc:	41 e0       	ldi	r20, 0x01	; 1
    13de:	0e 94 28 0a 	call	0x1450	; 0x1450 <GPIO_SetPinDir>
	TCCR2_REG |= TIMER2_OC2_NON_INVERTING_MSK;
    13e2:	a5 e4       	ldi	r26, 0x45	; 69
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	e5 e4       	ldi	r30, 0x45	; 69
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	80 62       	ori	r24, 0x20	; 32
    13ee:	8c 93       	st	X, r24
	case TIMER2_CLK_WITH_256_PRESCALER_MSK:
		TCCR2_REG &= TIMER2_CLK_WITH_PRESCALER_clr_MSK;
		TCCR2_REG |= TIMER2_CLK_WITH_256_PRESCALER_MSK;
		break;
	case TIMER2_CLK_WITH_1024_PRESCALER_MSK:
		TCCR2_REG &= TIMER2_CLK_WITH_PRESCALER_clr_MSK;
    13f0:	a5 e4       	ldi	r26, 0x45	; 69
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	e5 e4       	ldi	r30, 0x45	; 69
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	88 7f       	andi	r24, 0xF8	; 248
    13fc:	8c 93       	st	X, r24
		TCCR2_REG |= TIMER2_CLK_WITH_1024_PRESCALER_MSK;
    13fe:	a5 e4       	ldi	r26, 0x45	; 69
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	e5 e4       	ldi	r30, 0x45	; 69
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	87 60       	ori	r24, 0x07	; 7
    140a:	8c 93       	st	X, r24
		break;
	}
}
    140c:	0f 90       	pop	r0
    140e:	cf 91       	pop	r28
    1410:	df 91       	pop	r29
    1412:	1f 91       	pop	r17
    1414:	0f 91       	pop	r16
    1416:	08 95       	ret

00001418 <GI_Enable>:
 * [FUNCTION NAME]: GI_Enable
 * [DISCRIPTION]  : This Function used to enable Global Interrupt Enable (GIE)
 * [RUTURN]: Void
 */
void GI_Enable(void)
{
    1418:	df 93       	push	r29
    141a:	cf 93       	push	r28
    141c:	cd b7       	in	r28, 0x3d	; 61
    141e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REG,SREG_I);
    1420:	af e5       	ldi	r26, 0x5F	; 95
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	ef e5       	ldi	r30, 0x5F	; 95
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	80 68       	ori	r24, 0x80	; 128
    142c:	8c 93       	st	X, r24
}
    142e:	cf 91       	pop	r28
    1430:	df 91       	pop	r29
    1432:	08 95       	ret

00001434 <GI_Disable>:
 * [FUNCTION NAME]: GI_Disable
 * [DISCRIPTION]  : This Function used to Disable Global Interrupt Enable (GIE)
 * [RUTURN]: Void
 */
void GI_Disable(void)
{
    1434:	df 93       	push	r29
    1436:	cf 93       	push	r28
    1438:	cd b7       	in	r28, 0x3d	; 61
    143a:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG_REG,SREG_I);
    143c:	af e5       	ldi	r26, 0x5F	; 95
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	ef e5       	ldi	r30, 0x5F	; 95
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	8f 77       	andi	r24, 0x7F	; 127
    1448:	8c 93       	st	X, r24
}
    144a:	cf 91       	pop	r28
    144c:	df 91       	pop	r29
    144e:	08 95       	ret

00001450 <GPIO_SetPinDir>:
 [RUTURN]: Void
 [NOTE]: if Number of PORTn >= 4 OR PINn >= 8 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/

void GPIO_SetPinDir(uint8 PORTn, uint8 PINn, GPIO_PinDirection Dir)
{
    1450:	df 93       	push	r29
    1452:	cf 93       	push	r28
    1454:	00 d0       	rcall	.+0      	; 0x1456 <GPIO_SetPinDir+0x6>
    1456:	00 d0       	rcall	.+0      	; 0x1458 <GPIO_SetPinDir+0x8>
    1458:	0f 92       	push	r0
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
    145e:	89 83       	std	Y+1, r24	; 0x01
    1460:	6a 83       	std	Y+2, r22	; 0x02
    1462:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number.
	 */
	if((PORTn >= NUM_OF_PORTS) || (PINn >= NUM_OF_PINS_PER_PORT))
    1464:	89 81       	ldd	r24, Y+1	; 0x01
    1466:	84 30       	cpi	r24, 0x04	; 4
    1468:	08 f0       	brcs	.+2      	; 0x146c <GPIO_SetPinDir+0x1c>
    146a:	d5 c0       	rjmp	.+426    	; 0x1616 <GPIO_SetPinDir+0x1c6>
    146c:	8a 81       	ldd	r24, Y+2	; 0x02
    146e:	88 30       	cpi	r24, 0x08	; 8
    1470:	08 f0       	brcs	.+2      	; 0x1474 <GPIO_SetPinDir+0x24>
    1472:	d1 c0       	rjmp	.+418    	; 0x1616 <GPIO_SetPinDir+0x1c6>
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(PORTn)
    1474:	89 81       	ldd	r24, Y+1	; 0x01
    1476:	28 2f       	mov	r18, r24
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	3d 83       	std	Y+5, r19	; 0x05
    147c:	2c 83       	std	Y+4, r18	; 0x04
    147e:	8c 81       	ldd	r24, Y+4	; 0x04
    1480:	9d 81       	ldd	r25, Y+5	; 0x05
    1482:	81 30       	cpi	r24, 0x01	; 1
    1484:	91 05       	cpc	r25, r1
    1486:	09 f4       	brne	.+2      	; 0x148a <GPIO_SetPinDir+0x3a>
    1488:	43 c0       	rjmp	.+134    	; 0x1510 <GPIO_SetPinDir+0xc0>
    148a:	2c 81       	ldd	r18, Y+4	; 0x04
    148c:	3d 81       	ldd	r19, Y+5	; 0x05
    148e:	22 30       	cpi	r18, 0x02	; 2
    1490:	31 05       	cpc	r19, r1
    1492:	2c f4       	brge	.+10     	; 0x149e <GPIO_SetPinDir+0x4e>
    1494:	8c 81       	ldd	r24, Y+4	; 0x04
    1496:	9d 81       	ldd	r25, Y+5	; 0x05
    1498:	00 97       	sbiw	r24, 0x00	; 0
    149a:	71 f0       	breq	.+28     	; 0x14b8 <GPIO_SetPinDir+0x68>
    149c:	bc c0       	rjmp	.+376    	; 0x1616 <GPIO_SetPinDir+0x1c6>
    149e:	2c 81       	ldd	r18, Y+4	; 0x04
    14a0:	3d 81       	ldd	r19, Y+5	; 0x05
    14a2:	22 30       	cpi	r18, 0x02	; 2
    14a4:	31 05       	cpc	r19, r1
    14a6:	09 f4       	brne	.+2      	; 0x14aa <GPIO_SetPinDir+0x5a>
    14a8:	5f c0       	rjmp	.+190    	; 0x1568 <GPIO_SetPinDir+0x118>
    14aa:	8c 81       	ldd	r24, Y+4	; 0x04
    14ac:	9d 81       	ldd	r25, Y+5	; 0x05
    14ae:	83 30       	cpi	r24, 0x03	; 3
    14b0:	91 05       	cpc	r25, r1
    14b2:	09 f4       	brne	.+2      	; 0x14b6 <GPIO_SetPinDir+0x66>
    14b4:	85 c0       	rjmp	.+266    	; 0x15c0 <GPIO_SetPinDir+0x170>
    14b6:	af c0       	rjmp	.+350    	; 0x1616 <GPIO_SetPinDir+0x1c6>
		{
		case PORTA_ID:
			if(Dir == pin_output)
    14b8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ba:	81 30       	cpi	r24, 0x01	; 1
    14bc:	a1 f4       	brne	.+40     	; 0x14e6 <GPIO_SetPinDir+0x96>
			{
				SET_BIT(DDRA_REG,PINn);
    14be:	aa e3       	ldi	r26, 0x3A	; 58
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	ea e3       	ldi	r30, 0x3A	; 58
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	48 2f       	mov	r20, r24
    14ca:	8a 81       	ldd	r24, Y+2	; 0x02
    14cc:	28 2f       	mov	r18, r24
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	02 2e       	mov	r0, r18
    14d6:	02 c0       	rjmp	.+4      	; 0x14dc <GPIO_SetPinDir+0x8c>
    14d8:	88 0f       	add	r24, r24
    14da:	99 1f       	adc	r25, r25
    14dc:	0a 94       	dec	r0
    14de:	e2 f7       	brpl	.-8      	; 0x14d8 <GPIO_SetPinDir+0x88>
    14e0:	84 2b       	or	r24, r20
    14e2:	8c 93       	st	X, r24
    14e4:	98 c0       	rjmp	.+304    	; 0x1616 <GPIO_SetPinDir+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA_REG,PINn);
    14e6:	aa e3       	ldi	r26, 0x3A	; 58
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	ea e3       	ldi	r30, 0x3A	; 58
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	48 2f       	mov	r20, r24
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	28 2f       	mov	r18, r24
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	02 2e       	mov	r0, r18
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <GPIO_SetPinDir+0xb4>
    1500:	88 0f       	add	r24, r24
    1502:	99 1f       	adc	r25, r25
    1504:	0a 94       	dec	r0
    1506:	e2 f7       	brpl	.-8      	; 0x1500 <GPIO_SetPinDir+0xb0>
    1508:	80 95       	com	r24
    150a:	84 23       	and	r24, r20
    150c:	8c 93       	st	X, r24
    150e:	83 c0       	rjmp	.+262    	; 0x1616 <GPIO_SetPinDir+0x1c6>
			}
			break;
		case PORTB_ID:
			if(Dir == pin_output)
    1510:	8b 81       	ldd	r24, Y+3	; 0x03
    1512:	81 30       	cpi	r24, 0x01	; 1
    1514:	a1 f4       	brne	.+40     	; 0x153e <GPIO_SetPinDir+0xee>
			{
				SET_BIT(DDRB_REG,PINn);
    1516:	a7 e3       	ldi	r26, 0x37	; 55
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	e7 e3       	ldi	r30, 0x37	; 55
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	48 2f       	mov	r20, r24
    1522:	8a 81       	ldd	r24, Y+2	; 0x02
    1524:	28 2f       	mov	r18, r24
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	02 2e       	mov	r0, r18
    152e:	02 c0       	rjmp	.+4      	; 0x1534 <GPIO_SetPinDir+0xe4>
    1530:	88 0f       	add	r24, r24
    1532:	99 1f       	adc	r25, r25
    1534:	0a 94       	dec	r0
    1536:	e2 f7       	brpl	.-8      	; 0x1530 <GPIO_SetPinDir+0xe0>
    1538:	84 2b       	or	r24, r20
    153a:	8c 93       	st	X, r24
    153c:	6c c0       	rjmp	.+216    	; 0x1616 <GPIO_SetPinDir+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB_REG,PINn);
    153e:	a7 e3       	ldi	r26, 0x37	; 55
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	e7 e3       	ldi	r30, 0x37	; 55
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	48 2f       	mov	r20, r24
    154a:	8a 81       	ldd	r24, Y+2	; 0x02
    154c:	28 2f       	mov	r18, r24
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	02 2e       	mov	r0, r18
    1556:	02 c0       	rjmp	.+4      	; 0x155c <GPIO_SetPinDir+0x10c>
    1558:	88 0f       	add	r24, r24
    155a:	99 1f       	adc	r25, r25
    155c:	0a 94       	dec	r0
    155e:	e2 f7       	brpl	.-8      	; 0x1558 <GPIO_SetPinDir+0x108>
    1560:	80 95       	com	r24
    1562:	84 23       	and	r24, r20
    1564:	8c 93       	st	X, r24
    1566:	57 c0       	rjmp	.+174    	; 0x1616 <GPIO_SetPinDir+0x1c6>
			}
			break;
		case PORTC_ID:
			if(Dir == pin_output)
    1568:	8b 81       	ldd	r24, Y+3	; 0x03
    156a:	81 30       	cpi	r24, 0x01	; 1
    156c:	a1 f4       	brne	.+40     	; 0x1596 <GPIO_SetPinDir+0x146>
			{
				SET_BIT(DDRC_REG,PINn);
    156e:	a4 e3       	ldi	r26, 0x34	; 52
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	e4 e3       	ldi	r30, 0x34	; 52
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	48 2f       	mov	r20, r24
    157a:	8a 81       	ldd	r24, Y+2	; 0x02
    157c:	28 2f       	mov	r18, r24
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	02 2e       	mov	r0, r18
    1586:	02 c0       	rjmp	.+4      	; 0x158c <GPIO_SetPinDir+0x13c>
    1588:	88 0f       	add	r24, r24
    158a:	99 1f       	adc	r25, r25
    158c:	0a 94       	dec	r0
    158e:	e2 f7       	brpl	.-8      	; 0x1588 <GPIO_SetPinDir+0x138>
    1590:	84 2b       	or	r24, r20
    1592:	8c 93       	st	X, r24
    1594:	40 c0       	rjmp	.+128    	; 0x1616 <GPIO_SetPinDir+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC_REG,PINn);
    1596:	a4 e3       	ldi	r26, 0x34	; 52
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	e4 e3       	ldi	r30, 0x34	; 52
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	48 2f       	mov	r20, r24
    15a2:	8a 81       	ldd	r24, Y+2	; 0x02
    15a4:	28 2f       	mov	r18, r24
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	02 2e       	mov	r0, r18
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <GPIO_SetPinDir+0x164>
    15b0:	88 0f       	add	r24, r24
    15b2:	99 1f       	adc	r25, r25
    15b4:	0a 94       	dec	r0
    15b6:	e2 f7       	brpl	.-8      	; 0x15b0 <GPIO_SetPinDir+0x160>
    15b8:	80 95       	com	r24
    15ba:	84 23       	and	r24, r20
    15bc:	8c 93       	st	X, r24
    15be:	2b c0       	rjmp	.+86     	; 0x1616 <GPIO_SetPinDir+0x1c6>
			}
			break;
		case PORTD_ID:
			if(Dir == pin_output)
    15c0:	8b 81       	ldd	r24, Y+3	; 0x03
    15c2:	81 30       	cpi	r24, 0x01	; 1
    15c4:	a1 f4       	brne	.+40     	; 0x15ee <GPIO_SetPinDir+0x19e>
			{
				SET_BIT(DDRD_REG,PINn);
    15c6:	a1 e3       	ldi	r26, 0x31	; 49
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	e1 e3       	ldi	r30, 0x31	; 49
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	48 2f       	mov	r20, r24
    15d2:	8a 81       	ldd	r24, Y+2	; 0x02
    15d4:	28 2f       	mov	r18, r24
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	02 2e       	mov	r0, r18
    15de:	02 c0       	rjmp	.+4      	; 0x15e4 <GPIO_SetPinDir+0x194>
    15e0:	88 0f       	add	r24, r24
    15e2:	99 1f       	adc	r25, r25
    15e4:	0a 94       	dec	r0
    15e6:	e2 f7       	brpl	.-8      	; 0x15e0 <GPIO_SetPinDir+0x190>
    15e8:	84 2b       	or	r24, r20
    15ea:	8c 93       	st	X, r24
    15ec:	14 c0       	rjmp	.+40     	; 0x1616 <GPIO_SetPinDir+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD_REG,PINn);
    15ee:	a1 e3       	ldi	r26, 0x31	; 49
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	e1 e3       	ldi	r30, 0x31	; 49
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	48 2f       	mov	r20, r24
    15fa:	8a 81       	ldd	r24, Y+2	; 0x02
    15fc:	28 2f       	mov	r18, r24
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	02 2e       	mov	r0, r18
    1606:	02 c0       	rjmp	.+4      	; 0x160c <GPIO_SetPinDir+0x1bc>
    1608:	88 0f       	add	r24, r24
    160a:	99 1f       	adc	r25, r25
    160c:	0a 94       	dec	r0
    160e:	e2 f7       	brpl	.-8      	; 0x1608 <GPIO_SetPinDir+0x1b8>
    1610:	80 95       	com	r24
    1612:	84 23       	and	r24, r20
    1614:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1616:	0f 90       	pop	r0
    1618:	0f 90       	pop	r0
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
    1620:	cf 91       	pop	r28
    1622:	df 91       	pop	r29
    1624:	08 95       	ret

00001626 <GPIO_ReadPin>:
 [Args]: PORTn_ID(n=A,B,C,D) and PINn_ID(n =0...7)
 [RUTURN]: uint8
 [NOTE]: if Number of PORTn >= 4 OR PINn >= 8 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
uint8 GPIO_ReadPin(uint8 PORTn, uint8 PINn)
{
    1626:	df 93       	push	r29
    1628:	cf 93       	push	r28
    162a:	00 d0       	rcall	.+0      	; 0x162c <GPIO_ReadPin+0x6>
    162c:	00 d0       	rcall	.+0      	; 0x162e <GPIO_ReadPin+0x8>
    162e:	0f 92       	push	r0
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62
    1634:	8a 83       	std	Y+2, r24	; 0x02
    1636:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1638:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((PORTn >= NUM_OF_PORTS) || (PINn >= NUM_OF_PINS_PER_PORT))
    163a:	8a 81       	ldd	r24, Y+2	; 0x02
    163c:	84 30       	cpi	r24, 0x04	; 4
    163e:	08 f0       	brcs	.+2      	; 0x1642 <GPIO_ReadPin+0x1c>
    1640:	84 c0       	rjmp	.+264    	; 0x174a <GPIO_ReadPin+0x124>
    1642:	8b 81       	ldd	r24, Y+3	; 0x03
    1644:	88 30       	cpi	r24, 0x08	; 8
    1646:	08 f0       	brcs	.+2      	; 0x164a <GPIO_ReadPin+0x24>
    1648:	80 c0       	rjmp	.+256    	; 0x174a <GPIO_ReadPin+0x124>
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		/* Read the pin value as required */
		switch(PORTn)
    164a:	8a 81       	ldd	r24, Y+2	; 0x02
    164c:	28 2f       	mov	r18, r24
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	3d 83       	std	Y+5, r19	; 0x05
    1652:	2c 83       	std	Y+4, r18	; 0x04
    1654:	4c 81       	ldd	r20, Y+4	; 0x04
    1656:	5d 81       	ldd	r21, Y+5	; 0x05
    1658:	41 30       	cpi	r20, 0x01	; 1
    165a:	51 05       	cpc	r21, r1
    165c:	79 f1       	breq	.+94     	; 0x16bc <GPIO_ReadPin+0x96>
    165e:	8c 81       	ldd	r24, Y+4	; 0x04
    1660:	9d 81       	ldd	r25, Y+5	; 0x05
    1662:	82 30       	cpi	r24, 0x02	; 2
    1664:	91 05       	cpc	r25, r1
    1666:	34 f4       	brge	.+12     	; 0x1674 <GPIO_ReadPin+0x4e>
    1668:	2c 81       	ldd	r18, Y+4	; 0x04
    166a:	3d 81       	ldd	r19, Y+5	; 0x05
    166c:	21 15       	cp	r18, r1
    166e:	31 05       	cpc	r19, r1
    1670:	69 f0       	breq	.+26     	; 0x168c <GPIO_ReadPin+0x66>
    1672:	6b c0       	rjmp	.+214    	; 0x174a <GPIO_ReadPin+0x124>
    1674:	4c 81       	ldd	r20, Y+4	; 0x04
    1676:	5d 81       	ldd	r21, Y+5	; 0x05
    1678:	42 30       	cpi	r20, 0x02	; 2
    167a:	51 05       	cpc	r21, r1
    167c:	b9 f1       	breq	.+110    	; 0x16ec <GPIO_ReadPin+0xc6>
    167e:	8c 81       	ldd	r24, Y+4	; 0x04
    1680:	9d 81       	ldd	r25, Y+5	; 0x05
    1682:	83 30       	cpi	r24, 0x03	; 3
    1684:	91 05       	cpc	r25, r1
    1686:	09 f4       	brne	.+2      	; 0x168a <GPIO_ReadPin+0x64>
    1688:	49 c0       	rjmp	.+146    	; 0x171c <GPIO_ReadPin+0xf6>
    168a:	5f c0       	rjmp	.+190    	; 0x174a <GPIO_ReadPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA_REG,PINn))
    168c:	e9 e3       	ldi	r30, 0x39	; 57
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	28 2f       	mov	r18, r24
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	8b 81       	ldd	r24, Y+3	; 0x03
    1698:	88 2f       	mov	r24, r24
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	a9 01       	movw	r20, r18
    169e:	02 c0       	rjmp	.+4      	; 0x16a4 <GPIO_ReadPin+0x7e>
    16a0:	55 95       	asr	r21
    16a2:	47 95       	ror	r20
    16a4:	8a 95       	dec	r24
    16a6:	e2 f7       	brpl	.-8      	; 0x16a0 <GPIO_ReadPin+0x7a>
    16a8:	ca 01       	movw	r24, r20
    16aa:	81 70       	andi	r24, 0x01	; 1
    16ac:	90 70       	andi	r25, 0x00	; 0
    16ae:	88 23       	and	r24, r24
    16b0:	19 f0       	breq	.+6      	; 0x16b8 <GPIO_ReadPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	89 83       	std	Y+1, r24	; 0x01
    16b6:	49 c0       	rjmp	.+146    	; 0x174a <GPIO_ReadPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    16b8:	19 82       	std	Y+1, r1	; 0x01
    16ba:	47 c0       	rjmp	.+142    	; 0x174a <GPIO_ReadPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB_REG,PINn))
    16bc:	e6 e3       	ldi	r30, 0x36	; 54
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	28 2f       	mov	r18, r24
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	8b 81       	ldd	r24, Y+3	; 0x03
    16c8:	88 2f       	mov	r24, r24
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	a9 01       	movw	r20, r18
    16ce:	02 c0       	rjmp	.+4      	; 0x16d4 <GPIO_ReadPin+0xae>
    16d0:	55 95       	asr	r21
    16d2:	47 95       	ror	r20
    16d4:	8a 95       	dec	r24
    16d6:	e2 f7       	brpl	.-8      	; 0x16d0 <GPIO_ReadPin+0xaa>
    16d8:	ca 01       	movw	r24, r20
    16da:	81 70       	andi	r24, 0x01	; 1
    16dc:	90 70       	andi	r25, 0x00	; 0
    16de:	88 23       	and	r24, r24
    16e0:	19 f0       	breq	.+6      	; 0x16e8 <GPIO_ReadPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	89 83       	std	Y+1, r24	; 0x01
    16e6:	31 c0       	rjmp	.+98     	; 0x174a <GPIO_ReadPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    16e8:	19 82       	std	Y+1, r1	; 0x01
    16ea:	2f c0       	rjmp	.+94     	; 0x174a <GPIO_ReadPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC_REG,PINn))
    16ec:	e3 e3       	ldi	r30, 0x33	; 51
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	28 2f       	mov	r18, r24
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	8b 81       	ldd	r24, Y+3	; 0x03
    16f8:	88 2f       	mov	r24, r24
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	a9 01       	movw	r20, r18
    16fe:	02 c0       	rjmp	.+4      	; 0x1704 <GPIO_ReadPin+0xde>
    1700:	55 95       	asr	r21
    1702:	47 95       	ror	r20
    1704:	8a 95       	dec	r24
    1706:	e2 f7       	brpl	.-8      	; 0x1700 <GPIO_ReadPin+0xda>
    1708:	ca 01       	movw	r24, r20
    170a:	81 70       	andi	r24, 0x01	; 1
    170c:	90 70       	andi	r25, 0x00	; 0
    170e:	88 23       	and	r24, r24
    1710:	19 f0       	breq	.+6      	; 0x1718 <GPIO_ReadPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	89 83       	std	Y+1, r24	; 0x01
    1716:	19 c0       	rjmp	.+50     	; 0x174a <GPIO_ReadPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1718:	19 82       	std	Y+1, r1	; 0x01
    171a:	17 c0       	rjmp	.+46     	; 0x174a <GPIO_ReadPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND_REG,PINn))
    171c:	e0 e3       	ldi	r30, 0x30	; 48
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	80 81       	ld	r24, Z
    1722:	28 2f       	mov	r18, r24
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	8b 81       	ldd	r24, Y+3	; 0x03
    1728:	88 2f       	mov	r24, r24
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	a9 01       	movw	r20, r18
    172e:	02 c0       	rjmp	.+4      	; 0x1734 <GPIO_ReadPin+0x10e>
    1730:	55 95       	asr	r21
    1732:	47 95       	ror	r20
    1734:	8a 95       	dec	r24
    1736:	e2 f7       	brpl	.-8      	; 0x1730 <GPIO_ReadPin+0x10a>
    1738:	ca 01       	movw	r24, r20
    173a:	81 70       	andi	r24, 0x01	; 1
    173c:	90 70       	andi	r25, 0x00	; 0
    173e:	88 23       	and	r24, r24
    1740:	19 f0       	breq	.+6      	; 0x1748 <GPIO_ReadPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	89 83       	std	Y+1, r24	; 0x01
    1746:	01 c0       	rjmp	.+2      	; 0x174a <GPIO_ReadPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1748:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return pin_value;
    174a:	89 81       	ldd	r24, Y+1	; 0x01
}
    174c:	0f 90       	pop	r0
    174e:	0f 90       	pop	r0
    1750:	0f 90       	pop	r0
    1752:	0f 90       	pop	r0
    1754:	0f 90       	pop	r0
    1756:	cf 91       	pop	r28
    1758:	df 91       	pop	r29
    175a:	08 95       	ret

0000175c <GPIO_WritePin>:
 [Args]: PORTn_ID(n=A,B,C,D) and PINn_ID(n =0...7) and Level (logic_low or logic_high)
 [RUTURN]: void
 [NOTE]: if Number of PORTn >= 4 OR PINn >= 8 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
void GPIO_WritePin(uint8 PORTn, uint8 PINn, STD_LevelType level)
{
    175c:	df 93       	push	r29
    175e:	cf 93       	push	r28
    1760:	00 d0       	rcall	.+0      	; 0x1762 <GPIO_WritePin+0x6>
    1762:	00 d0       	rcall	.+0      	; 0x1764 <GPIO_WritePin+0x8>
    1764:	0f 92       	push	r0
    1766:	cd b7       	in	r28, 0x3d	; 61
    1768:	de b7       	in	r29, 0x3e	; 62
    176a:	89 83       	std	Y+1, r24	; 0x01
    176c:	6a 83       	std	Y+2, r22	; 0x02
    176e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((PORTn >= NUM_OF_PORTS) || (PINn >= NUM_OF_PINS_PER_PORT))
    1770:	89 81       	ldd	r24, Y+1	; 0x01
    1772:	84 30       	cpi	r24, 0x04	; 4
    1774:	08 f0       	brcs	.+2      	; 0x1778 <GPIO_WritePin+0x1c>
    1776:	d5 c0       	rjmp	.+426    	; 0x1922 <GPIO_WritePin+0x1c6>
    1778:	8a 81       	ldd	r24, Y+2	; 0x02
    177a:	88 30       	cpi	r24, 0x08	; 8
    177c:	08 f0       	brcs	.+2      	; 0x1780 <GPIO_WritePin+0x24>
    177e:	d1 c0       	rjmp	.+418    	; 0x1922 <GPIO_WritePin+0x1c6>
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		/* Write the pin value as required */
		switch(PORTn)
    1780:	89 81       	ldd	r24, Y+1	; 0x01
    1782:	28 2f       	mov	r18, r24
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	3d 83       	std	Y+5, r19	; 0x05
    1788:	2c 83       	std	Y+4, r18	; 0x04
    178a:	8c 81       	ldd	r24, Y+4	; 0x04
    178c:	9d 81       	ldd	r25, Y+5	; 0x05
    178e:	81 30       	cpi	r24, 0x01	; 1
    1790:	91 05       	cpc	r25, r1
    1792:	09 f4       	brne	.+2      	; 0x1796 <GPIO_WritePin+0x3a>
    1794:	43 c0       	rjmp	.+134    	; 0x181c <GPIO_WritePin+0xc0>
    1796:	2c 81       	ldd	r18, Y+4	; 0x04
    1798:	3d 81       	ldd	r19, Y+5	; 0x05
    179a:	22 30       	cpi	r18, 0x02	; 2
    179c:	31 05       	cpc	r19, r1
    179e:	2c f4       	brge	.+10     	; 0x17aa <GPIO_WritePin+0x4e>
    17a0:	8c 81       	ldd	r24, Y+4	; 0x04
    17a2:	9d 81       	ldd	r25, Y+5	; 0x05
    17a4:	00 97       	sbiw	r24, 0x00	; 0
    17a6:	71 f0       	breq	.+28     	; 0x17c4 <GPIO_WritePin+0x68>
    17a8:	bc c0       	rjmp	.+376    	; 0x1922 <GPIO_WritePin+0x1c6>
    17aa:	2c 81       	ldd	r18, Y+4	; 0x04
    17ac:	3d 81       	ldd	r19, Y+5	; 0x05
    17ae:	22 30       	cpi	r18, 0x02	; 2
    17b0:	31 05       	cpc	r19, r1
    17b2:	09 f4       	brne	.+2      	; 0x17b6 <GPIO_WritePin+0x5a>
    17b4:	5f c0       	rjmp	.+190    	; 0x1874 <GPIO_WritePin+0x118>
    17b6:	8c 81       	ldd	r24, Y+4	; 0x04
    17b8:	9d 81       	ldd	r25, Y+5	; 0x05
    17ba:	83 30       	cpi	r24, 0x03	; 3
    17bc:	91 05       	cpc	r25, r1
    17be:	09 f4       	brne	.+2      	; 0x17c2 <GPIO_WritePin+0x66>
    17c0:	85 c0       	rjmp	.+266    	; 0x18cc <GPIO_WritePin+0x170>
    17c2:	af c0       	rjmp	.+350    	; 0x1922 <GPIO_WritePin+0x1c6>
		{
		case PORTA_ID:
			if(level == LOGIC_HIGH)
    17c4:	8b 81       	ldd	r24, Y+3	; 0x03
    17c6:	81 30       	cpi	r24, 0x01	; 1
    17c8:	a1 f4       	brne	.+40     	; 0x17f2 <GPIO_WritePin+0x96>
			{
				SET_BIT(PORTA_REG,PINn);
    17ca:	ab e3       	ldi	r26, 0x3B	; 59
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	eb e3       	ldi	r30, 0x3B	; 59
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	48 2f       	mov	r20, r24
    17d6:	8a 81       	ldd	r24, Y+2	; 0x02
    17d8:	28 2f       	mov	r18, r24
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	02 2e       	mov	r0, r18
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <GPIO_WritePin+0x8c>
    17e4:	88 0f       	add	r24, r24
    17e6:	99 1f       	adc	r25, r25
    17e8:	0a 94       	dec	r0
    17ea:	e2 f7       	brpl	.-8      	; 0x17e4 <GPIO_WritePin+0x88>
    17ec:	84 2b       	or	r24, r20
    17ee:	8c 93       	st	X, r24
    17f0:	98 c0       	rjmp	.+304    	; 0x1922 <GPIO_WritePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA_REG,PINn);
    17f2:	ab e3       	ldi	r26, 0x3B	; 59
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	eb e3       	ldi	r30, 0x3B	; 59
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	48 2f       	mov	r20, r24
    17fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1800:	28 2f       	mov	r18, r24
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	02 2e       	mov	r0, r18
    180a:	02 c0       	rjmp	.+4      	; 0x1810 <GPIO_WritePin+0xb4>
    180c:	88 0f       	add	r24, r24
    180e:	99 1f       	adc	r25, r25
    1810:	0a 94       	dec	r0
    1812:	e2 f7       	brpl	.-8      	; 0x180c <GPIO_WritePin+0xb0>
    1814:	80 95       	com	r24
    1816:	84 23       	and	r24, r20
    1818:	8c 93       	st	X, r24
    181a:	83 c0       	rjmp	.+262    	; 0x1922 <GPIO_WritePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(level == LOGIC_HIGH)
    181c:	8b 81       	ldd	r24, Y+3	; 0x03
    181e:	81 30       	cpi	r24, 0x01	; 1
    1820:	a1 f4       	brne	.+40     	; 0x184a <GPIO_WritePin+0xee>
			{
				SET_BIT(PORTB_REG,PINn);
    1822:	a8 e3       	ldi	r26, 0x38	; 56
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	e8 e3       	ldi	r30, 0x38	; 56
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	48 2f       	mov	r20, r24
    182e:	8a 81       	ldd	r24, Y+2	; 0x02
    1830:	28 2f       	mov	r18, r24
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	02 2e       	mov	r0, r18
    183a:	02 c0       	rjmp	.+4      	; 0x1840 <GPIO_WritePin+0xe4>
    183c:	88 0f       	add	r24, r24
    183e:	99 1f       	adc	r25, r25
    1840:	0a 94       	dec	r0
    1842:	e2 f7       	brpl	.-8      	; 0x183c <GPIO_WritePin+0xe0>
    1844:	84 2b       	or	r24, r20
    1846:	8c 93       	st	X, r24
    1848:	6c c0       	rjmp	.+216    	; 0x1922 <GPIO_WritePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB_REG,PINn);
    184a:	a8 e3       	ldi	r26, 0x38	; 56
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	e8 e3       	ldi	r30, 0x38	; 56
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	48 2f       	mov	r20, r24
    1856:	8a 81       	ldd	r24, Y+2	; 0x02
    1858:	28 2f       	mov	r18, r24
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	02 2e       	mov	r0, r18
    1862:	02 c0       	rjmp	.+4      	; 0x1868 <GPIO_WritePin+0x10c>
    1864:	88 0f       	add	r24, r24
    1866:	99 1f       	adc	r25, r25
    1868:	0a 94       	dec	r0
    186a:	e2 f7       	brpl	.-8      	; 0x1864 <GPIO_WritePin+0x108>
    186c:	80 95       	com	r24
    186e:	84 23       	and	r24, r20
    1870:	8c 93       	st	X, r24
    1872:	57 c0       	rjmp	.+174    	; 0x1922 <GPIO_WritePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(level == LOGIC_HIGH)
    1874:	8b 81       	ldd	r24, Y+3	; 0x03
    1876:	81 30       	cpi	r24, 0x01	; 1
    1878:	a1 f4       	brne	.+40     	; 0x18a2 <GPIO_WritePin+0x146>
			{
				SET_BIT(PORTC_REG,PINn);
    187a:	a5 e3       	ldi	r26, 0x35	; 53
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	e5 e3       	ldi	r30, 0x35	; 53
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	48 2f       	mov	r20, r24
    1886:	8a 81       	ldd	r24, Y+2	; 0x02
    1888:	28 2f       	mov	r18, r24
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	02 2e       	mov	r0, r18
    1892:	02 c0       	rjmp	.+4      	; 0x1898 <GPIO_WritePin+0x13c>
    1894:	88 0f       	add	r24, r24
    1896:	99 1f       	adc	r25, r25
    1898:	0a 94       	dec	r0
    189a:	e2 f7       	brpl	.-8      	; 0x1894 <GPIO_WritePin+0x138>
    189c:	84 2b       	or	r24, r20
    189e:	8c 93       	st	X, r24
    18a0:	40 c0       	rjmp	.+128    	; 0x1922 <GPIO_WritePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC_REG,PINn);
    18a2:	a5 e3       	ldi	r26, 0x35	; 53
    18a4:	b0 e0       	ldi	r27, 0x00	; 0
    18a6:	e5 e3       	ldi	r30, 0x35	; 53
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	48 2f       	mov	r20, r24
    18ae:	8a 81       	ldd	r24, Y+2	; 0x02
    18b0:	28 2f       	mov	r18, r24
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	02 2e       	mov	r0, r18
    18ba:	02 c0       	rjmp	.+4      	; 0x18c0 <GPIO_WritePin+0x164>
    18bc:	88 0f       	add	r24, r24
    18be:	99 1f       	adc	r25, r25
    18c0:	0a 94       	dec	r0
    18c2:	e2 f7       	brpl	.-8      	; 0x18bc <GPIO_WritePin+0x160>
    18c4:	80 95       	com	r24
    18c6:	84 23       	and	r24, r20
    18c8:	8c 93       	st	X, r24
    18ca:	2b c0       	rjmp	.+86     	; 0x1922 <GPIO_WritePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(level == LOGIC_HIGH)
    18cc:	8b 81       	ldd	r24, Y+3	; 0x03
    18ce:	81 30       	cpi	r24, 0x01	; 1
    18d0:	a1 f4       	brne	.+40     	; 0x18fa <GPIO_WritePin+0x19e>
			{
				SET_BIT(PORTD_REG,PINn);
    18d2:	a2 e3       	ldi	r26, 0x32	; 50
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	e2 e3       	ldi	r30, 0x32	; 50
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	48 2f       	mov	r20, r24
    18de:	8a 81       	ldd	r24, Y+2	; 0x02
    18e0:	28 2f       	mov	r18, r24
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	02 2e       	mov	r0, r18
    18ea:	02 c0       	rjmp	.+4      	; 0x18f0 <GPIO_WritePin+0x194>
    18ec:	88 0f       	add	r24, r24
    18ee:	99 1f       	adc	r25, r25
    18f0:	0a 94       	dec	r0
    18f2:	e2 f7       	brpl	.-8      	; 0x18ec <GPIO_WritePin+0x190>
    18f4:	84 2b       	or	r24, r20
    18f6:	8c 93       	st	X, r24
    18f8:	14 c0       	rjmp	.+40     	; 0x1922 <GPIO_WritePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD_REG,PINn);
    18fa:	a2 e3       	ldi	r26, 0x32	; 50
    18fc:	b0 e0       	ldi	r27, 0x00	; 0
    18fe:	e2 e3       	ldi	r30, 0x32	; 50
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	80 81       	ld	r24, Z
    1904:	48 2f       	mov	r20, r24
    1906:	8a 81       	ldd	r24, Y+2	; 0x02
    1908:	28 2f       	mov	r18, r24
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	02 2e       	mov	r0, r18
    1912:	02 c0       	rjmp	.+4      	; 0x1918 <GPIO_WritePin+0x1bc>
    1914:	88 0f       	add	r24, r24
    1916:	99 1f       	adc	r25, r25
    1918:	0a 94       	dec	r0
    191a:	e2 f7       	brpl	.-8      	; 0x1914 <GPIO_WritePin+0x1b8>
    191c:	80 95       	com	r24
    191e:	84 23       	and	r24, r20
    1920:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1922:	0f 90       	pop	r0
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	0f 90       	pop	r0
    192a:	0f 90       	pop	r0
    192c:	cf 91       	pop	r28
    192e:	df 91       	pop	r29
    1930:	08 95       	ret

00001932 <GPIO_FlipPin>:
 [Args]: PORTn_ID(n=A,B,C,D) and PINn_ID(n =0...7)
 [RUTURN]: void
 [NOTE]: if Number of PORTn >= 4 OR PINn >= 8 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
void GPIO_FlipPin(uint8 PORTn, uint8 PINn)
{
    1932:	df 93       	push	r29
    1934:	cf 93       	push	r28
    1936:	00 d0       	rcall	.+0      	; 0x1938 <GPIO_FlipPin+0x6>
    1938:	00 d0       	rcall	.+0      	; 0x193a <GPIO_FlipPin+0x8>
    193a:	cd b7       	in	r28, 0x3d	; 61
    193c:	de b7       	in	r29, 0x3e	; 62
    193e:	89 83       	std	Y+1, r24	; 0x01
    1940:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((PORTn >= NUM_OF_PORTS) || (PINn >= NUM_OF_PINS_PER_PORT))
    1942:	89 81       	ldd	r24, Y+1	; 0x01
    1944:	84 30       	cpi	r24, 0x04	; 4
    1946:	08 f0       	brcs	.+2      	; 0x194a <GPIO_FlipPin+0x18>
    1948:	72 c0       	rjmp	.+228    	; 0x1a2e <GPIO_FlipPin+0xfc>
    194a:	8a 81       	ldd	r24, Y+2	; 0x02
    194c:	88 30       	cpi	r24, 0x08	; 8
    194e:	08 f0       	brcs	.+2      	; 0x1952 <GPIO_FlipPin+0x20>
    1950:	6e c0       	rjmp	.+220    	; 0x1a2e <GPIO_FlipPin+0xfc>
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		/* Flip the pin value as required */
		switch(PORTn)
    1952:	89 81       	ldd	r24, Y+1	; 0x01
    1954:	28 2f       	mov	r18, r24
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	3c 83       	std	Y+4, r19	; 0x04
    195a:	2b 83       	std	Y+3, r18	; 0x03
    195c:	8b 81       	ldd	r24, Y+3	; 0x03
    195e:	9c 81       	ldd	r25, Y+4	; 0x04
    1960:	81 30       	cpi	r24, 0x01	; 1
    1962:	91 05       	cpc	r25, r1
    1964:	49 f1       	breq	.+82     	; 0x19b8 <GPIO_FlipPin+0x86>
    1966:	2b 81       	ldd	r18, Y+3	; 0x03
    1968:	3c 81       	ldd	r19, Y+4	; 0x04
    196a:	22 30       	cpi	r18, 0x02	; 2
    196c:	31 05       	cpc	r19, r1
    196e:	2c f4       	brge	.+10     	; 0x197a <GPIO_FlipPin+0x48>
    1970:	8b 81       	ldd	r24, Y+3	; 0x03
    1972:	9c 81       	ldd	r25, Y+4	; 0x04
    1974:	00 97       	sbiw	r24, 0x00	; 0
    1976:	61 f0       	breq	.+24     	; 0x1990 <GPIO_FlipPin+0x5e>
    1978:	5a c0       	rjmp	.+180    	; 0x1a2e <GPIO_FlipPin+0xfc>
    197a:	2b 81       	ldd	r18, Y+3	; 0x03
    197c:	3c 81       	ldd	r19, Y+4	; 0x04
    197e:	22 30       	cpi	r18, 0x02	; 2
    1980:	31 05       	cpc	r19, r1
    1982:	71 f1       	breq	.+92     	; 0x19e0 <GPIO_FlipPin+0xae>
    1984:	8b 81       	ldd	r24, Y+3	; 0x03
    1986:	9c 81       	ldd	r25, Y+4	; 0x04
    1988:	83 30       	cpi	r24, 0x03	; 3
    198a:	91 05       	cpc	r25, r1
    198c:	e9 f1       	breq	.+122    	; 0x1a08 <GPIO_FlipPin+0xd6>
    198e:	4f c0       	rjmp	.+158    	; 0x1a2e <GPIO_FlipPin+0xfc>
		{
		case PORTA_ID:
			TOGGLE_BIT(PORTA_REG,PINn);
    1990:	ab e3       	ldi	r26, 0x3B	; 59
    1992:	b0 e0       	ldi	r27, 0x00	; 0
    1994:	eb e3       	ldi	r30, 0x3B	; 59
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	80 81       	ld	r24, Z
    199a:	48 2f       	mov	r20, r24
    199c:	8a 81       	ldd	r24, Y+2	; 0x02
    199e:	28 2f       	mov	r18, r24
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	02 2e       	mov	r0, r18
    19a8:	02 c0       	rjmp	.+4      	; 0x19ae <GPIO_FlipPin+0x7c>
    19aa:	88 0f       	add	r24, r24
    19ac:	99 1f       	adc	r25, r25
    19ae:	0a 94       	dec	r0
    19b0:	e2 f7       	brpl	.-8      	; 0x19aa <GPIO_FlipPin+0x78>
    19b2:	84 27       	eor	r24, r20
    19b4:	8c 93       	st	X, r24
    19b6:	3b c0       	rjmp	.+118    	; 0x1a2e <GPIO_FlipPin+0xfc>
			break;
		case PORTB_ID:
			TOGGLE_BIT(PORTB_REG,PINn);
    19b8:	a8 e3       	ldi	r26, 0x38	; 56
    19ba:	b0 e0       	ldi	r27, 0x00	; 0
    19bc:	e8 e3       	ldi	r30, 0x38	; 56
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	80 81       	ld	r24, Z
    19c2:	48 2f       	mov	r20, r24
    19c4:	8a 81       	ldd	r24, Y+2	; 0x02
    19c6:	28 2f       	mov	r18, r24
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	02 2e       	mov	r0, r18
    19d0:	02 c0       	rjmp	.+4      	; 0x19d6 <GPIO_FlipPin+0xa4>
    19d2:	88 0f       	add	r24, r24
    19d4:	99 1f       	adc	r25, r25
    19d6:	0a 94       	dec	r0
    19d8:	e2 f7       	brpl	.-8      	; 0x19d2 <GPIO_FlipPin+0xa0>
    19da:	84 27       	eor	r24, r20
    19dc:	8c 93       	st	X, r24
    19de:	27 c0       	rjmp	.+78     	; 0x1a2e <GPIO_FlipPin+0xfc>
			break;
		case PORTC_ID:
			TOGGLE_BIT(PORTC_REG,PINn);
    19e0:	a5 e3       	ldi	r26, 0x35	; 53
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	e5 e3       	ldi	r30, 0x35	; 53
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 81       	ld	r24, Z
    19ea:	48 2f       	mov	r20, r24
    19ec:	8a 81       	ldd	r24, Y+2	; 0x02
    19ee:	28 2f       	mov	r18, r24
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	02 2e       	mov	r0, r18
    19f8:	02 c0       	rjmp	.+4      	; 0x19fe <GPIO_FlipPin+0xcc>
    19fa:	88 0f       	add	r24, r24
    19fc:	99 1f       	adc	r25, r25
    19fe:	0a 94       	dec	r0
    1a00:	e2 f7       	brpl	.-8      	; 0x19fa <GPIO_FlipPin+0xc8>
    1a02:	84 27       	eor	r24, r20
    1a04:	8c 93       	st	X, r24
    1a06:	13 c0       	rjmp	.+38     	; 0x1a2e <GPIO_FlipPin+0xfc>
			break;
		case PORTD_ID:
			TOGGLE_BIT(PORTD_REG,PINn);
    1a08:	a2 e3       	ldi	r26, 0x32	; 50
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	e2 e3       	ldi	r30, 0x32	; 50
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	80 81       	ld	r24, Z
    1a12:	48 2f       	mov	r20, r24
    1a14:	8a 81       	ldd	r24, Y+2	; 0x02
    1a16:	28 2f       	mov	r18, r24
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	02 2e       	mov	r0, r18
    1a20:	02 c0       	rjmp	.+4      	; 0x1a26 <GPIO_FlipPin+0xf4>
    1a22:	88 0f       	add	r24, r24
    1a24:	99 1f       	adc	r25, r25
    1a26:	0a 94       	dec	r0
    1a28:	e2 f7       	brpl	.-8      	; 0x1a22 <GPIO_FlipPin+0xf0>
    1a2a:	84 27       	eor	r24, r20
    1a2c:	8c 93       	st	X, r24
			break;
		}
	}
}
    1a2e:	0f 90       	pop	r0
    1a30:	0f 90       	pop	r0
    1a32:	0f 90       	pop	r0
    1a34:	0f 90       	pop	r0
    1a36:	cf 91       	pop	r28
    1a38:	df 91       	pop	r29
    1a3a:	08 95       	ret

00001a3c <GPIO_SetPortDir>:
 [Args]: PORTn_ID(n=A,B,C,D) and Direction (input_port or output_port)
 [RUTURN]: Void
 [NOTE]: if Number of PORTn >= 4 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
void GPIO_SetPortDir(uint8 PORTn, GPIO_PortDirection Dir)
{
    1a3c:	df 93       	push	r29
    1a3e:	cf 93       	push	r28
    1a40:	00 d0       	rcall	.+0      	; 0x1a42 <GPIO_SetPortDir+0x6>
    1a42:	00 d0       	rcall	.+0      	; 0x1a44 <GPIO_SetPortDir+0x8>
    1a44:	cd b7       	in	r28, 0x3d	; 61
    1a46:	de b7       	in	r29, 0x3e	; 62
    1a48:	89 83       	std	Y+1, r24	; 0x01
    1a4a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(PORTn >= NUM_OF_PORTS)
    1a4c:	89 81       	ldd	r24, Y+1	; 0x01
    1a4e:	84 30       	cpi	r24, 0x04	; 4
    1a50:	90 f5       	brcc	.+100    	; 0x1ab6 <GPIO_SetPortDir+0x7a>
	{
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		switch(PORTn)
    1a52:	89 81       	ldd	r24, Y+1	; 0x01
    1a54:	28 2f       	mov	r18, r24
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	3c 83       	std	Y+4, r19	; 0x04
    1a5a:	2b 83       	std	Y+3, r18	; 0x03
    1a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a60:	81 30       	cpi	r24, 0x01	; 1
    1a62:	91 05       	cpc	r25, r1
    1a64:	d1 f0       	breq	.+52     	; 0x1a9a <GPIO_SetPortDir+0x5e>
    1a66:	2b 81       	ldd	r18, Y+3	; 0x03
    1a68:	3c 81       	ldd	r19, Y+4	; 0x04
    1a6a:	22 30       	cpi	r18, 0x02	; 2
    1a6c:	31 05       	cpc	r19, r1
    1a6e:	2c f4       	brge	.+10     	; 0x1a7a <GPIO_SetPortDir+0x3e>
    1a70:	8b 81       	ldd	r24, Y+3	; 0x03
    1a72:	9c 81       	ldd	r25, Y+4	; 0x04
    1a74:	00 97       	sbiw	r24, 0x00	; 0
    1a76:	61 f0       	breq	.+24     	; 0x1a90 <GPIO_SetPortDir+0x54>
    1a78:	1e c0       	rjmp	.+60     	; 0x1ab6 <GPIO_SetPortDir+0x7a>
    1a7a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a7c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a7e:	22 30       	cpi	r18, 0x02	; 2
    1a80:	31 05       	cpc	r19, r1
    1a82:	81 f0       	breq	.+32     	; 0x1aa4 <GPIO_SetPortDir+0x68>
    1a84:	8b 81       	ldd	r24, Y+3	; 0x03
    1a86:	9c 81       	ldd	r25, Y+4	; 0x04
    1a88:	83 30       	cpi	r24, 0x03	; 3
    1a8a:	91 05       	cpc	r25, r1
    1a8c:	81 f0       	breq	.+32     	; 0x1aae <GPIO_SetPortDir+0x72>
    1a8e:	13 c0       	rjmp	.+38     	; 0x1ab6 <GPIO_SetPortDir+0x7a>
		{
		case PORTA_ID:
			DDRA_REG = Dir;
    1a90:	ea e3       	ldi	r30, 0x3A	; 58
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	8a 81       	ldd	r24, Y+2	; 0x02
    1a96:	80 83       	st	Z, r24
    1a98:	0e c0       	rjmp	.+28     	; 0x1ab6 <GPIO_SetPortDir+0x7a>
			break;
		case PORTB_ID:
			DDRB_REG = Dir;
    1a9a:	e7 e3       	ldi	r30, 0x37	; 55
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa0:	80 83       	st	Z, r24
    1aa2:	09 c0       	rjmp	.+18     	; 0x1ab6 <GPIO_SetPortDir+0x7a>
			break;
		case PORTC_ID:
			DDRC_REG = Dir;
    1aa4:	e4 e3       	ldi	r30, 0x34	; 52
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aaa:	80 83       	st	Z, r24
    1aac:	04 c0       	rjmp	.+8      	; 0x1ab6 <GPIO_SetPortDir+0x7a>
			break;
		case PORTD_ID:
			DDRD_REG = Dir;
    1aae:	e1 e3       	ldi	r30, 0x31	; 49
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab4:	80 83       	st	Z, r24
			break;
		}
	}
}
    1ab6:	0f 90       	pop	r0
    1ab8:	0f 90       	pop	r0
    1aba:	0f 90       	pop	r0
    1abc:	0f 90       	pop	r0
    1abe:	cf 91       	pop	r28
    1ac0:	df 91       	pop	r29
    1ac2:	08 95       	ret

00001ac4 <GPIO_ReadPort>:
 [Args]: PORTn_ID(n=A,B,C,D)
 [RUTURN]: uint8
 [NOTE]: if Number of PORTn >= 4 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
uint8 GPIO_ReadPort(uint8 PORTn)
{
    1ac4:	df 93       	push	r29
    1ac6:	cf 93       	push	r28
    1ac8:	00 d0       	rcall	.+0      	; 0x1aca <GPIO_ReadPort+0x6>
    1aca:	00 d0       	rcall	.+0      	; 0x1acc <GPIO_ReadPort+0x8>
    1acc:	cd b7       	in	r28, 0x3d	; 61
    1ace:	de b7       	in	r29, 0x3e	; 62
    1ad0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 port_value = LOGIC_LOW;
    1ad2:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(PORTn >= NUM_OF_PORTS)
    1ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad6:	84 30       	cpi	r24, 0x04	; 4
    1ad8:	90 f5       	brcc	.+100    	; 0x1b3e <GPIO_ReadPort+0x7a>
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		/* Read the port value as required */
		switch(PORTn)
    1ada:	8a 81       	ldd	r24, Y+2	; 0x02
    1adc:	28 2f       	mov	r18, r24
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	3c 83       	std	Y+4, r19	; 0x04
    1ae2:	2b 83       	std	Y+3, r18	; 0x03
    1ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae8:	81 30       	cpi	r24, 0x01	; 1
    1aea:	91 05       	cpc	r25, r1
    1aec:	d1 f0       	breq	.+52     	; 0x1b22 <GPIO_ReadPort+0x5e>
    1aee:	2b 81       	ldd	r18, Y+3	; 0x03
    1af0:	3c 81       	ldd	r19, Y+4	; 0x04
    1af2:	22 30       	cpi	r18, 0x02	; 2
    1af4:	31 05       	cpc	r19, r1
    1af6:	2c f4       	brge	.+10     	; 0x1b02 <GPIO_ReadPort+0x3e>
    1af8:	8b 81       	ldd	r24, Y+3	; 0x03
    1afa:	9c 81       	ldd	r25, Y+4	; 0x04
    1afc:	00 97       	sbiw	r24, 0x00	; 0
    1afe:	61 f0       	breq	.+24     	; 0x1b18 <GPIO_ReadPort+0x54>
    1b00:	1e c0       	rjmp	.+60     	; 0x1b3e <GPIO_ReadPort+0x7a>
    1b02:	2b 81       	ldd	r18, Y+3	; 0x03
    1b04:	3c 81       	ldd	r19, Y+4	; 0x04
    1b06:	22 30       	cpi	r18, 0x02	; 2
    1b08:	31 05       	cpc	r19, r1
    1b0a:	81 f0       	breq	.+32     	; 0x1b2c <GPIO_ReadPort+0x68>
    1b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b10:	83 30       	cpi	r24, 0x03	; 3
    1b12:	91 05       	cpc	r25, r1
    1b14:	81 f0       	breq	.+32     	; 0x1b36 <GPIO_ReadPort+0x72>
    1b16:	13 c0       	rjmp	.+38     	; 0x1b3e <GPIO_ReadPort+0x7a>
		{
		case PORTA_ID:
			port_value = PINA_REG;
    1b18:	e9 e3       	ldi	r30, 0x39	; 57
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	80 81       	ld	r24, Z
    1b1e:	89 83       	std	Y+1, r24	; 0x01
    1b20:	0e c0       	rjmp	.+28     	; 0x1b3e <GPIO_ReadPort+0x7a>
			break;
		case PORTB_ID:
			port_value = PINB_REG;
    1b22:	e6 e3       	ldi	r30, 0x36	; 54
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	89 83       	std	Y+1, r24	; 0x01
    1b2a:	09 c0       	rjmp	.+18     	; 0x1b3e <GPIO_ReadPort+0x7a>
			break;
		case PORTC_ID:
			port_value = PINC_REG;
    1b2c:	e3 e3       	ldi	r30, 0x33	; 51
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	89 83       	std	Y+1, r24	; 0x01
    1b34:	04 c0       	rjmp	.+8      	; 0x1b3e <GPIO_ReadPort+0x7a>
			break;
		case PORTD_ID:
			port_value = PIND_REG;
    1b36:	e0 e3       	ldi	r30, 0x30	; 48
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 81       	ld	r24, Z
    1b3c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return port_value;
    1b3e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b40:	0f 90       	pop	r0
    1b42:	0f 90       	pop	r0
    1b44:	0f 90       	pop	r0
    1b46:	0f 90       	pop	r0
    1b48:	cf 91       	pop	r28
    1b4a:	df 91       	pop	r29
    1b4c:	08 95       	ret

00001b4e <GPIO_WritePort>:
 [Args]: PORTn_ID(n=A,B,C,D) and PINn_ID(n =0...7) and Level (logic_low or logic_high)
 [RUTURN]: void
 [NOTE]: if Number of PORTn >= 4 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
void GPIO_WritePort(uint8 PORTn, uint8 value)
{
    1b4e:	df 93       	push	r29
    1b50:	cf 93       	push	r28
    1b52:	00 d0       	rcall	.+0      	; 0x1b54 <GPIO_WritePort+0x6>
    1b54:	00 d0       	rcall	.+0      	; 0x1b56 <GPIO_WritePort+0x8>
    1b56:	cd b7       	in	r28, 0x3d	; 61
    1b58:	de b7       	in	r29, 0x3e	; 62
    1b5a:	89 83       	std	Y+1, r24	; 0x01
    1b5c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(PORTn >= NUM_OF_PORTS)
    1b5e:	89 81       	ldd	r24, Y+1	; 0x01
    1b60:	84 30       	cpi	r24, 0x04	; 4
    1b62:	90 f5       	brcc	.+100    	; 0x1bc8 <GPIO_WritePort+0x7a>
	{
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		switch(PORTn)
    1b64:	89 81       	ldd	r24, Y+1	; 0x01
    1b66:	28 2f       	mov	r18, r24
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	3c 83       	std	Y+4, r19	; 0x04
    1b6c:	2b 83       	std	Y+3, r18	; 0x03
    1b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b70:	9c 81       	ldd	r25, Y+4	; 0x04
    1b72:	81 30       	cpi	r24, 0x01	; 1
    1b74:	91 05       	cpc	r25, r1
    1b76:	d1 f0       	breq	.+52     	; 0x1bac <GPIO_WritePort+0x5e>
    1b78:	2b 81       	ldd	r18, Y+3	; 0x03
    1b7a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b7c:	22 30       	cpi	r18, 0x02	; 2
    1b7e:	31 05       	cpc	r19, r1
    1b80:	2c f4       	brge	.+10     	; 0x1b8c <GPIO_WritePort+0x3e>
    1b82:	8b 81       	ldd	r24, Y+3	; 0x03
    1b84:	9c 81       	ldd	r25, Y+4	; 0x04
    1b86:	00 97       	sbiw	r24, 0x00	; 0
    1b88:	61 f0       	breq	.+24     	; 0x1ba2 <GPIO_WritePort+0x54>
    1b8a:	1e c0       	rjmp	.+60     	; 0x1bc8 <GPIO_WritePort+0x7a>
    1b8c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b8e:	3c 81       	ldd	r19, Y+4	; 0x04
    1b90:	22 30       	cpi	r18, 0x02	; 2
    1b92:	31 05       	cpc	r19, r1
    1b94:	81 f0       	breq	.+32     	; 0x1bb6 <GPIO_WritePort+0x68>
    1b96:	8b 81       	ldd	r24, Y+3	; 0x03
    1b98:	9c 81       	ldd	r25, Y+4	; 0x04
    1b9a:	83 30       	cpi	r24, 0x03	; 3
    1b9c:	91 05       	cpc	r25, r1
    1b9e:	81 f0       	breq	.+32     	; 0x1bc0 <GPIO_WritePort+0x72>
    1ba0:	13 c0       	rjmp	.+38     	; 0x1bc8 <GPIO_WritePort+0x7a>
		{
		case PORTA_ID:
			PORTA_REG = value;
    1ba2:	eb e3       	ldi	r30, 0x3B	; 59
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba8:	80 83       	st	Z, r24
    1baa:	0e c0       	rjmp	.+28     	; 0x1bc8 <GPIO_WritePort+0x7a>
			break;
		case PORTB_ID:
			PORTB_REG = value;
    1bac:	e8 e3       	ldi	r30, 0x38	; 56
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb2:	80 83       	st	Z, r24
    1bb4:	09 c0       	rjmp	.+18     	; 0x1bc8 <GPIO_WritePort+0x7a>
			break;
		case PORTC_ID:
			PORTC_REG = value;
    1bb6:	e5 e3       	ldi	r30, 0x35	; 53
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbc:	80 83       	st	Z, r24
    1bbe:	04 c0       	rjmp	.+8      	; 0x1bc8 <GPIO_WritePort+0x7a>
			break;
		case PORTD_ID:
			PORTD_REG = value;
    1bc0:	e2 e3       	ldi	r30, 0x32	; 50
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc6:	80 83       	st	Z, r24
			break;
		}
	}
}
    1bc8:	0f 90       	pop	r0
    1bca:	0f 90       	pop	r0
    1bcc:	0f 90       	pop	r0
    1bce:	0f 90       	pop	r0
    1bd0:	cf 91       	pop	r28
    1bd2:	df 91       	pop	r29
    1bd4:	08 95       	ret

00001bd6 <GPIO_FlipPort>:
 [Args]: PORTn_ID(n=A,B,C,D)
 [RUTURN]: void
 [NOTE]: if Number of PORTn >= 4 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
void GPIO_FlipPort(uint8 PORTn)
{
    1bd6:	df 93       	push	r29
    1bd8:	cf 93       	push	r28
    1bda:	00 d0       	rcall	.+0      	; 0x1bdc <GPIO_FlipPort+0x6>
    1bdc:	0f 92       	push	r0
    1bde:	cd b7       	in	r28, 0x3d	; 61
    1be0:	de b7       	in	r29, 0x3e	; 62
    1be2:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(PORTn >= NUM_OF_PORTS)
    1be4:	89 81       	ldd	r24, Y+1	; 0x01
    1be6:	84 30       	cpi	r24, 0x04	; 4
    1be8:	08 f0       	brcs	.+2      	; 0x1bec <GPIO_FlipPort+0x16>
    1bea:	3e c0       	rjmp	.+124    	; 0x1c68 <GPIO_FlipPort+0x92>
	{
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		switch(PORTn)
    1bec:	89 81       	ldd	r24, Y+1	; 0x01
    1bee:	28 2f       	mov	r18, r24
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	3b 83       	std	Y+3, r19	; 0x03
    1bf4:	2a 83       	std	Y+2, r18	; 0x02
    1bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf8:	9b 81       	ldd	r25, Y+3	; 0x03
    1bfa:	81 30       	cpi	r24, 0x01	; 1
    1bfc:	91 05       	cpc	r25, r1
    1bfe:	e9 f0       	breq	.+58     	; 0x1c3a <GPIO_FlipPort+0x64>
    1c00:	2a 81       	ldd	r18, Y+2	; 0x02
    1c02:	3b 81       	ldd	r19, Y+3	; 0x03
    1c04:	22 30       	cpi	r18, 0x02	; 2
    1c06:	31 05       	cpc	r19, r1
    1c08:	2c f4       	brge	.+10     	; 0x1c14 <GPIO_FlipPort+0x3e>
    1c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0c:	9b 81       	ldd	r25, Y+3	; 0x03
    1c0e:	00 97       	sbiw	r24, 0x00	; 0
    1c10:	61 f0       	breq	.+24     	; 0x1c2a <GPIO_FlipPort+0x54>
    1c12:	2a c0       	rjmp	.+84     	; 0x1c68 <GPIO_FlipPort+0x92>
    1c14:	2a 81       	ldd	r18, Y+2	; 0x02
    1c16:	3b 81       	ldd	r19, Y+3	; 0x03
    1c18:	22 30       	cpi	r18, 0x02	; 2
    1c1a:	31 05       	cpc	r19, r1
    1c1c:	b1 f0       	breq	.+44     	; 0x1c4a <GPIO_FlipPort+0x74>
    1c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c20:	9b 81       	ldd	r25, Y+3	; 0x03
    1c22:	83 30       	cpi	r24, 0x03	; 3
    1c24:	91 05       	cpc	r25, r1
    1c26:	c9 f0       	breq	.+50     	; 0x1c5a <GPIO_FlipPort+0x84>
    1c28:	1f c0       	rjmp	.+62     	; 0x1c68 <GPIO_FlipPort+0x92>
		{
		case PORTA_ID:
			PORTA_REG = ~PORTA_REG;
    1c2a:	ab e3       	ldi	r26, 0x3B	; 59
    1c2c:	b0 e0       	ldi	r27, 0x00	; 0
    1c2e:	eb e3       	ldi	r30, 0x3B	; 59
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	80 81       	ld	r24, Z
    1c34:	80 95       	com	r24
    1c36:	8c 93       	st	X, r24
    1c38:	17 c0       	rjmp	.+46     	; 0x1c68 <GPIO_FlipPort+0x92>
			break;
		case PORTB_ID:
			PORTB_REG = ~PORTB_REG;
    1c3a:	a8 e3       	ldi	r26, 0x38	; 56
    1c3c:	b0 e0       	ldi	r27, 0x00	; 0
    1c3e:	e8 e3       	ldi	r30, 0x38	; 56
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	80 95       	com	r24
    1c46:	8c 93       	st	X, r24
    1c48:	0f c0       	rjmp	.+30     	; 0x1c68 <GPIO_FlipPort+0x92>
			break;
		case PORTC_ID:
			PORTC_REG = ~PORTC_REG;
    1c4a:	a5 e3       	ldi	r26, 0x35	; 53
    1c4c:	b0 e0       	ldi	r27, 0x00	; 0
    1c4e:	e5 e3       	ldi	r30, 0x35	; 53
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	80 95       	com	r24
    1c56:	8c 93       	st	X, r24
    1c58:	07 c0       	rjmp	.+14     	; 0x1c68 <GPIO_FlipPort+0x92>
			break;
		case PORTD_ID:
			PORTD_REG = ~PORTD_REG;
    1c5a:	a2 e3       	ldi	r26, 0x32	; 50
    1c5c:	b0 e0       	ldi	r27, 0x00	; 0
    1c5e:	e2 e3       	ldi	r30, 0x32	; 50
    1c60:	f0 e0       	ldi	r31, 0x00	; 0
    1c62:	80 81       	ld	r24, Z
    1c64:	80 95       	com	r24
    1c66:	8c 93       	st	X, r24
			break;
		}
	}
}
    1c68:	0f 90       	pop	r0
    1c6a:	0f 90       	pop	r0
    1c6c:	0f 90       	pop	r0
    1c6e:	cf 91       	pop	r28
    1c70:	df 91       	pop	r29
    1c72:	08 95       	ret

00001c74 <GPIO_WriteLowNibble>:
 [Args]: PORTn_ID(n=A,B,C,D) and value
 [RUTURN]: void
 [NOTE]: if Number of PORTn >= 4 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
void GPIO_WriteLowNibble(uint8 PORTn, uint8 value)
{
    1c74:	df 93       	push	r29
    1c76:	cf 93       	push	r28
    1c78:	00 d0       	rcall	.+0      	; 0x1c7a <GPIO_WriteLowNibble+0x6>
    1c7a:	00 d0       	rcall	.+0      	; 0x1c7c <GPIO_WriteLowNibble+0x8>
    1c7c:	cd b7       	in	r28, 0x3d	; 61
    1c7e:	de b7       	in	r29, 0x3e	; 62
    1c80:	89 83       	std	Y+1, r24	; 0x01
    1c82:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(PORTn >= NUM_OF_PORTS)
    1c84:	89 81       	ldd	r24, Y+1	; 0x01
    1c86:	84 30       	cpi	r24, 0x04	; 4
    1c88:	08 f0       	brcs	.+2      	; 0x1c8c <GPIO_WriteLowNibble+0x18>
    1c8a:	61 c0       	rjmp	.+194    	; 0x1d4e <GPIO_WriteLowNibble+0xda>
	{
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		value &= 0x0F;
    1c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8e:	8f 70       	andi	r24, 0x0F	; 15
    1c90:	8a 83       	std	Y+2, r24	; 0x02

		switch(PORTn)
    1c92:	89 81       	ldd	r24, Y+1	; 0x01
    1c94:	28 2f       	mov	r18, r24
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	3c 83       	std	Y+4, r19	; 0x04
    1c9a:	2b 83       	std	Y+3, r18	; 0x03
    1c9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca0:	81 30       	cpi	r24, 0x01	; 1
    1ca2:	91 05       	cpc	r25, r1
    1ca4:	29 f1       	breq	.+74     	; 0x1cf0 <GPIO_WriteLowNibble+0x7c>
    1ca6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ca8:	3c 81       	ldd	r19, Y+4	; 0x04
    1caa:	22 30       	cpi	r18, 0x02	; 2
    1cac:	31 05       	cpc	r19, r1
    1cae:	2c f4       	brge	.+10     	; 0x1cba <GPIO_WriteLowNibble+0x46>
    1cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb4:	00 97       	sbiw	r24, 0x00	; 0
    1cb6:	61 f0       	breq	.+24     	; 0x1cd0 <GPIO_WriteLowNibble+0x5c>
    1cb8:	4a c0       	rjmp	.+148    	; 0x1d4e <GPIO_WriteLowNibble+0xda>
    1cba:	2b 81       	ldd	r18, Y+3	; 0x03
    1cbc:	3c 81       	ldd	r19, Y+4	; 0x04
    1cbe:	22 30       	cpi	r18, 0x02	; 2
    1cc0:	31 05       	cpc	r19, r1
    1cc2:	31 f1       	breq	.+76     	; 0x1d10 <GPIO_WriteLowNibble+0x9c>
    1cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc8:	83 30       	cpi	r24, 0x03	; 3
    1cca:	91 05       	cpc	r25, r1
    1ccc:	89 f1       	breq	.+98     	; 0x1d30 <GPIO_WriteLowNibble+0xbc>
    1cce:	3f c0       	rjmp	.+126    	; 0x1d4e <GPIO_WriteLowNibble+0xda>
		{
		case PORTA_ID:
			PORTA_REG &= 0xF0;
    1cd0:	ab e3       	ldi	r26, 0x3B	; 59
    1cd2:	b0 e0       	ldi	r27, 0x00	; 0
    1cd4:	eb e3       	ldi	r30, 0x3B	; 59
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 81       	ld	r24, Z
    1cda:	80 7f       	andi	r24, 0xF0	; 240
    1cdc:	8c 93       	st	X, r24
			PORTA_REG |= value;
    1cde:	ab e3       	ldi	r26, 0x3B	; 59
    1ce0:	b0 e0       	ldi	r27, 0x00	; 0
    1ce2:	eb e3       	ldi	r30, 0x3B	; 59
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	90 81       	ld	r25, Z
    1ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cea:	89 2b       	or	r24, r25
    1cec:	8c 93       	st	X, r24
    1cee:	2f c0       	rjmp	.+94     	; 0x1d4e <GPIO_WriteLowNibble+0xda>

			break;
		case PORTB_ID:
			PORTB_REG &= 0xF0;
    1cf0:	a8 e3       	ldi	r26, 0x38	; 56
    1cf2:	b0 e0       	ldi	r27, 0x00	; 0
    1cf4:	e8 e3       	ldi	r30, 0x38	; 56
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	80 81       	ld	r24, Z
    1cfa:	80 7f       	andi	r24, 0xF0	; 240
    1cfc:	8c 93       	st	X, r24
			PORTB_REG |= value;
    1cfe:	a8 e3       	ldi	r26, 0x38	; 56
    1d00:	b0 e0       	ldi	r27, 0x00	; 0
    1d02:	e8 e3       	ldi	r30, 0x38	; 56
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	90 81       	ld	r25, Z
    1d08:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0a:	89 2b       	or	r24, r25
    1d0c:	8c 93       	st	X, r24
    1d0e:	1f c0       	rjmp	.+62     	; 0x1d4e <GPIO_WriteLowNibble+0xda>
			break;
		case PORTC_ID:
			PORTC_REG &= 0xF0;
    1d10:	a5 e3       	ldi	r26, 0x35	; 53
    1d12:	b0 e0       	ldi	r27, 0x00	; 0
    1d14:	e5 e3       	ldi	r30, 0x35	; 53
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	80 81       	ld	r24, Z
    1d1a:	80 7f       	andi	r24, 0xF0	; 240
    1d1c:	8c 93       	st	X, r24
			PORTC_REG |= value;
    1d1e:	a5 e3       	ldi	r26, 0x35	; 53
    1d20:	b0 e0       	ldi	r27, 0x00	; 0
    1d22:	e5 e3       	ldi	r30, 0x35	; 53
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	90 81       	ld	r25, Z
    1d28:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2a:	89 2b       	or	r24, r25
    1d2c:	8c 93       	st	X, r24
    1d2e:	0f c0       	rjmp	.+30     	; 0x1d4e <GPIO_WriteLowNibble+0xda>
			break;
		case PORTD_ID:
			PORTD_REG &= 0xF0;
    1d30:	a2 e3       	ldi	r26, 0x32	; 50
    1d32:	b0 e0       	ldi	r27, 0x00	; 0
    1d34:	e2 e3       	ldi	r30, 0x32	; 50
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	80 81       	ld	r24, Z
    1d3a:	80 7f       	andi	r24, 0xF0	; 240
    1d3c:	8c 93       	st	X, r24
			PORTD_REG |= value;
    1d3e:	a2 e3       	ldi	r26, 0x32	; 50
    1d40:	b0 e0       	ldi	r27, 0x00	; 0
    1d42:	e2 e3       	ldi	r30, 0x32	; 50
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	90 81       	ld	r25, Z
    1d48:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4a:	89 2b       	or	r24, r25
    1d4c:	8c 93       	st	X, r24
			break;
		}
	}
}
    1d4e:	0f 90       	pop	r0
    1d50:	0f 90       	pop	r0
    1d52:	0f 90       	pop	r0
    1d54:	0f 90       	pop	r0
    1d56:	cf 91       	pop	r28
    1d58:	df 91       	pop	r29
    1d5a:	08 95       	ret

00001d5c <GPIO_WriteHighNibble>:
 [Args]: PORTn_ID(n=A,B,C,D) and value
 [RUTURN]: void
 [NOTE]: if Number of PORTn >= 4 the function will Do "nothing"
 ---------------------------------------------------------------------------------------*/
void GPIO_WriteHighNibble(uint8 PORTn, uint8 value)
{
    1d5c:	df 93       	push	r29
    1d5e:	cf 93       	push	r28
    1d60:	00 d0       	rcall	.+0      	; 0x1d62 <GPIO_WriteHighNibble+0x6>
    1d62:	00 d0       	rcall	.+0      	; 0x1d64 <GPIO_WriteHighNibble+0x8>
    1d64:	cd b7       	in	r28, 0x3d	; 61
    1d66:	de b7       	in	r29, 0x3e	; 62
    1d68:	89 83       	std	Y+1, r24	; 0x01
    1d6a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(PORTn >= NUM_OF_PORTS)
    1d6c:	89 81       	ldd	r24, Y+1	; 0x01
    1d6e:	84 30       	cpi	r24, 0x04	; 4
    1d70:	08 f0       	brcs	.+2      	; 0x1d74 <GPIO_WriteHighNibble+0x18>
    1d72:	61 c0       	rjmp	.+194    	; 0x1e36 <GPIO_WriteHighNibble+0xda>
	{
		/* WILL DO NOTHING Just Prevent The Else To Implement */
	}
	else
	{
		value &= 0xF0;
    1d74:	8a 81       	ldd	r24, Y+2	; 0x02
    1d76:	80 7f       	andi	r24, 0xF0	; 240
    1d78:	8a 83       	std	Y+2, r24	; 0x02

		switch(PORTn)
    1d7a:	89 81       	ldd	r24, Y+1	; 0x01
    1d7c:	28 2f       	mov	r18, r24
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	3c 83       	std	Y+4, r19	; 0x04
    1d82:	2b 83       	std	Y+3, r18	; 0x03
    1d84:	8b 81       	ldd	r24, Y+3	; 0x03
    1d86:	9c 81       	ldd	r25, Y+4	; 0x04
    1d88:	81 30       	cpi	r24, 0x01	; 1
    1d8a:	91 05       	cpc	r25, r1
    1d8c:	29 f1       	breq	.+74     	; 0x1dd8 <GPIO_WriteHighNibble+0x7c>
    1d8e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d90:	3c 81       	ldd	r19, Y+4	; 0x04
    1d92:	22 30       	cpi	r18, 0x02	; 2
    1d94:	31 05       	cpc	r19, r1
    1d96:	2c f4       	brge	.+10     	; 0x1da2 <GPIO_WriteHighNibble+0x46>
    1d98:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d9c:	00 97       	sbiw	r24, 0x00	; 0
    1d9e:	61 f0       	breq	.+24     	; 0x1db8 <GPIO_WriteHighNibble+0x5c>
    1da0:	4a c0       	rjmp	.+148    	; 0x1e36 <GPIO_WriteHighNibble+0xda>
    1da2:	2b 81       	ldd	r18, Y+3	; 0x03
    1da4:	3c 81       	ldd	r19, Y+4	; 0x04
    1da6:	22 30       	cpi	r18, 0x02	; 2
    1da8:	31 05       	cpc	r19, r1
    1daa:	31 f1       	breq	.+76     	; 0x1df8 <GPIO_WriteHighNibble+0x9c>
    1dac:	8b 81       	ldd	r24, Y+3	; 0x03
    1dae:	9c 81       	ldd	r25, Y+4	; 0x04
    1db0:	83 30       	cpi	r24, 0x03	; 3
    1db2:	91 05       	cpc	r25, r1
    1db4:	89 f1       	breq	.+98     	; 0x1e18 <GPIO_WriteHighNibble+0xbc>
    1db6:	3f c0       	rjmp	.+126    	; 0x1e36 <GPIO_WriteHighNibble+0xda>
		{
		case PORTA_ID:
			PORTA_REG &= 0x0F;
    1db8:	ab e3       	ldi	r26, 0x3B	; 59
    1dba:	b0 e0       	ldi	r27, 0x00	; 0
    1dbc:	eb e3       	ldi	r30, 0x3B	; 59
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	80 81       	ld	r24, Z
    1dc2:	8f 70       	andi	r24, 0x0F	; 15
    1dc4:	8c 93       	st	X, r24
			PORTA_REG |= value;
    1dc6:	ab e3       	ldi	r26, 0x3B	; 59
    1dc8:	b0 e0       	ldi	r27, 0x00	; 0
    1dca:	eb e3       	ldi	r30, 0x3B	; 59
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	90 81       	ld	r25, Z
    1dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd2:	89 2b       	or	r24, r25
    1dd4:	8c 93       	st	X, r24
    1dd6:	2f c0       	rjmp	.+94     	; 0x1e36 <GPIO_WriteHighNibble+0xda>

			break;
		case PORTB_ID:
			PORTB_REG &= 0x0F;
    1dd8:	a8 e3       	ldi	r26, 0x38	; 56
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	e8 e3       	ldi	r30, 0x38	; 56
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	8f 70       	andi	r24, 0x0F	; 15
    1de4:	8c 93       	st	X, r24
			PORTB_REG |= value;
    1de6:	a8 e3       	ldi	r26, 0x38	; 56
    1de8:	b0 e0       	ldi	r27, 0x00	; 0
    1dea:	e8 e3       	ldi	r30, 0x38	; 56
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	90 81       	ld	r25, Z
    1df0:	8a 81       	ldd	r24, Y+2	; 0x02
    1df2:	89 2b       	or	r24, r25
    1df4:	8c 93       	st	X, r24
    1df6:	1f c0       	rjmp	.+62     	; 0x1e36 <GPIO_WriteHighNibble+0xda>
			break;
		case PORTC_ID:
			PORTC_REG &= 0x0F;
    1df8:	a5 e3       	ldi	r26, 0x35	; 53
    1dfa:	b0 e0       	ldi	r27, 0x00	; 0
    1dfc:	e5 e3       	ldi	r30, 0x35	; 53
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	80 81       	ld	r24, Z
    1e02:	8f 70       	andi	r24, 0x0F	; 15
    1e04:	8c 93       	st	X, r24
			PORTC_REG |= value;
    1e06:	a5 e3       	ldi	r26, 0x35	; 53
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	e5 e3       	ldi	r30, 0x35	; 53
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	90 81       	ld	r25, Z
    1e10:	8a 81       	ldd	r24, Y+2	; 0x02
    1e12:	89 2b       	or	r24, r25
    1e14:	8c 93       	st	X, r24
    1e16:	0f c0       	rjmp	.+30     	; 0x1e36 <GPIO_WriteHighNibble+0xda>
			break;
		case PORTD_ID:
			PORTD_REG &= 0x0F;
    1e18:	a2 e3       	ldi	r26, 0x32	; 50
    1e1a:	b0 e0       	ldi	r27, 0x00	; 0
    1e1c:	e2 e3       	ldi	r30, 0x32	; 50
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	80 81       	ld	r24, Z
    1e22:	8f 70       	andi	r24, 0x0F	; 15
    1e24:	8c 93       	st	X, r24
			PORTD_REG |= value;
    1e26:	a2 e3       	ldi	r26, 0x32	; 50
    1e28:	b0 e0       	ldi	r27, 0x00	; 0
    1e2a:	e2 e3       	ldi	r30, 0x32	; 50
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	90 81       	ld	r25, Z
    1e30:	8a 81       	ldd	r24, Y+2	; 0x02
    1e32:	89 2b       	or	r24, r25
    1e34:	8c 93       	st	X, r24
			break;
		}
	}
}
    1e36:	0f 90       	pop	r0
    1e38:	0f 90       	pop	r0
    1e3a:	0f 90       	pop	r0
    1e3c:	0f 90       	pop	r0
    1e3e:	cf 91       	pop	r28
    1e40:	df 91       	pop	r29
    1e42:	08 95       	ret

00001e44 <__vector_1>:

/*
 * [Description]: Here The ISR's specific For EX_INT0
 */
ISR(INT0_vect)
{
    1e44:	1f 92       	push	r1
    1e46:	0f 92       	push	r0
    1e48:	0f b6       	in	r0, 0x3f	; 63
    1e4a:	0f 92       	push	r0
    1e4c:	11 24       	eor	r1, r1
    1e4e:	2f 93       	push	r18
    1e50:	3f 93       	push	r19
    1e52:	4f 93       	push	r20
    1e54:	5f 93       	push	r21
    1e56:	6f 93       	push	r22
    1e58:	7f 93       	push	r23
    1e5a:	8f 93       	push	r24
    1e5c:	9f 93       	push	r25
    1e5e:	af 93       	push	r26
    1e60:	bf 93       	push	r27
    1e62:	ef 93       	push	r30
    1e64:	ff 93       	push	r31
    1e66:	df 93       	push	r29
    1e68:	cf 93       	push	r28
    1e6a:	cd b7       	in	r28, 0x3d	; 61
    1e6c:	de b7       	in	r29, 0x3e	; 62
	if(g_Ptr_To_Fun_INT0 != NULL_PTR)
    1e6e:	80 91 6f 01 	lds	r24, 0x016F
    1e72:	90 91 70 01 	lds	r25, 0x0170
    1e76:	00 97       	sbiw	r24, 0x00	; 0
    1e78:	29 f0       	breq	.+10     	; 0x1e84 <__vector_1+0x40>
	{
		(*g_Ptr_To_Fun_INT0)();
    1e7a:	e0 91 6f 01 	lds	r30, 0x016F
    1e7e:	f0 91 70 01 	lds	r31, 0x0170
    1e82:	09 95       	icall
	}
}
    1e84:	cf 91       	pop	r28
    1e86:	df 91       	pop	r29
    1e88:	ff 91       	pop	r31
    1e8a:	ef 91       	pop	r30
    1e8c:	bf 91       	pop	r27
    1e8e:	af 91       	pop	r26
    1e90:	9f 91       	pop	r25
    1e92:	8f 91       	pop	r24
    1e94:	7f 91       	pop	r23
    1e96:	6f 91       	pop	r22
    1e98:	5f 91       	pop	r21
    1e9a:	4f 91       	pop	r20
    1e9c:	3f 91       	pop	r19
    1e9e:	2f 91       	pop	r18
    1ea0:	0f 90       	pop	r0
    1ea2:	0f be       	out	0x3f, r0	; 63
    1ea4:	0f 90       	pop	r0
    1ea6:	1f 90       	pop	r1
    1ea8:	18 95       	reti

00001eaa <__vector_2>:

/*
 * [Description]: Here The ISR's specific For EX_INT1
 */
ISR(INT1_vect)
{
    1eaa:	1f 92       	push	r1
    1eac:	0f 92       	push	r0
    1eae:	0f b6       	in	r0, 0x3f	; 63
    1eb0:	0f 92       	push	r0
    1eb2:	11 24       	eor	r1, r1
    1eb4:	2f 93       	push	r18
    1eb6:	3f 93       	push	r19
    1eb8:	4f 93       	push	r20
    1eba:	5f 93       	push	r21
    1ebc:	6f 93       	push	r22
    1ebe:	7f 93       	push	r23
    1ec0:	8f 93       	push	r24
    1ec2:	9f 93       	push	r25
    1ec4:	af 93       	push	r26
    1ec6:	bf 93       	push	r27
    1ec8:	ef 93       	push	r30
    1eca:	ff 93       	push	r31
    1ecc:	df 93       	push	r29
    1ece:	cf 93       	push	r28
    1ed0:	cd b7       	in	r28, 0x3d	; 61
    1ed2:	de b7       	in	r29, 0x3e	; 62
	if(g_Ptr_To_Fun_INT1 != NULL_PTR)
    1ed4:	80 91 71 01 	lds	r24, 0x0171
    1ed8:	90 91 72 01 	lds	r25, 0x0172
    1edc:	00 97       	sbiw	r24, 0x00	; 0
    1ede:	29 f0       	breq	.+10     	; 0x1eea <__vector_2+0x40>
	{
		(*g_Ptr_To_Fun_INT1)();
    1ee0:	e0 91 71 01 	lds	r30, 0x0171
    1ee4:	f0 91 72 01 	lds	r31, 0x0172
    1ee8:	09 95       	icall
	}
}
    1eea:	cf 91       	pop	r28
    1eec:	df 91       	pop	r29
    1eee:	ff 91       	pop	r31
    1ef0:	ef 91       	pop	r30
    1ef2:	bf 91       	pop	r27
    1ef4:	af 91       	pop	r26
    1ef6:	9f 91       	pop	r25
    1ef8:	8f 91       	pop	r24
    1efa:	7f 91       	pop	r23
    1efc:	6f 91       	pop	r22
    1efe:	5f 91       	pop	r21
    1f00:	4f 91       	pop	r20
    1f02:	3f 91       	pop	r19
    1f04:	2f 91       	pop	r18
    1f06:	0f 90       	pop	r0
    1f08:	0f be       	out	0x3f, r0	; 63
    1f0a:	0f 90       	pop	r0
    1f0c:	1f 90       	pop	r1
    1f0e:	18 95       	reti

00001f10 <__vector_3>:

/*
 * [Description]: Here The ISR's specific For EX_INT2
 */
ISR(INT2_vect)
{
    1f10:	1f 92       	push	r1
    1f12:	0f 92       	push	r0
    1f14:	0f b6       	in	r0, 0x3f	; 63
    1f16:	0f 92       	push	r0
    1f18:	11 24       	eor	r1, r1
    1f1a:	2f 93       	push	r18
    1f1c:	3f 93       	push	r19
    1f1e:	4f 93       	push	r20
    1f20:	5f 93       	push	r21
    1f22:	6f 93       	push	r22
    1f24:	7f 93       	push	r23
    1f26:	8f 93       	push	r24
    1f28:	9f 93       	push	r25
    1f2a:	af 93       	push	r26
    1f2c:	bf 93       	push	r27
    1f2e:	ef 93       	push	r30
    1f30:	ff 93       	push	r31
    1f32:	df 93       	push	r29
    1f34:	cf 93       	push	r28
    1f36:	cd b7       	in	r28, 0x3d	; 61
    1f38:	de b7       	in	r29, 0x3e	; 62
	if(g_Ptr_To_Fun_INT2 != NULL_PTR)
    1f3a:	80 91 73 01 	lds	r24, 0x0173
    1f3e:	90 91 74 01 	lds	r25, 0x0174
    1f42:	00 97       	sbiw	r24, 0x00	; 0
    1f44:	29 f0       	breq	.+10     	; 0x1f50 <__vector_3+0x40>
	{
		(*g_Ptr_To_Fun_INT2)();
    1f46:	e0 91 73 01 	lds	r30, 0x0173
    1f4a:	f0 91 74 01 	lds	r31, 0x0174
    1f4e:	09 95       	icall
	}
}
    1f50:	cf 91       	pop	r28
    1f52:	df 91       	pop	r29
    1f54:	ff 91       	pop	r31
    1f56:	ef 91       	pop	r30
    1f58:	bf 91       	pop	r27
    1f5a:	af 91       	pop	r26
    1f5c:	9f 91       	pop	r25
    1f5e:	8f 91       	pop	r24
    1f60:	7f 91       	pop	r23
    1f62:	6f 91       	pop	r22
    1f64:	5f 91       	pop	r21
    1f66:	4f 91       	pop	r20
    1f68:	3f 91       	pop	r19
    1f6a:	2f 91       	pop	r18
    1f6c:	0f 90       	pop	r0
    1f6e:	0f be       	out	0x3f, r0	; 63
    1f70:	0f 90       	pop	r0
    1f72:	1f 90       	pop	r1
    1f74:	18 95       	reti

00001f76 <Ex_INT_Init>:
 *                  The same time from Configuration of External interrupt .
 * [Args]  : void
 * [RUTURN]: Void
 */
void Ex_INT_Init(void)
{
    1f76:	df 93       	push	r29
    1f78:	cf 93       	push	r28
    1f7a:	cd b7       	in	r28, 0x3d	; 61
    1f7c:	de b7       	in	r29, 0x3e	; 62
#if EX_INT0 == ENABLE
	/* Enable External Interrupt 0 */
	SET_BIT(GICR_REG,GICR_INT0);
    1f7e:	ab e5       	ldi	r26, 0x5B	; 91
    1f80:	b0 e0       	ldi	r27, 0x00	; 0
    1f82:	eb e5       	ldi	r30, 0x5B	; 91
    1f84:	f0 e0       	ldi	r31, 0x00	; 0
    1f86:	80 81       	ld	r24, Z
    1f88:	80 64       	ori	r24, 0x40	; 64
    1f8a:	8c 93       	st	X, r24
	GPIO_SetPinDir(EX_INT0_PORT, EX_INT0_PIN, pin_input);
    1f8c:	83 e0       	ldi	r24, 0x03	; 3
    1f8e:	62 e0       	ldi	r22, 0x02	; 2
    1f90:	40 e0       	ldi	r20, 0x00	; 0
    1f92:	0e 94 28 0a 	call	0x1450	; 0x1450 <GPIO_SetPinDir>
	MCUCR_REG &= INT0_SENSE_CLR_MASK;
#elif INT0_SENSE_SELECTOR == INT0_SENSE_ANY_LOGICAL_CHANGE_MASK
	MCUCR_REG &= INT0_SENSE_CLR_MASK;
	MCUCR_REG |= INT0_SENSE_ANY_LOGICAL_CHANGE_MASK;
#elif INT0_SENSE_SELECTOR == INT0_SENSE_FALLING_EDGE_MASK
	MCUCR_REG &= INT0_SENSE_CLR_MASK;
    1f96:	a5 e5       	ldi	r26, 0x55	; 85
    1f98:	b0 e0       	ldi	r27, 0x00	; 0
    1f9a:	e5 e5       	ldi	r30, 0x55	; 85
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	80 81       	ld	r24, Z
    1fa0:	8c 7f       	andi	r24, 0xFC	; 252
    1fa2:	8c 93       	st	X, r24
	MCUCR_REG |= INT0_SENSE_FALLING_EDGE_MASK;
    1fa4:	a5 e5       	ldi	r26, 0x55	; 85
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	e5 e5       	ldi	r30, 0x55	; 85
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	80 81       	ld	r24, Z
    1fae:	82 60       	ori	r24, 0x02	; 2
    1fb0:	8c 93       	st	X, r24
#endif
#endif

#if EX_INT1 == ENABLE
	/* Enable External Interrupt 1 */
	SET_BIT(GICR_REG,GICR_INT1);
    1fb2:	ab e5       	ldi	r26, 0x5B	; 91
    1fb4:	b0 e0       	ldi	r27, 0x00	; 0
    1fb6:	eb e5       	ldi	r30, 0x5B	; 91
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	80 81       	ld	r24, Z
    1fbc:	80 68       	ori	r24, 0x80	; 128
    1fbe:	8c 93       	st	X, r24
	GPIO_SetPinDir(EX_INT1_PORT, EX_INT1_PIN, pin_input);
    1fc0:	83 e0       	ldi	r24, 0x03	; 3
    1fc2:	63 e0       	ldi	r22, 0x03	; 3
    1fc4:	40 e0       	ldi	r20, 0x00	; 0
    1fc6:	0e 94 28 0a 	call	0x1450	; 0x1450 <GPIO_SetPinDir>
	MCUCR_REG |= INT1_SENSE_ANY_LOGICAL_CHANGE_MASK;
#elif INT1_SENSE_SELECTOR == INT1_SENSE_FALLING_EDGE_MASK
	MCUCR_REG &= INT1_SENSE_CLR_MASK;
	MCUCR_REG |= INT1_SENSE_FALLING_EDGE_MASK;
#elif INT1_SENSE_SELECTOR == INT1_SENSE_RISING_EDGE_MASK
	MCUCR_REG &= INT1_SENSE_CLR_MASK;
    1fca:	a5 e5       	ldi	r26, 0x55	; 85
    1fcc:	b0 e0       	ldi	r27, 0x00	; 0
    1fce:	e5 e5       	ldi	r30, 0x55	; 85
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	80 81       	ld	r24, Z
    1fd4:	83 7f       	andi	r24, 0xF3	; 243
    1fd6:	8c 93       	st	X, r24
	MCUCR_REG |= INT1_SENSE_RISING_EDGE_MASK;
    1fd8:	a5 e5       	ldi	r26, 0x55	; 85
    1fda:	b0 e0       	ldi	r27, 0x00	; 0
    1fdc:	e5 e5       	ldi	r30, 0x55	; 85
    1fde:	f0 e0       	ldi	r31, 0x00	; 0
    1fe0:	80 81       	ld	r24, Z
    1fe2:	8c 60       	ori	r24, 0x0C	; 12
    1fe4:	8c 93       	st	X, r24
#endif
#endif

#if EX_INT2 == ENABLE
	/* Enable External Interrupt 2 */
	SET_BIT(GICR_REG,GICR_INT2);
    1fe6:	ab e5       	ldi	r26, 0x5B	; 91
    1fe8:	b0 e0       	ldi	r27, 0x00	; 0
    1fea:	eb e5       	ldi	r30, 0x5B	; 91
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	80 81       	ld	r24, Z
    1ff0:	80 62       	ori	r24, 0x20	; 32
    1ff2:	8c 93       	st	X, r24
	GPIO_SetPinDir(EX_INT2_PORT, EX_INT2_PIN, pin_input);
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	62 e0       	ldi	r22, 0x02	; 2
    1ff8:	40 e0       	ldi	r20, 0x00	; 0
    1ffa:	0e 94 28 0a 	call	0x1450	; 0x1450 <GPIO_SetPinDir>
#if INT2_SENSE_SELECTOR == INT2_SENSE_FALLING_EDGE_MASK
	MCUCSR_REG &= INT2_SENSE_CLR_MASK;
    1ffe:	a4 e5       	ldi	r26, 0x54	; 84
    2000:	b0 e0       	ldi	r27, 0x00	; 0
    2002:	e4 e5       	ldi	r30, 0x54	; 84
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 81       	ld	r24, Z
    2008:	8f 7b       	andi	r24, 0xBF	; 191
    200a:	8c 93       	st	X, r24
#elif INT2_SENSE_SELECTOR == INT2_SENSE_RISING_EDGE_MASK
	MCUCSR_REG &= INT2_SENSE_CLR_MASK;
	MCUCSR_REG |= INT2_SENSE_RISING_EDGE_MASK;
#endif
#endif
}
    200c:	cf 91       	pop	r28
    200e:	df 91       	pop	r29
    2010:	08 95       	ret

00002012 <Ex_INT0_SetCallBack>:
 *                  MCAL layer by interrupt called callback function.
 * [Args]  : Pointer To Function take void and return void
 * [RUTURN]: Void
 */
void Ex_INT0_SetCallBack(void (*ptr_To_function)(void))
{
    2012:	df 93       	push	r29
    2014:	cf 93       	push	r28
    2016:	00 d0       	rcall	.+0      	; 0x2018 <Ex_INT0_SetCallBack+0x6>
    2018:	cd b7       	in	r28, 0x3d	; 61
    201a:	de b7       	in	r29, 0x3e	; 62
    201c:	9a 83       	std	Y+2, r25	; 0x02
    201e:	89 83       	std	Y+1, r24	; 0x01
	g_Ptr_To_Fun_INT0 = (volatile void *)ptr_To_function;
    2020:	89 81       	ldd	r24, Y+1	; 0x01
    2022:	9a 81       	ldd	r25, Y+2	; 0x02
    2024:	90 93 70 01 	sts	0x0170, r25
    2028:	80 93 6f 01 	sts	0x016F, r24
}
    202c:	0f 90       	pop	r0
    202e:	0f 90       	pop	r0
    2030:	cf 91       	pop	r28
    2032:	df 91       	pop	r29
    2034:	08 95       	ret

00002036 <Ex_INT1_SetCallBack>:

void Ex_INT1_SetCallBack(void (*ptr_To_function)(void))
{
    2036:	df 93       	push	r29
    2038:	cf 93       	push	r28
    203a:	00 d0       	rcall	.+0      	; 0x203c <Ex_INT1_SetCallBack+0x6>
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
    2040:	9a 83       	std	Y+2, r25	; 0x02
    2042:	89 83       	std	Y+1, r24	; 0x01
	g_Ptr_To_Fun_INT1 = (volatile void *)ptr_To_function;
    2044:	89 81       	ldd	r24, Y+1	; 0x01
    2046:	9a 81       	ldd	r25, Y+2	; 0x02
    2048:	90 93 72 01 	sts	0x0172, r25
    204c:	80 93 71 01 	sts	0x0171, r24
}
    2050:	0f 90       	pop	r0
    2052:	0f 90       	pop	r0
    2054:	cf 91       	pop	r28
    2056:	df 91       	pop	r29
    2058:	08 95       	ret

0000205a <Ex_INT2_SetCallBack>:
void Ex_INT2_SetCallBack(void (*ptr_To_function)(void))
{
    205a:	df 93       	push	r29
    205c:	cf 93       	push	r28
    205e:	00 d0       	rcall	.+0      	; 0x2060 <Ex_INT2_SetCallBack+0x6>
    2060:	cd b7       	in	r28, 0x3d	; 61
    2062:	de b7       	in	r29, 0x3e	; 62
    2064:	9a 83       	std	Y+2, r25	; 0x02
    2066:	89 83       	std	Y+1, r24	; 0x01
	g_Ptr_To_Fun_INT2 = (volatile void *)ptr_To_function;
    2068:	89 81       	ldd	r24, Y+1	; 0x01
    206a:	9a 81       	ldd	r25, Y+2	; 0x02
    206c:	90 93 74 01 	sts	0x0174, r25
    2070:	80 93 73 01 	sts	0x0173, r24
}
    2074:	0f 90       	pop	r0
    2076:	0f 90       	pop	r0
    2078:	cf 91       	pop	r28
    207a:	df 91       	pop	r29
    207c:	08 95       	ret

0000207e <sevenSegmentInit>:
 [DISCRIPTION]:	This function is responsible to Initialized the 7-Segment pins.
 [Args]: void
 [RUTURN]: EN_7Segment_Error_t
 ---------------------------------------------------------------------------------------*/
EN_7Segment_Error_t sevenSegmentInit(void)
{
    207e:	df 93       	push	r29
    2080:	cf 93       	push	r28
    2082:	cd b7       	in	r28, 0x3d	; 61
    2084:	de b7       	in	r29, 0x3e	; 62

#elif (HARDWARE_BCD == ENABLE)
#if (MULTIPLEXED_SEVEN_SEGMENTS == ENABLE)
	//6 pins for display Specific 7segment from 6 (7-segments).
	//I use 6*1 7segment so i set the direction for 7 pins for it.
	GPIO_SetPinDir(D_PORT, D1_Pin, pin_output);
    2086:	80 e0       	ldi	r24, 0x00	; 0
    2088:	60 e0       	ldi	r22, 0x00	; 0
    208a:	41 e0       	ldi	r20, 0x01	; 1
    208c:	0e 94 28 0a 	call	0x1450	; 0x1450 <GPIO_SetPinDir>
	GPIO_SetPinDir(D_PORT, D2_Pin, pin_output);
    2090:	80 e0       	ldi	r24, 0x00	; 0
    2092:	61 e0       	ldi	r22, 0x01	; 1
    2094:	41 e0       	ldi	r20, 0x01	; 1
    2096:	0e 94 28 0a 	call	0x1450	; 0x1450 <GPIO_SetPinDir>
	GPIO_SetPinDir(D_PORT, D3_Pin, pin_output);
    209a:	80 e0       	ldi	r24, 0x00	; 0
    209c:	62 e0       	ldi	r22, 0x02	; 2
    209e:	41 e0       	ldi	r20, 0x01	; 1
    20a0:	0e 94 28 0a 	call	0x1450	; 0x1450 <GPIO_SetPinDir>
	GPIO_SetPinDir(D_PORT, D4_Pin, pin_output);
    20a4:	80 e0       	ldi	r24, 0x00	; 0
    20a6:	63 e0       	ldi	r22, 0x03	; 3
    20a8:	41 e0       	ldi	r20, 0x01	; 1
    20aa:	0e 94 28 0a 	call	0x1450	; 0x1450 <GPIO_SetPinDir>
	GPIO_SetPinDir(D_PORT, D5_Pin, pin_output);
    20ae:	80 e0       	ldi	r24, 0x00	; 0
    20b0:	64 e0       	ldi	r22, 0x04	; 4
    20b2:	41 e0       	ldi	r20, 0x01	; 1
    20b4:	0e 94 28 0a 	call	0x1450	; 0x1450 <GPIO_SetPinDir>
	GPIO_SetPinDir(D_PORT, D6_Pin, pin_output);
    20b8:	80 e0       	ldi	r24, 0x00	; 0
    20ba:	65 e0       	ldi	r22, 0x05	; 5
    20bc:	41 e0       	ldi	r20, 0x01	; 1
    20be:	0e 94 28 0a 	call	0x1450	; 0x1450 <GPIO_SetPinDir>
	// output 1 to ON All 6 (7-Segments)
	GPIO_WritePin(D_PORT, D1_Pin, LOGIC_HIGH);
    20c2:	80 e0       	ldi	r24, 0x00	; 0
    20c4:	60 e0       	ldi	r22, 0x00	; 0
    20c6:	41 e0       	ldi	r20, 0x01	; 1
    20c8:	0e 94 ae 0b 	call	0x175c	; 0x175c <GPIO_WritePin>
	GPIO_WritePin(D_PORT, D2_Pin, LOGIC_HIGH);
    20cc:	80 e0       	ldi	r24, 0x00	; 0
    20ce:	61 e0       	ldi	r22, 0x01	; 1
    20d0:	41 e0       	ldi	r20, 0x01	; 1
    20d2:	0e 94 ae 0b 	call	0x175c	; 0x175c <GPIO_WritePin>
	GPIO_WritePin(D_PORT, D3_Pin, LOGIC_HIGH);
    20d6:	80 e0       	ldi	r24, 0x00	; 0
    20d8:	62 e0       	ldi	r22, 0x02	; 2
    20da:	41 e0       	ldi	r20, 0x01	; 1
    20dc:	0e 94 ae 0b 	call	0x175c	; 0x175c <GPIO_WritePin>
	GPIO_WritePin(D_PORT, D4_Pin, LOGIC_HIGH);
    20e0:	80 e0       	ldi	r24, 0x00	; 0
    20e2:	63 e0       	ldi	r22, 0x03	; 3
    20e4:	41 e0       	ldi	r20, 0x01	; 1
    20e6:	0e 94 ae 0b 	call	0x175c	; 0x175c <GPIO_WritePin>
	GPIO_WritePin(D_PORT, D5_Pin, LOGIC_HIGH);
    20ea:	80 e0       	ldi	r24, 0x00	; 0
    20ec:	64 e0       	ldi	r22, 0x04	; 4
    20ee:	41 e0       	ldi	r20, 0x01	; 1
    20f0:	0e 94 ae 0b 	call	0x175c	; 0x175c <GPIO_WritePin>
	GPIO_WritePin(D_PORT, D6_Pin, LOGIC_HIGH);
    20f4:	80 e0       	ldi	r24, 0x00	; 0
    20f6:	65 e0       	ldi	r22, 0x05	; 5
    20f8:	41 e0       	ldi	r20, 0x01	; 1
    20fa:	0e 94 ae 0b 	call	0x175c	; 0x175c <GPIO_WritePin>
#endif
	/* Set direction of BCD pins and output HIGH to display ZERO on 7segments */
	GPIO_SetPinDir(SevenSegment_PORT, SevenSegment_PIN0, pin_output);
    20fe:	82 e0       	ldi	r24, 0x02	; 2
    2100:	60 e0       	ldi	r22, 0x00	; 0
    2102:	41 e0       	ldi	r20, 0x01	; 1
    2104:	0e 94 28 0a 	call	0x1450	; 0x1450 <GPIO_SetPinDir>
	GPIO_WritePin(SevenSegment_PORT, SevenSegment_PIN0, LOGIC_LOW);
    2108:	82 e0       	ldi	r24, 0x02	; 2
    210a:	60 e0       	ldi	r22, 0x00	; 0
    210c:	40 e0       	ldi	r20, 0x00	; 0
    210e:	0e 94 ae 0b 	call	0x175c	; 0x175c <GPIO_WritePin>

	GPIO_SetPinDir(SevenSegment_PORT, SevenSegment_PIN1, pin_output);
    2112:	82 e0       	ldi	r24, 0x02	; 2
    2114:	61 e0       	ldi	r22, 0x01	; 1
    2116:	41 e0       	ldi	r20, 0x01	; 1
    2118:	0e 94 28 0a 	call	0x1450	; 0x1450 <GPIO_SetPinDir>
	GPIO_WritePin(SevenSegment_PORT, SevenSegment_PIN1, LOGIC_LOW);
    211c:	82 e0       	ldi	r24, 0x02	; 2
    211e:	61 e0       	ldi	r22, 0x01	; 1
    2120:	40 e0       	ldi	r20, 0x00	; 0
    2122:	0e 94 ae 0b 	call	0x175c	; 0x175c <GPIO_WritePin>

	GPIO_SetPinDir(SevenSegment_PORT, SevenSegment_PIN2, pin_output);
    2126:	82 e0       	ldi	r24, 0x02	; 2
    2128:	62 e0       	ldi	r22, 0x02	; 2
    212a:	41 e0       	ldi	r20, 0x01	; 1
    212c:	0e 94 28 0a 	call	0x1450	; 0x1450 <GPIO_SetPinDir>
	GPIO_WritePin(SevenSegment_PORT, SevenSegment_PIN2, LOGIC_LOW);
    2130:	82 e0       	ldi	r24, 0x02	; 2
    2132:	62 e0       	ldi	r22, 0x02	; 2
    2134:	40 e0       	ldi	r20, 0x00	; 0
    2136:	0e 94 ae 0b 	call	0x175c	; 0x175c <GPIO_WritePin>

	GPIO_SetPinDir(SevenSegment_PORT, SevenSegment_PIN3, pin_output);
    213a:	82 e0       	ldi	r24, 0x02	; 2
    213c:	63 e0       	ldi	r22, 0x03	; 3
    213e:	41 e0       	ldi	r20, 0x01	; 1
    2140:	0e 94 28 0a 	call	0x1450	; 0x1450 <GPIO_SetPinDir>
	GPIO_WritePin(SevenSegment_PORT, SevenSegment_PIN3, LOGIC_LOW);
    2144:	82 e0       	ldi	r24, 0x02	; 2
    2146:	63 e0       	ldi	r22, 0x03	; 3
    2148:	40 e0       	ldi	r20, 0x00	; 0
    214a:	0e 94 ae 0b 	call	0x175c	; 0x175c <GPIO_WritePin>

#endif
	return DONE;
    214e:	80 e0       	ldi	r24, 0x00	; 0
#endif
	return ERROR;
}
    2150:	cf 91       	pop	r28
    2152:	df 91       	pop	r29
    2154:	08 95       	ret

00002156 <sevenSegmenDisplay>:
 [DISCRIPTION]:	This function is responsible to display number on the 7-Segment
 [Args]: uint8
 [RUTURN]: EN_7Segment_Error_t
 ---------------------------------------------------------------------------------------*/
EN_7Segment_Error_t sevenSegmenDisplay(uint8 Num)
{
    2156:	df 93       	push	r29
    2158:	cf 93       	push	r28
    215a:	0f 92       	push	r0
    215c:	cd b7       	in	r28, 0x3d	; 61
    215e:	de b7       	in	r29, 0x3e	; 62
    2160:	89 83       	std	Y+1, r24	; 0x01
#if HARDWARE_BCD == ENABLE
	/*
	 * because we use BCD so just you need to write only One to display one on 7_Segment
	 * Convert the number to binary EX:4 -> 0100 to write it to BCD IC
	 */
	GPIO_WriteLowNibble(SevenSegment_PORT, Num);
    2162:	82 e0       	ldi	r24, 0x02	; 2
    2164:	69 81       	ldd	r22, Y+1	; 0x01
    2166:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <GPIO_WriteLowNibble>

	return DONE;
    216a:	80 e0       	ldi	r24, 0x00	; 0
	GPIO_WritePin(SevenSegment_PORT, SevenSegment1_PIN6, GET_BIT(NumMap[Num],6));
	GPIO_WritePin(SevenSegment_PORT, SevenSegment1_PIN7, GET_BIT(NumMap[Num],7));
	return DONE;
#endif
	return ERROR;
}
    216c:	0f 90       	pop	r0
    216e:	cf 91       	pop	r28
    2170:	df 91       	pop	r29
    2172:	08 95       	ret

00002174 <sevenSegmentD1_EN>:
 [DISCRIPTION]:	This function's is responsible to Enable the specific 7-Segment
 [Args]:void
 [RUTURN]: Void
 ---------------------------------------------------------------------------------------*/
void sevenSegmentD1_EN(void)
{
    2174:	df 93       	push	r29
    2176:	cf 93       	push	r28
    2178:	cd b7       	in	r28, 0x3d	; 61
    217a:	de b7       	in	r29, 0x3e	; 62
	GPIO_WritePort(D_PORT, D1_EN);
    217c:	80 e0       	ldi	r24, 0x00	; 0
    217e:	61 ec       	ldi	r22, 0xC1	; 193
    2180:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <GPIO_WritePort>
}
    2184:	cf 91       	pop	r28
    2186:	df 91       	pop	r29
    2188:	08 95       	ret

0000218a <sevenSegmentD2_EN>:

void sevenSegmentD2_EN(void)
{
    218a:	df 93       	push	r29
    218c:	cf 93       	push	r28
    218e:	cd b7       	in	r28, 0x3d	; 61
    2190:	de b7       	in	r29, 0x3e	; 62
	GPIO_WritePort(D_PORT, D2_EN);
    2192:	80 e0       	ldi	r24, 0x00	; 0
    2194:	62 ec       	ldi	r22, 0xC2	; 194
    2196:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <GPIO_WritePort>
}
    219a:	cf 91       	pop	r28
    219c:	df 91       	pop	r29
    219e:	08 95       	ret

000021a0 <sevenSegmentD3_EN>:

void sevenSegmentD3_EN(void)
{
    21a0:	df 93       	push	r29
    21a2:	cf 93       	push	r28
    21a4:	cd b7       	in	r28, 0x3d	; 61
    21a6:	de b7       	in	r29, 0x3e	; 62
	GPIO_WritePort(D_PORT, D3_EN);
    21a8:	80 e0       	ldi	r24, 0x00	; 0
    21aa:	64 ec       	ldi	r22, 0xC4	; 196
    21ac:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <GPIO_WritePort>
}
    21b0:	cf 91       	pop	r28
    21b2:	df 91       	pop	r29
    21b4:	08 95       	ret

000021b6 <sevenSegmentD4_EN>:

void sevenSegmentD4_EN(void)
{
    21b6:	df 93       	push	r29
    21b8:	cf 93       	push	r28
    21ba:	cd b7       	in	r28, 0x3d	; 61
    21bc:	de b7       	in	r29, 0x3e	; 62
	GPIO_WritePort(D_PORT, D4_EN);
    21be:	80 e0       	ldi	r24, 0x00	; 0
    21c0:	68 ec       	ldi	r22, 0xC8	; 200
    21c2:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <GPIO_WritePort>
}
    21c6:	cf 91       	pop	r28
    21c8:	df 91       	pop	r29
    21ca:	08 95       	ret

000021cc <sevenSegmentD5_EN>:

void sevenSegmentD5_EN(void)
{
    21cc:	df 93       	push	r29
    21ce:	cf 93       	push	r28
    21d0:	cd b7       	in	r28, 0x3d	; 61
    21d2:	de b7       	in	r29, 0x3e	; 62
	GPIO_WritePort(D_PORT, D5_EN);
    21d4:	80 e0       	ldi	r24, 0x00	; 0
    21d6:	60 ed       	ldi	r22, 0xD0	; 208
    21d8:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <GPIO_WritePort>
}
    21dc:	cf 91       	pop	r28
    21de:	df 91       	pop	r29
    21e0:	08 95       	ret

000021e2 <sevenSegmentD6_EN>:

void sevenSegmentD6_EN(void)
{
    21e2:	df 93       	push	r29
    21e4:	cf 93       	push	r28
    21e6:	cd b7       	in	r28, 0x3d	; 61
    21e8:	de b7       	in	r29, 0x3e	; 62
	GPIO_WritePort(D_PORT, D6_EN);
    21ea:	80 e0       	ldi	r24, 0x00	; 0
    21ec:	60 ee       	ldi	r22, 0xE0	; 224
    21ee:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <GPIO_WritePort>
}
    21f2:	cf 91       	pop	r28
    21f4:	df 91       	pop	r29
    21f6:	08 95       	ret

000021f8 <stopWatchInit>:
 [Description]:	This function is responsible to Initialize the StopWatch Application
 [Args]:   void
 [Return]: Void
 ---------------------------------------------------------------------------------------*/
void stopWatchInit(void)
{
    21f8:	df 93       	push	r29
    21fa:	cf 93       	push	r28
    21fc:	cd b7       	in	r28, 0x3d	; 61
    21fe:	de b7       	in	r29, 0x3e	; 62
	sevenSegmentInit();
    2200:	0e 94 3f 10 	call	0x207e	; 0x207e <sevenSegmentInit>
	GI_Enable();
    2204:	0e 94 0c 0a 	call	0x1418	; 0x1418 <GI_Enable>
	TIMER_Init();
    2208:	0e 94 7f 08 	call	0x10fe	; 0x10fe <TIMER_Init>
	Ex_INT_Init();
    220c:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <Ex_INT_Init>
	Ex_INT0_SetCallBack(sevenSegmentResetDisplay);
    2210:	8c e2       	ldi	r24, 0x2C	; 44
    2212:	97 e1       	ldi	r25, 0x17	; 23
    2214:	0e 94 09 10 	call	0x2012	; 0x2012 <Ex_INT0_SetCallBack>
	Ex_INT1_SetCallBack(sevenSegmentPauseDisplay);
    2218:	89 e3       	ldi	r24, 0x39	; 57
    221a:	97 e1       	ldi	r25, 0x17	; 23
    221c:	0e 94 1b 10 	call	0x2036	; 0x2036 <Ex_INT1_SetCallBack>
	Ex_INT2_SetCallBack(sevenSegmentResumeDisplay);
    2220:	82 e4       	ldi	r24, 0x42	; 66
    2222:	97 e1       	ldi	r25, 0x17	; 23
    2224:	0e 94 2d 10 	call	0x205a	; 0x205a <Ex_INT2_SetCallBack>
}
    2228:	cf 91       	pop	r28
    222a:	df 91       	pop	r29
    222c:	08 95       	ret

0000222e <stopWatchStart>:
 [Description]:	This function is responsible to Start the StopWatch Application
 [Args]:   void
 [Return]: Void
 ---------------------------------------------------------------------------------------*/
void stopWatchStart(void)
{
    222e:	df 93       	push	r29
    2230:	cf 93       	push	r28
    2232:	cd b7       	in	r28, 0x3d	; 61
    2234:	de b7       	in	r29, 0x3e	; 62
	sevenSegmentSecondsDisplay();
    2236:	0e 94 24 11 	call	0x2248	; 0x2248 <sevenSegmentSecondsDisplay>
	sevenSegmentMinutsDisplay();
    223a:	0e 94 de 12 	call	0x25bc	; 0x25bc <sevenSegmentMinutsDisplay>
	sevenSegmentHoursDisplay();
    223e:	0e 94 85 14 	call	0x290a	; 0x290a <sevenSegmentHoursDisplay>
}
    2242:	cf 91       	pop	r28
    2244:	df 91       	pop	r29
    2246:	08 95       	ret

00002248 <sevenSegmentSecondsDisplay>:
 [Description]:	This function is responsible to count and display the second's on 7-Segment's
 [Args]:   void
 [Return]: EN_StopWatch_Error_t
 ---------------------------------------------------------------------------------------*/
EN_StopWatch_Error_t sevenSegmentSecondsDisplay(void)
{
    2248:	df 93       	push	r29
    224a:	cf 93       	push	r28
    224c:	cd b7       	in	r28, 0x3d	; 61
    224e:	de b7       	in	r29, 0x3e	; 62
    2250:	e1 97       	sbiw	r28, 0x31	; 49
    2252:	0f b6       	in	r0, 0x3f	; 63
    2254:	f8 94       	cli
    2256:	de bf       	out	0x3e, r29	; 62
    2258:	0f be       	out	0x3f, r0	; 63
    225a:	cd bf       	out	0x3d, r28	; 61
	if(interruptSecondFlag == TRUE)
    225c:	80 91 6e 01 	lds	r24, 0x016E
    2260:	81 30       	cpi	r24, 0x01	; 1
    2262:	c9 f4       	brne	.+50     	; 0x2296 <sevenSegmentSecondsDisplay+0x4e>
	{
		//Flag true mean that timer count 1ms
		interruptSecondFlag = FALSE;
    2264:	10 92 6e 01 	sts	0x016E, r1

		secondsCount++;
    2268:	80 91 75 01 	lds	r24, 0x0175
    226c:	8f 5f       	subi	r24, 0xFF	; 255
    226e:	80 93 75 01 	sts	0x0175, r24
		if(secondsCount == 60)
    2272:	80 91 75 01 	lds	r24, 0x0175
    2276:	8c 33       	cpi	r24, 0x3C	; 60
    2278:	39 f4       	brne	.+14     	; 0x2288 <sevenSegmentSecondsDisplay+0x40>
		{
			minutesCount++;
    227a:	80 91 76 01 	lds	r24, 0x0176
    227e:	8f 5f       	subi	r24, 0xFF	; 255
    2280:	80 93 76 01 	sts	0x0176, r24
			secondsCount = 0;
    2284:	10 92 75 01 	sts	0x0175, r1
		}
		if(secondsCount > 60)
    2288:	80 91 75 01 	lds	r24, 0x0175
    228c:	8d 33       	cpi	r24, 0x3D	; 61
    228e:	18 f0       	brcs	.+6      	; 0x2296 <sevenSegmentSecondsDisplay+0x4e>
		{
			return STOP_WATCH_ERROR;
    2290:	81 e0       	ldi	r24, 0x01	; 1
    2292:	89 ab       	std	Y+49, r24	; 0x31
    2294:	89 c1       	rjmp	.+786    	; 0x25a8 <sevenSegmentSecondsDisplay+0x360>
		}
	}

	/* Display The Seconds on 7segment */
	sevenSegmentD1_EN();
    2296:	0e 94 ba 10 	call	0x2174	; 0x2174 <sevenSegmentD1_EN>
	sevenSegmentOnesNum(secondsCount);
    229a:	80 91 75 01 	lds	r24, 0x0175
    229e:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <sevenSegmentOnesNum>
    22a2:	80 e0       	ldi	r24, 0x00	; 0
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	a0 e0       	ldi	r26, 0x00	; 0
    22a8:	b0 e4       	ldi	r27, 0x40	; 64
    22aa:	8d a7       	std	Y+45, r24	; 0x2d
    22ac:	9e a7       	std	Y+46, r25	; 0x2e
    22ae:	af a7       	std	Y+47, r26	; 0x2f
    22b0:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    22b2:	6d a5       	ldd	r22, Y+45	; 0x2d
    22b4:	7e a5       	ldd	r23, Y+46	; 0x2e
    22b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    22b8:	98 a9       	ldd	r25, Y+48	; 0x30
    22ba:	2b ea       	ldi	r18, 0xAB	; 171
    22bc:	3a ea       	ldi	r19, 0xAA	; 170
    22be:	4a e2       	ldi	r20, 0x2A	; 42
    22c0:	50 e4       	ldi	r21, 0x40	; 64
    22c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c6:	dc 01       	movw	r26, r24
    22c8:	cb 01       	movw	r24, r22
    22ca:	89 a7       	std	Y+41, r24	; 0x29
    22cc:	9a a7       	std	Y+42, r25	; 0x2a
    22ce:	ab a7       	std	Y+43, r26	; 0x2b
    22d0:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    22d2:	69 a5       	ldd	r22, Y+41	; 0x29
    22d4:	7a a5       	ldd	r23, Y+42	; 0x2a
    22d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    22d8:	9c a5       	ldd	r25, Y+44	; 0x2c
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	40 e8       	ldi	r20, 0x80	; 128
    22e0:	5f e3       	ldi	r21, 0x3F	; 63
    22e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22e6:	88 23       	and	r24, r24
    22e8:	1c f4       	brge	.+6      	; 0x22f0 <sevenSegmentSecondsDisplay+0xa8>
		__ticks = 1;
    22ea:	81 e0       	ldi	r24, 0x01	; 1
    22ec:	88 a7       	std	Y+40, r24	; 0x28
    22ee:	91 c0       	rjmp	.+290    	; 0x2412 <sevenSegmentSecondsDisplay+0x1ca>
	else if (__tmp > 255)
    22f0:	69 a5       	ldd	r22, Y+41	; 0x29
    22f2:	7a a5       	ldd	r23, Y+42	; 0x2a
    22f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    22f6:	9c a5       	ldd	r25, Y+44	; 0x2c
    22f8:	20 e0       	ldi	r18, 0x00	; 0
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	4f e7       	ldi	r20, 0x7F	; 127
    22fe:	53 e4       	ldi	r21, 0x43	; 67
    2300:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2304:	18 16       	cp	r1, r24
    2306:	0c f0       	brlt	.+2      	; 0x230a <sevenSegmentSecondsDisplay+0xc2>
    2308:	7b c0       	rjmp	.+246    	; 0x2400 <sevenSegmentSecondsDisplay+0x1b8>
	{
		_delay_ms(__us / 1000.0);
    230a:	6d a5       	ldd	r22, Y+45	; 0x2d
    230c:	7e a5       	ldd	r23, Y+46	; 0x2e
    230e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2310:	98 a9       	ldd	r25, Y+48	; 0x30
    2312:	20 e0       	ldi	r18, 0x00	; 0
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	4a e7       	ldi	r20, 0x7A	; 122
    2318:	54 e4       	ldi	r21, 0x44	; 68
    231a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    231e:	dc 01       	movw	r26, r24
    2320:	cb 01       	movw	r24, r22
    2322:	8c a3       	std	Y+36, r24	; 0x24
    2324:	9d a3       	std	Y+37, r25	; 0x25
    2326:	ae a3       	std	Y+38, r26	; 0x26
    2328:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    232a:	6c a1       	ldd	r22, Y+36	; 0x24
    232c:	7d a1       	ldd	r23, Y+37	; 0x25
    232e:	8e a1       	ldd	r24, Y+38	; 0x26
    2330:	9f a1       	ldd	r25, Y+39	; 0x27
    2332:	20 e0       	ldi	r18, 0x00	; 0
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	4a ef       	ldi	r20, 0xFA	; 250
    2338:	54 e4       	ldi	r21, 0x44	; 68
    233a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    233e:	dc 01       	movw	r26, r24
    2340:	cb 01       	movw	r24, r22
    2342:	88 a3       	std	Y+32, r24	; 0x20
    2344:	99 a3       	std	Y+33, r25	; 0x21
    2346:	aa a3       	std	Y+34, r26	; 0x22
    2348:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    234a:	68 a1       	ldd	r22, Y+32	; 0x20
    234c:	79 a1       	ldd	r23, Y+33	; 0x21
    234e:	8a a1       	ldd	r24, Y+34	; 0x22
    2350:	9b a1       	ldd	r25, Y+35	; 0x23
    2352:	20 e0       	ldi	r18, 0x00	; 0
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	40 e8       	ldi	r20, 0x80	; 128
    2358:	5f e3       	ldi	r21, 0x3F	; 63
    235a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    235e:	88 23       	and	r24, r24
    2360:	2c f4       	brge	.+10     	; 0x236c <sevenSegmentSecondsDisplay+0x124>
		__ticks = 1;
    2362:	81 e0       	ldi	r24, 0x01	; 1
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	9f 8f       	std	Y+31, r25	; 0x1f
    2368:	8e 8f       	std	Y+30, r24	; 0x1e
    236a:	3f c0       	rjmp	.+126    	; 0x23ea <sevenSegmentSecondsDisplay+0x1a2>
	else if (__tmp > 65535)
    236c:	68 a1       	ldd	r22, Y+32	; 0x20
    236e:	79 a1       	ldd	r23, Y+33	; 0x21
    2370:	8a a1       	ldd	r24, Y+34	; 0x22
    2372:	9b a1       	ldd	r25, Y+35	; 0x23
    2374:	20 e0       	ldi	r18, 0x00	; 0
    2376:	3f ef       	ldi	r19, 0xFF	; 255
    2378:	4f e7       	ldi	r20, 0x7F	; 127
    237a:	57 e4       	ldi	r21, 0x47	; 71
    237c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2380:	18 16       	cp	r1, r24
    2382:	4c f5       	brge	.+82     	; 0x23d6 <sevenSegmentSecondsDisplay+0x18e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2384:	6c a1       	ldd	r22, Y+36	; 0x24
    2386:	7d a1       	ldd	r23, Y+37	; 0x25
    2388:	8e a1       	ldd	r24, Y+38	; 0x26
    238a:	9f a1       	ldd	r25, Y+39	; 0x27
    238c:	20 e0       	ldi	r18, 0x00	; 0
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	40 e2       	ldi	r20, 0x20	; 32
    2392:	51 e4       	ldi	r21, 0x41	; 65
    2394:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2398:	dc 01       	movw	r26, r24
    239a:	cb 01       	movw	r24, r22
    239c:	bc 01       	movw	r22, r24
    239e:	cd 01       	movw	r24, r26
    23a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a4:	dc 01       	movw	r26, r24
    23a6:	cb 01       	movw	r24, r22
    23a8:	9f 8f       	std	Y+31, r25	; 0x1f
    23aa:	8e 8f       	std	Y+30, r24	; 0x1e
    23ac:	0f c0       	rjmp	.+30     	; 0x23cc <sevenSegmentSecondsDisplay+0x184>
    23ae:	88 ec       	ldi	r24, 0xC8	; 200
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	9d 8f       	std	Y+29, r25	; 0x1d
    23b4:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23b6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    23b8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    23ba:	01 97       	sbiw	r24, 0x01	; 1
    23bc:	f1 f7       	brne	.-4      	; 0x23ba <sevenSegmentSecondsDisplay+0x172>
    23be:	9d 8f       	std	Y+29, r25	; 0x1d
    23c0:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23c2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23c4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    23c6:	01 97       	sbiw	r24, 0x01	; 1
    23c8:	9f 8f       	std	Y+31, r25	; 0x1f
    23ca:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23cc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23ce:	9f 8d       	ldd	r25, Y+31	; 0x1f
    23d0:	00 97       	sbiw	r24, 0x00	; 0
    23d2:	69 f7       	brne	.-38     	; 0x23ae <sevenSegmentSecondsDisplay+0x166>
    23d4:	24 c0       	rjmp	.+72     	; 0x241e <sevenSegmentSecondsDisplay+0x1d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23d6:	68 a1       	ldd	r22, Y+32	; 0x20
    23d8:	79 a1       	ldd	r23, Y+33	; 0x21
    23da:	8a a1       	ldd	r24, Y+34	; 0x22
    23dc:	9b a1       	ldd	r25, Y+35	; 0x23
    23de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e2:	dc 01       	movw	r26, r24
    23e4:	cb 01       	movw	r24, r22
    23e6:	9f 8f       	std	Y+31, r25	; 0x1f
    23e8:	8e 8f       	std	Y+30, r24	; 0x1e
    23ea:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23ec:	9f 8d       	ldd	r25, Y+31	; 0x1f
    23ee:	9b 8f       	std	Y+27, r25	; 0x1b
    23f0:	8a 8f       	std	Y+26, r24	; 0x1a
    23f2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    23f4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    23f6:	01 97       	sbiw	r24, 0x01	; 1
    23f8:	f1 f7       	brne	.-4      	; 0x23f6 <sevenSegmentSecondsDisplay+0x1ae>
    23fa:	9b 8f       	std	Y+27, r25	; 0x1b
    23fc:	8a 8f       	std	Y+26, r24	; 0x1a
    23fe:	0f c0       	rjmp	.+30     	; 0x241e <sevenSegmentSecondsDisplay+0x1d6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2400:	69 a5       	ldd	r22, Y+41	; 0x29
    2402:	7a a5       	ldd	r23, Y+42	; 0x2a
    2404:	8b a5       	ldd	r24, Y+43	; 0x2b
    2406:	9c a5       	ldd	r25, Y+44	; 0x2c
    2408:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    240c:	dc 01       	movw	r26, r24
    240e:	cb 01       	movw	r24, r22
    2410:	88 a7       	std	Y+40, r24	; 0x28
    2412:	88 a5       	ldd	r24, Y+40	; 0x28
    2414:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2416:	89 8d       	ldd	r24, Y+25	; 0x19
    2418:	8a 95       	dec	r24
    241a:	f1 f7       	brne	.-4      	; 0x2418 <sevenSegmentSecondsDisplay+0x1d0>
    241c:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(2);	// delay to changes in the 7-segment

	sevenSegmentD2_EN();
    241e:	0e 94 c5 10 	call	0x218a	; 0x218a <sevenSegmentD2_EN>
	sevenSegmentTensNum(secondsCount);
    2422:	80 91 75 01 	lds	r24, 0x0175
    2426:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <sevenSegmentTensNum>
    242a:	80 e0       	ldi	r24, 0x00	; 0
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	a0 e0       	ldi	r26, 0x00	; 0
    2430:	b0 e4       	ldi	r27, 0x40	; 64
    2432:	8d 8b       	std	Y+21, r24	; 0x15
    2434:	9e 8b       	std	Y+22, r25	; 0x16
    2436:	af 8b       	std	Y+23, r26	; 0x17
    2438:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    243a:	6d 89       	ldd	r22, Y+21	; 0x15
    243c:	7e 89       	ldd	r23, Y+22	; 0x16
    243e:	8f 89       	ldd	r24, Y+23	; 0x17
    2440:	98 8d       	ldd	r25, Y+24	; 0x18
    2442:	2b ea       	ldi	r18, 0xAB	; 171
    2444:	3a ea       	ldi	r19, 0xAA	; 170
    2446:	4a e2       	ldi	r20, 0x2A	; 42
    2448:	50 e4       	ldi	r21, 0x40	; 64
    244a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    244e:	dc 01       	movw	r26, r24
    2450:	cb 01       	movw	r24, r22
    2452:	89 8b       	std	Y+17, r24	; 0x11
    2454:	9a 8b       	std	Y+18, r25	; 0x12
    2456:	ab 8b       	std	Y+19, r26	; 0x13
    2458:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    245a:	69 89       	ldd	r22, Y+17	; 0x11
    245c:	7a 89       	ldd	r23, Y+18	; 0x12
    245e:	8b 89       	ldd	r24, Y+19	; 0x13
    2460:	9c 89       	ldd	r25, Y+20	; 0x14
    2462:	20 e0       	ldi	r18, 0x00	; 0
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	40 e8       	ldi	r20, 0x80	; 128
    2468:	5f e3       	ldi	r21, 0x3F	; 63
    246a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    246e:	88 23       	and	r24, r24
    2470:	1c f4       	brge	.+6      	; 0x2478 <sevenSegmentSecondsDisplay+0x230>
		__ticks = 1;
    2472:	81 e0       	ldi	r24, 0x01	; 1
    2474:	88 8b       	std	Y+16, r24	; 0x10
    2476:	91 c0       	rjmp	.+290    	; 0x259a <sevenSegmentSecondsDisplay+0x352>
	else if (__tmp > 255)
    2478:	69 89       	ldd	r22, Y+17	; 0x11
    247a:	7a 89       	ldd	r23, Y+18	; 0x12
    247c:	8b 89       	ldd	r24, Y+19	; 0x13
    247e:	9c 89       	ldd	r25, Y+20	; 0x14
    2480:	20 e0       	ldi	r18, 0x00	; 0
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	4f e7       	ldi	r20, 0x7F	; 127
    2486:	53 e4       	ldi	r21, 0x43	; 67
    2488:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    248c:	18 16       	cp	r1, r24
    248e:	0c f0       	brlt	.+2      	; 0x2492 <sevenSegmentSecondsDisplay+0x24a>
    2490:	7b c0       	rjmp	.+246    	; 0x2588 <sevenSegmentSecondsDisplay+0x340>
	{
		_delay_ms(__us / 1000.0);
    2492:	6d 89       	ldd	r22, Y+21	; 0x15
    2494:	7e 89       	ldd	r23, Y+22	; 0x16
    2496:	8f 89       	ldd	r24, Y+23	; 0x17
    2498:	98 8d       	ldd	r25, Y+24	; 0x18
    249a:	20 e0       	ldi	r18, 0x00	; 0
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	4a e7       	ldi	r20, 0x7A	; 122
    24a0:	54 e4       	ldi	r21, 0x44	; 68
    24a2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    24a6:	dc 01       	movw	r26, r24
    24a8:	cb 01       	movw	r24, r22
    24aa:	8c 87       	std	Y+12, r24	; 0x0c
    24ac:	9d 87       	std	Y+13, r25	; 0x0d
    24ae:	ae 87       	std	Y+14, r26	; 0x0e
    24b0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24b2:	6c 85       	ldd	r22, Y+12	; 0x0c
    24b4:	7d 85       	ldd	r23, Y+13	; 0x0d
    24b6:	8e 85       	ldd	r24, Y+14	; 0x0e
    24b8:	9f 85       	ldd	r25, Y+15	; 0x0f
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	4a ef       	ldi	r20, 0xFA	; 250
    24c0:	54 e4       	ldi	r21, 0x44	; 68
    24c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c6:	dc 01       	movw	r26, r24
    24c8:	cb 01       	movw	r24, r22
    24ca:	88 87       	std	Y+8, r24	; 0x08
    24cc:	99 87       	std	Y+9, r25	; 0x09
    24ce:	aa 87       	std	Y+10, r26	; 0x0a
    24d0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    24d2:	68 85       	ldd	r22, Y+8	; 0x08
    24d4:	79 85       	ldd	r23, Y+9	; 0x09
    24d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    24d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    24da:	20 e0       	ldi	r18, 0x00	; 0
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	40 e8       	ldi	r20, 0x80	; 128
    24e0:	5f e3       	ldi	r21, 0x3F	; 63
    24e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24e6:	88 23       	and	r24, r24
    24e8:	2c f4       	brge	.+10     	; 0x24f4 <sevenSegmentSecondsDisplay+0x2ac>
		__ticks = 1;
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	9f 83       	std	Y+7, r25	; 0x07
    24f0:	8e 83       	std	Y+6, r24	; 0x06
    24f2:	3f c0       	rjmp	.+126    	; 0x2572 <sevenSegmentSecondsDisplay+0x32a>
	else if (__tmp > 65535)
    24f4:	68 85       	ldd	r22, Y+8	; 0x08
    24f6:	79 85       	ldd	r23, Y+9	; 0x09
    24f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    24fa:	9b 85       	ldd	r25, Y+11	; 0x0b
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	3f ef       	ldi	r19, 0xFF	; 255
    2500:	4f e7       	ldi	r20, 0x7F	; 127
    2502:	57 e4       	ldi	r21, 0x47	; 71
    2504:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2508:	18 16       	cp	r1, r24
    250a:	4c f5       	brge	.+82     	; 0x255e <sevenSegmentSecondsDisplay+0x316>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    250c:	6c 85       	ldd	r22, Y+12	; 0x0c
    250e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2510:	8e 85       	ldd	r24, Y+14	; 0x0e
    2512:	9f 85       	ldd	r25, Y+15	; 0x0f
    2514:	20 e0       	ldi	r18, 0x00	; 0
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	40 e2       	ldi	r20, 0x20	; 32
    251a:	51 e4       	ldi	r21, 0x41	; 65
    251c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2520:	dc 01       	movw	r26, r24
    2522:	cb 01       	movw	r24, r22
    2524:	bc 01       	movw	r22, r24
    2526:	cd 01       	movw	r24, r26
    2528:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    252c:	dc 01       	movw	r26, r24
    252e:	cb 01       	movw	r24, r22
    2530:	9f 83       	std	Y+7, r25	; 0x07
    2532:	8e 83       	std	Y+6, r24	; 0x06
    2534:	0f c0       	rjmp	.+30     	; 0x2554 <sevenSegmentSecondsDisplay+0x30c>
    2536:	88 ec       	ldi	r24, 0xC8	; 200
    2538:	90 e0       	ldi	r25, 0x00	; 0
    253a:	9d 83       	std	Y+5, r25	; 0x05
    253c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    253e:	8c 81       	ldd	r24, Y+4	; 0x04
    2540:	9d 81       	ldd	r25, Y+5	; 0x05
    2542:	01 97       	sbiw	r24, 0x01	; 1
    2544:	f1 f7       	brne	.-4      	; 0x2542 <sevenSegmentSecondsDisplay+0x2fa>
    2546:	9d 83       	std	Y+5, r25	; 0x05
    2548:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    254a:	8e 81       	ldd	r24, Y+6	; 0x06
    254c:	9f 81       	ldd	r25, Y+7	; 0x07
    254e:	01 97       	sbiw	r24, 0x01	; 1
    2550:	9f 83       	std	Y+7, r25	; 0x07
    2552:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2554:	8e 81       	ldd	r24, Y+6	; 0x06
    2556:	9f 81       	ldd	r25, Y+7	; 0x07
    2558:	00 97       	sbiw	r24, 0x00	; 0
    255a:	69 f7       	brne	.-38     	; 0x2536 <sevenSegmentSecondsDisplay+0x2ee>
    255c:	24 c0       	rjmp	.+72     	; 0x25a6 <sevenSegmentSecondsDisplay+0x35e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    255e:	68 85       	ldd	r22, Y+8	; 0x08
    2560:	79 85       	ldd	r23, Y+9	; 0x09
    2562:	8a 85       	ldd	r24, Y+10	; 0x0a
    2564:	9b 85       	ldd	r25, Y+11	; 0x0b
    2566:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    256a:	dc 01       	movw	r26, r24
    256c:	cb 01       	movw	r24, r22
    256e:	9f 83       	std	Y+7, r25	; 0x07
    2570:	8e 83       	std	Y+6, r24	; 0x06
    2572:	8e 81       	ldd	r24, Y+6	; 0x06
    2574:	9f 81       	ldd	r25, Y+7	; 0x07
    2576:	9b 83       	std	Y+3, r25	; 0x03
    2578:	8a 83       	std	Y+2, r24	; 0x02
    257a:	8a 81       	ldd	r24, Y+2	; 0x02
    257c:	9b 81       	ldd	r25, Y+3	; 0x03
    257e:	01 97       	sbiw	r24, 0x01	; 1
    2580:	f1 f7       	brne	.-4      	; 0x257e <sevenSegmentSecondsDisplay+0x336>
    2582:	9b 83       	std	Y+3, r25	; 0x03
    2584:	8a 83       	std	Y+2, r24	; 0x02
    2586:	0f c0       	rjmp	.+30     	; 0x25a6 <sevenSegmentSecondsDisplay+0x35e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2588:	69 89       	ldd	r22, Y+17	; 0x11
    258a:	7a 89       	ldd	r23, Y+18	; 0x12
    258c:	8b 89       	ldd	r24, Y+19	; 0x13
    258e:	9c 89       	ldd	r25, Y+20	; 0x14
    2590:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2594:	dc 01       	movw	r26, r24
    2596:	cb 01       	movw	r24, r22
    2598:	88 8b       	std	Y+16, r24	; 0x10
    259a:	88 89       	ldd	r24, Y+16	; 0x10
    259c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    259e:	89 81       	ldd	r24, Y+1	; 0x01
    25a0:	8a 95       	dec	r24
    25a2:	f1 f7       	brne	.-4      	; 0x25a0 <sevenSegmentSecondsDisplay+0x358>
    25a4:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2);	// delay to changes in the 7-segment

	return STOP_WATCH_DONE;
    25a6:	19 aa       	std	Y+49, r1	; 0x31
    25a8:	89 a9       	ldd	r24, Y+49	; 0x31
}
    25aa:	e1 96       	adiw	r28, 0x31	; 49
    25ac:	0f b6       	in	r0, 0x3f	; 63
    25ae:	f8 94       	cli
    25b0:	de bf       	out	0x3e, r29	; 62
    25b2:	0f be       	out	0x3f, r0	; 63
    25b4:	cd bf       	out	0x3d, r28	; 61
    25b6:	cf 91       	pop	r28
    25b8:	df 91       	pop	r29
    25ba:	08 95       	ret

000025bc <sevenSegmentMinutsDisplay>:
 [Description]:	This function is responsible to count and display the minut's on 7-Segment's
 [Args]:   void
 [Return]: EN_StopWatch_Error_t
 ---------------------------------------------------------------------------------------*/
EN_StopWatch_Error_t sevenSegmentMinutsDisplay(void)
{
    25bc:	df 93       	push	r29
    25be:	cf 93       	push	r28
    25c0:	cd b7       	in	r28, 0x3d	; 61
    25c2:	de b7       	in	r29, 0x3e	; 62
    25c4:	e0 97       	sbiw	r28, 0x30	; 48
    25c6:	0f b6       	in	r0, 0x3f	; 63
    25c8:	f8 94       	cli
    25ca:	de bf       	out	0x3e, r29	; 62
    25cc:	0f be       	out	0x3f, r0	; 63
    25ce:	cd bf       	out	0x3d, r28	; 61
	if(minutesCount == 60)
    25d0:	80 91 76 01 	lds	r24, 0x0176
    25d4:	8c 33       	cpi	r24, 0x3C	; 60
    25d6:	39 f4       	brne	.+14     	; 0x25e6 <sevenSegmentMinutsDisplay+0x2a>
	{
		hoursCount++;
    25d8:	80 91 77 01 	lds	r24, 0x0177
    25dc:	8f 5f       	subi	r24, 0xFF	; 255
    25de:	80 93 77 01 	sts	0x0177, r24
		minutesCount = 0;
    25e2:	10 92 76 01 	sts	0x0176, r1
	}

	/* Display The Minutes on 7segment */
	sevenSegmentD3_EN();
    25e6:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <sevenSegmentD3_EN>
	sevenSegmentOnesNum(minutesCount);
    25ea:	80 91 76 01 	lds	r24, 0x0176
    25ee:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <sevenSegmentOnesNum>
    25f2:	80 e0       	ldi	r24, 0x00	; 0
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	a0 e0       	ldi	r26, 0x00	; 0
    25f8:	b0 e4       	ldi	r27, 0x40	; 64
    25fa:	8d a7       	std	Y+45, r24	; 0x2d
    25fc:	9e a7       	std	Y+46, r25	; 0x2e
    25fe:	af a7       	std	Y+47, r26	; 0x2f
    2600:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2602:	6d a5       	ldd	r22, Y+45	; 0x2d
    2604:	7e a5       	ldd	r23, Y+46	; 0x2e
    2606:	8f a5       	ldd	r24, Y+47	; 0x2f
    2608:	98 a9       	ldd	r25, Y+48	; 0x30
    260a:	2b ea       	ldi	r18, 0xAB	; 171
    260c:	3a ea       	ldi	r19, 0xAA	; 170
    260e:	4a e2       	ldi	r20, 0x2A	; 42
    2610:	50 e4       	ldi	r21, 0x40	; 64
    2612:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2616:	dc 01       	movw	r26, r24
    2618:	cb 01       	movw	r24, r22
    261a:	89 a7       	std	Y+41, r24	; 0x29
    261c:	9a a7       	std	Y+42, r25	; 0x2a
    261e:	ab a7       	std	Y+43, r26	; 0x2b
    2620:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2622:	69 a5       	ldd	r22, Y+41	; 0x29
    2624:	7a a5       	ldd	r23, Y+42	; 0x2a
    2626:	8b a5       	ldd	r24, Y+43	; 0x2b
    2628:	9c a5       	ldd	r25, Y+44	; 0x2c
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	40 e8       	ldi	r20, 0x80	; 128
    2630:	5f e3       	ldi	r21, 0x3F	; 63
    2632:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2636:	88 23       	and	r24, r24
    2638:	1c f4       	brge	.+6      	; 0x2640 <sevenSegmentMinutsDisplay+0x84>
		__ticks = 1;
    263a:	81 e0       	ldi	r24, 0x01	; 1
    263c:	88 a7       	std	Y+40, r24	; 0x28
    263e:	91 c0       	rjmp	.+290    	; 0x2762 <sevenSegmentMinutsDisplay+0x1a6>
	else if (__tmp > 255)
    2640:	69 a5       	ldd	r22, Y+41	; 0x29
    2642:	7a a5       	ldd	r23, Y+42	; 0x2a
    2644:	8b a5       	ldd	r24, Y+43	; 0x2b
    2646:	9c a5       	ldd	r25, Y+44	; 0x2c
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	4f e7       	ldi	r20, 0x7F	; 127
    264e:	53 e4       	ldi	r21, 0x43	; 67
    2650:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2654:	18 16       	cp	r1, r24
    2656:	0c f0       	brlt	.+2      	; 0x265a <sevenSegmentMinutsDisplay+0x9e>
    2658:	7b c0       	rjmp	.+246    	; 0x2750 <sevenSegmentMinutsDisplay+0x194>
	{
		_delay_ms(__us / 1000.0);
    265a:	6d a5       	ldd	r22, Y+45	; 0x2d
    265c:	7e a5       	ldd	r23, Y+46	; 0x2e
    265e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2660:	98 a9       	ldd	r25, Y+48	; 0x30
    2662:	20 e0       	ldi	r18, 0x00	; 0
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	4a e7       	ldi	r20, 0x7A	; 122
    2668:	54 e4       	ldi	r21, 0x44	; 68
    266a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    266e:	dc 01       	movw	r26, r24
    2670:	cb 01       	movw	r24, r22
    2672:	8c a3       	std	Y+36, r24	; 0x24
    2674:	9d a3       	std	Y+37, r25	; 0x25
    2676:	ae a3       	std	Y+38, r26	; 0x26
    2678:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    267a:	6c a1       	ldd	r22, Y+36	; 0x24
    267c:	7d a1       	ldd	r23, Y+37	; 0x25
    267e:	8e a1       	ldd	r24, Y+38	; 0x26
    2680:	9f a1       	ldd	r25, Y+39	; 0x27
    2682:	20 e0       	ldi	r18, 0x00	; 0
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	4a ef       	ldi	r20, 0xFA	; 250
    2688:	54 e4       	ldi	r21, 0x44	; 68
    268a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    268e:	dc 01       	movw	r26, r24
    2690:	cb 01       	movw	r24, r22
    2692:	88 a3       	std	Y+32, r24	; 0x20
    2694:	99 a3       	std	Y+33, r25	; 0x21
    2696:	aa a3       	std	Y+34, r26	; 0x22
    2698:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    269a:	68 a1       	ldd	r22, Y+32	; 0x20
    269c:	79 a1       	ldd	r23, Y+33	; 0x21
    269e:	8a a1       	ldd	r24, Y+34	; 0x22
    26a0:	9b a1       	ldd	r25, Y+35	; 0x23
    26a2:	20 e0       	ldi	r18, 0x00	; 0
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	40 e8       	ldi	r20, 0x80	; 128
    26a8:	5f e3       	ldi	r21, 0x3F	; 63
    26aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26ae:	88 23       	and	r24, r24
    26b0:	2c f4       	brge	.+10     	; 0x26bc <sevenSegmentMinutsDisplay+0x100>
		__ticks = 1;
    26b2:	81 e0       	ldi	r24, 0x01	; 1
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	9f 8f       	std	Y+31, r25	; 0x1f
    26b8:	8e 8f       	std	Y+30, r24	; 0x1e
    26ba:	3f c0       	rjmp	.+126    	; 0x273a <sevenSegmentMinutsDisplay+0x17e>
	else if (__tmp > 65535)
    26bc:	68 a1       	ldd	r22, Y+32	; 0x20
    26be:	79 a1       	ldd	r23, Y+33	; 0x21
    26c0:	8a a1       	ldd	r24, Y+34	; 0x22
    26c2:	9b a1       	ldd	r25, Y+35	; 0x23
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	3f ef       	ldi	r19, 0xFF	; 255
    26c8:	4f e7       	ldi	r20, 0x7F	; 127
    26ca:	57 e4       	ldi	r21, 0x47	; 71
    26cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26d0:	18 16       	cp	r1, r24
    26d2:	4c f5       	brge	.+82     	; 0x2726 <sevenSegmentMinutsDisplay+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26d4:	6c a1       	ldd	r22, Y+36	; 0x24
    26d6:	7d a1       	ldd	r23, Y+37	; 0x25
    26d8:	8e a1       	ldd	r24, Y+38	; 0x26
    26da:	9f a1       	ldd	r25, Y+39	; 0x27
    26dc:	20 e0       	ldi	r18, 0x00	; 0
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	40 e2       	ldi	r20, 0x20	; 32
    26e2:	51 e4       	ldi	r21, 0x41	; 65
    26e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e8:	dc 01       	movw	r26, r24
    26ea:	cb 01       	movw	r24, r22
    26ec:	bc 01       	movw	r22, r24
    26ee:	cd 01       	movw	r24, r26
    26f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f4:	dc 01       	movw	r26, r24
    26f6:	cb 01       	movw	r24, r22
    26f8:	9f 8f       	std	Y+31, r25	; 0x1f
    26fa:	8e 8f       	std	Y+30, r24	; 0x1e
    26fc:	0f c0       	rjmp	.+30     	; 0x271c <sevenSegmentMinutsDisplay+0x160>
    26fe:	88 ec       	ldi	r24, 0xC8	; 200
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	9d 8f       	std	Y+29, r25	; 0x1d
    2704:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2706:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2708:	9d 8d       	ldd	r25, Y+29	; 0x1d
    270a:	01 97       	sbiw	r24, 0x01	; 1
    270c:	f1 f7       	brne	.-4      	; 0x270a <sevenSegmentMinutsDisplay+0x14e>
    270e:	9d 8f       	std	Y+29, r25	; 0x1d
    2710:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2712:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2714:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2716:	01 97       	sbiw	r24, 0x01	; 1
    2718:	9f 8f       	std	Y+31, r25	; 0x1f
    271a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    271c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    271e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2720:	00 97       	sbiw	r24, 0x00	; 0
    2722:	69 f7       	brne	.-38     	; 0x26fe <sevenSegmentMinutsDisplay+0x142>
    2724:	24 c0       	rjmp	.+72     	; 0x276e <sevenSegmentMinutsDisplay+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2726:	68 a1       	ldd	r22, Y+32	; 0x20
    2728:	79 a1       	ldd	r23, Y+33	; 0x21
    272a:	8a a1       	ldd	r24, Y+34	; 0x22
    272c:	9b a1       	ldd	r25, Y+35	; 0x23
    272e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	9f 8f       	std	Y+31, r25	; 0x1f
    2738:	8e 8f       	std	Y+30, r24	; 0x1e
    273a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    273c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    273e:	9b 8f       	std	Y+27, r25	; 0x1b
    2740:	8a 8f       	std	Y+26, r24	; 0x1a
    2742:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2744:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2746:	01 97       	sbiw	r24, 0x01	; 1
    2748:	f1 f7       	brne	.-4      	; 0x2746 <sevenSegmentMinutsDisplay+0x18a>
    274a:	9b 8f       	std	Y+27, r25	; 0x1b
    274c:	8a 8f       	std	Y+26, r24	; 0x1a
    274e:	0f c0       	rjmp	.+30     	; 0x276e <sevenSegmentMinutsDisplay+0x1b2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2750:	69 a5       	ldd	r22, Y+41	; 0x29
    2752:	7a a5       	ldd	r23, Y+42	; 0x2a
    2754:	8b a5       	ldd	r24, Y+43	; 0x2b
    2756:	9c a5       	ldd	r25, Y+44	; 0x2c
    2758:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    275c:	dc 01       	movw	r26, r24
    275e:	cb 01       	movw	r24, r22
    2760:	88 a7       	std	Y+40, r24	; 0x28
    2762:	88 a5       	ldd	r24, Y+40	; 0x28
    2764:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2766:	89 8d       	ldd	r24, Y+25	; 0x19
    2768:	8a 95       	dec	r24
    276a:	f1 f7       	brne	.-4      	; 0x2768 <sevenSegmentMinutsDisplay+0x1ac>
    276c:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(2);	// delay to changes in the 7-segment

	sevenSegmentD4_EN();
    276e:	0e 94 db 10 	call	0x21b6	; 0x21b6 <sevenSegmentD4_EN>
	sevenSegmentTensNum(minutesCount);
    2772:	80 91 76 01 	lds	r24, 0x0176
    2776:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <sevenSegmentTensNum>
    277a:	80 e0       	ldi	r24, 0x00	; 0
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	a0 e0       	ldi	r26, 0x00	; 0
    2780:	b0 e4       	ldi	r27, 0x40	; 64
    2782:	8d 8b       	std	Y+21, r24	; 0x15
    2784:	9e 8b       	std	Y+22, r25	; 0x16
    2786:	af 8b       	std	Y+23, r26	; 0x17
    2788:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    278a:	6d 89       	ldd	r22, Y+21	; 0x15
    278c:	7e 89       	ldd	r23, Y+22	; 0x16
    278e:	8f 89       	ldd	r24, Y+23	; 0x17
    2790:	98 8d       	ldd	r25, Y+24	; 0x18
    2792:	2b ea       	ldi	r18, 0xAB	; 171
    2794:	3a ea       	ldi	r19, 0xAA	; 170
    2796:	4a e2       	ldi	r20, 0x2A	; 42
    2798:	50 e4       	ldi	r21, 0x40	; 64
    279a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    279e:	dc 01       	movw	r26, r24
    27a0:	cb 01       	movw	r24, r22
    27a2:	89 8b       	std	Y+17, r24	; 0x11
    27a4:	9a 8b       	std	Y+18, r25	; 0x12
    27a6:	ab 8b       	std	Y+19, r26	; 0x13
    27a8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    27aa:	69 89       	ldd	r22, Y+17	; 0x11
    27ac:	7a 89       	ldd	r23, Y+18	; 0x12
    27ae:	8b 89       	ldd	r24, Y+19	; 0x13
    27b0:	9c 89       	ldd	r25, Y+20	; 0x14
    27b2:	20 e0       	ldi	r18, 0x00	; 0
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	40 e8       	ldi	r20, 0x80	; 128
    27b8:	5f e3       	ldi	r21, 0x3F	; 63
    27ba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27be:	88 23       	and	r24, r24
    27c0:	1c f4       	brge	.+6      	; 0x27c8 <sevenSegmentMinutsDisplay+0x20c>
		__ticks = 1;
    27c2:	81 e0       	ldi	r24, 0x01	; 1
    27c4:	88 8b       	std	Y+16, r24	; 0x10
    27c6:	91 c0       	rjmp	.+290    	; 0x28ea <sevenSegmentMinutsDisplay+0x32e>
	else if (__tmp > 255)
    27c8:	69 89       	ldd	r22, Y+17	; 0x11
    27ca:	7a 89       	ldd	r23, Y+18	; 0x12
    27cc:	8b 89       	ldd	r24, Y+19	; 0x13
    27ce:	9c 89       	ldd	r25, Y+20	; 0x14
    27d0:	20 e0       	ldi	r18, 0x00	; 0
    27d2:	30 e0       	ldi	r19, 0x00	; 0
    27d4:	4f e7       	ldi	r20, 0x7F	; 127
    27d6:	53 e4       	ldi	r21, 0x43	; 67
    27d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27dc:	18 16       	cp	r1, r24
    27de:	0c f0       	brlt	.+2      	; 0x27e2 <sevenSegmentMinutsDisplay+0x226>
    27e0:	7b c0       	rjmp	.+246    	; 0x28d8 <sevenSegmentMinutsDisplay+0x31c>
	{
		_delay_ms(__us / 1000.0);
    27e2:	6d 89       	ldd	r22, Y+21	; 0x15
    27e4:	7e 89       	ldd	r23, Y+22	; 0x16
    27e6:	8f 89       	ldd	r24, Y+23	; 0x17
    27e8:	98 8d       	ldd	r25, Y+24	; 0x18
    27ea:	20 e0       	ldi	r18, 0x00	; 0
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	4a e7       	ldi	r20, 0x7A	; 122
    27f0:	54 e4       	ldi	r21, 0x44	; 68
    27f2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    27f6:	dc 01       	movw	r26, r24
    27f8:	cb 01       	movw	r24, r22
    27fa:	8c 87       	std	Y+12, r24	; 0x0c
    27fc:	9d 87       	std	Y+13, r25	; 0x0d
    27fe:	ae 87       	std	Y+14, r26	; 0x0e
    2800:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2802:	6c 85       	ldd	r22, Y+12	; 0x0c
    2804:	7d 85       	ldd	r23, Y+13	; 0x0d
    2806:	8e 85       	ldd	r24, Y+14	; 0x0e
    2808:	9f 85       	ldd	r25, Y+15	; 0x0f
    280a:	20 e0       	ldi	r18, 0x00	; 0
    280c:	30 e0       	ldi	r19, 0x00	; 0
    280e:	4a ef       	ldi	r20, 0xFA	; 250
    2810:	54 e4       	ldi	r21, 0x44	; 68
    2812:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2816:	dc 01       	movw	r26, r24
    2818:	cb 01       	movw	r24, r22
    281a:	88 87       	std	Y+8, r24	; 0x08
    281c:	99 87       	std	Y+9, r25	; 0x09
    281e:	aa 87       	std	Y+10, r26	; 0x0a
    2820:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2822:	68 85       	ldd	r22, Y+8	; 0x08
    2824:	79 85       	ldd	r23, Y+9	; 0x09
    2826:	8a 85       	ldd	r24, Y+10	; 0x0a
    2828:	9b 85       	ldd	r25, Y+11	; 0x0b
    282a:	20 e0       	ldi	r18, 0x00	; 0
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	40 e8       	ldi	r20, 0x80	; 128
    2830:	5f e3       	ldi	r21, 0x3F	; 63
    2832:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2836:	88 23       	and	r24, r24
    2838:	2c f4       	brge	.+10     	; 0x2844 <sevenSegmentMinutsDisplay+0x288>
		__ticks = 1;
    283a:	81 e0       	ldi	r24, 0x01	; 1
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	9f 83       	std	Y+7, r25	; 0x07
    2840:	8e 83       	std	Y+6, r24	; 0x06
    2842:	3f c0       	rjmp	.+126    	; 0x28c2 <sevenSegmentMinutsDisplay+0x306>
	else if (__tmp > 65535)
    2844:	68 85       	ldd	r22, Y+8	; 0x08
    2846:	79 85       	ldd	r23, Y+9	; 0x09
    2848:	8a 85       	ldd	r24, Y+10	; 0x0a
    284a:	9b 85       	ldd	r25, Y+11	; 0x0b
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	3f ef       	ldi	r19, 0xFF	; 255
    2850:	4f e7       	ldi	r20, 0x7F	; 127
    2852:	57 e4       	ldi	r21, 0x47	; 71
    2854:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2858:	18 16       	cp	r1, r24
    285a:	4c f5       	brge	.+82     	; 0x28ae <sevenSegmentMinutsDisplay+0x2f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    285c:	6c 85       	ldd	r22, Y+12	; 0x0c
    285e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2860:	8e 85       	ldd	r24, Y+14	; 0x0e
    2862:	9f 85       	ldd	r25, Y+15	; 0x0f
    2864:	20 e0       	ldi	r18, 0x00	; 0
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	40 e2       	ldi	r20, 0x20	; 32
    286a:	51 e4       	ldi	r21, 0x41	; 65
    286c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2870:	dc 01       	movw	r26, r24
    2872:	cb 01       	movw	r24, r22
    2874:	bc 01       	movw	r22, r24
    2876:	cd 01       	movw	r24, r26
    2878:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    287c:	dc 01       	movw	r26, r24
    287e:	cb 01       	movw	r24, r22
    2880:	9f 83       	std	Y+7, r25	; 0x07
    2882:	8e 83       	std	Y+6, r24	; 0x06
    2884:	0f c0       	rjmp	.+30     	; 0x28a4 <sevenSegmentMinutsDisplay+0x2e8>
    2886:	88 ec       	ldi	r24, 0xC8	; 200
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	9d 83       	std	Y+5, r25	; 0x05
    288c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    288e:	8c 81       	ldd	r24, Y+4	; 0x04
    2890:	9d 81       	ldd	r25, Y+5	; 0x05
    2892:	01 97       	sbiw	r24, 0x01	; 1
    2894:	f1 f7       	brne	.-4      	; 0x2892 <sevenSegmentMinutsDisplay+0x2d6>
    2896:	9d 83       	std	Y+5, r25	; 0x05
    2898:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    289a:	8e 81       	ldd	r24, Y+6	; 0x06
    289c:	9f 81       	ldd	r25, Y+7	; 0x07
    289e:	01 97       	sbiw	r24, 0x01	; 1
    28a0:	9f 83       	std	Y+7, r25	; 0x07
    28a2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28a4:	8e 81       	ldd	r24, Y+6	; 0x06
    28a6:	9f 81       	ldd	r25, Y+7	; 0x07
    28a8:	00 97       	sbiw	r24, 0x00	; 0
    28aa:	69 f7       	brne	.-38     	; 0x2886 <sevenSegmentMinutsDisplay+0x2ca>
    28ac:	24 c0       	rjmp	.+72     	; 0x28f6 <sevenSegmentMinutsDisplay+0x33a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ae:	68 85       	ldd	r22, Y+8	; 0x08
    28b0:	79 85       	ldd	r23, Y+9	; 0x09
    28b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    28b4:	9b 85       	ldd	r25, Y+11	; 0x0b
    28b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ba:	dc 01       	movw	r26, r24
    28bc:	cb 01       	movw	r24, r22
    28be:	9f 83       	std	Y+7, r25	; 0x07
    28c0:	8e 83       	std	Y+6, r24	; 0x06
    28c2:	8e 81       	ldd	r24, Y+6	; 0x06
    28c4:	9f 81       	ldd	r25, Y+7	; 0x07
    28c6:	9b 83       	std	Y+3, r25	; 0x03
    28c8:	8a 83       	std	Y+2, r24	; 0x02
    28ca:	8a 81       	ldd	r24, Y+2	; 0x02
    28cc:	9b 81       	ldd	r25, Y+3	; 0x03
    28ce:	01 97       	sbiw	r24, 0x01	; 1
    28d0:	f1 f7       	brne	.-4      	; 0x28ce <sevenSegmentMinutsDisplay+0x312>
    28d2:	9b 83       	std	Y+3, r25	; 0x03
    28d4:	8a 83       	std	Y+2, r24	; 0x02
    28d6:	0f c0       	rjmp	.+30     	; 0x28f6 <sevenSegmentMinutsDisplay+0x33a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    28d8:	69 89       	ldd	r22, Y+17	; 0x11
    28da:	7a 89       	ldd	r23, Y+18	; 0x12
    28dc:	8b 89       	ldd	r24, Y+19	; 0x13
    28de:	9c 89       	ldd	r25, Y+20	; 0x14
    28e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e4:	dc 01       	movw	r26, r24
    28e6:	cb 01       	movw	r24, r22
    28e8:	88 8b       	std	Y+16, r24	; 0x10
    28ea:	88 89       	ldd	r24, Y+16	; 0x10
    28ec:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    28ee:	89 81       	ldd	r24, Y+1	; 0x01
    28f0:	8a 95       	dec	r24
    28f2:	f1 f7       	brne	.-4      	; 0x28f0 <sevenSegmentMinutsDisplay+0x334>
    28f4:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2);	// delay to changes in the 7-segment

	return STOP_WATCH_DONE;
    28f6:	80 e0       	ldi	r24, 0x00	; 0
}
    28f8:	e0 96       	adiw	r28, 0x30	; 48
    28fa:	0f b6       	in	r0, 0x3f	; 63
    28fc:	f8 94       	cli
    28fe:	de bf       	out	0x3e, r29	; 62
    2900:	0f be       	out	0x3f, r0	; 63
    2902:	cd bf       	out	0x3d, r28	; 61
    2904:	cf 91       	pop	r28
    2906:	df 91       	pop	r29
    2908:	08 95       	ret

0000290a <sevenSegmentHoursDisplay>:
 [Description]:	This function is responsible to count and display the hours on 7-Segment's
 [Args]:   void
 [Return]: EN_StopWatch_Error_t
 ---------------------------------------------------------------------------------------*/
EN_StopWatch_Error_t sevenSegmentHoursDisplay(void)
{
    290a:	df 93       	push	r29
    290c:	cf 93       	push	r28
    290e:	cd b7       	in	r28, 0x3d	; 61
    2910:	de b7       	in	r29, 0x3e	; 62
    2912:	e0 97       	sbiw	r28, 0x30	; 48
    2914:	0f b6       	in	r0, 0x3f	; 63
    2916:	f8 94       	cli
    2918:	de bf       	out	0x3e, r29	; 62
    291a:	0f be       	out	0x3f, r0	; 63
    291c:	cd bf       	out	0x3d, r28	; 61
	if(hoursCount == 12)
    291e:	80 91 77 01 	lds	r24, 0x0177
    2922:	8c 30       	cpi	r24, 0x0C	; 12
    2924:	11 f4       	brne	.+4      	; 0x292a <sevenSegmentHoursDisplay+0x20>
	{
		hoursCount = 0;
    2926:	10 92 77 01 	sts	0x0177, r1
	}

	/* Display The Hours on 7segment */
	sevenSegmentD5_EN();
    292a:	0e 94 e6 10 	call	0x21cc	; 0x21cc <sevenSegmentD5_EN>
	sevenSegmentOnesNum(hoursCount);
    292e:	80 91 77 01 	lds	r24, 0x0177
    2932:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <sevenSegmentOnesNum>
    2936:	80 e0       	ldi	r24, 0x00	; 0
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	a0 e0       	ldi	r26, 0x00	; 0
    293c:	b0 e4       	ldi	r27, 0x40	; 64
    293e:	8d a7       	std	Y+45, r24	; 0x2d
    2940:	9e a7       	std	Y+46, r25	; 0x2e
    2942:	af a7       	std	Y+47, r26	; 0x2f
    2944:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2946:	6d a5       	ldd	r22, Y+45	; 0x2d
    2948:	7e a5       	ldd	r23, Y+46	; 0x2e
    294a:	8f a5       	ldd	r24, Y+47	; 0x2f
    294c:	98 a9       	ldd	r25, Y+48	; 0x30
    294e:	2b ea       	ldi	r18, 0xAB	; 171
    2950:	3a ea       	ldi	r19, 0xAA	; 170
    2952:	4a e2       	ldi	r20, 0x2A	; 42
    2954:	50 e4       	ldi	r21, 0x40	; 64
    2956:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    295a:	dc 01       	movw	r26, r24
    295c:	cb 01       	movw	r24, r22
    295e:	89 a7       	std	Y+41, r24	; 0x29
    2960:	9a a7       	std	Y+42, r25	; 0x2a
    2962:	ab a7       	std	Y+43, r26	; 0x2b
    2964:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2966:	69 a5       	ldd	r22, Y+41	; 0x29
    2968:	7a a5       	ldd	r23, Y+42	; 0x2a
    296a:	8b a5       	ldd	r24, Y+43	; 0x2b
    296c:	9c a5       	ldd	r25, Y+44	; 0x2c
    296e:	20 e0       	ldi	r18, 0x00	; 0
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	40 e8       	ldi	r20, 0x80	; 128
    2974:	5f e3       	ldi	r21, 0x3F	; 63
    2976:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    297a:	88 23       	and	r24, r24
    297c:	1c f4       	brge	.+6      	; 0x2984 <sevenSegmentHoursDisplay+0x7a>
		__ticks = 1;
    297e:	81 e0       	ldi	r24, 0x01	; 1
    2980:	88 a7       	std	Y+40, r24	; 0x28
    2982:	91 c0       	rjmp	.+290    	; 0x2aa6 <sevenSegmentHoursDisplay+0x19c>
	else if (__tmp > 255)
    2984:	69 a5       	ldd	r22, Y+41	; 0x29
    2986:	7a a5       	ldd	r23, Y+42	; 0x2a
    2988:	8b a5       	ldd	r24, Y+43	; 0x2b
    298a:	9c a5       	ldd	r25, Y+44	; 0x2c
    298c:	20 e0       	ldi	r18, 0x00	; 0
    298e:	30 e0       	ldi	r19, 0x00	; 0
    2990:	4f e7       	ldi	r20, 0x7F	; 127
    2992:	53 e4       	ldi	r21, 0x43	; 67
    2994:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2998:	18 16       	cp	r1, r24
    299a:	0c f0       	brlt	.+2      	; 0x299e <sevenSegmentHoursDisplay+0x94>
    299c:	7b c0       	rjmp	.+246    	; 0x2a94 <sevenSegmentHoursDisplay+0x18a>
	{
		_delay_ms(__us / 1000.0);
    299e:	6d a5       	ldd	r22, Y+45	; 0x2d
    29a0:	7e a5       	ldd	r23, Y+46	; 0x2e
    29a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    29a4:	98 a9       	ldd	r25, Y+48	; 0x30
    29a6:	20 e0       	ldi	r18, 0x00	; 0
    29a8:	30 e0       	ldi	r19, 0x00	; 0
    29aa:	4a e7       	ldi	r20, 0x7A	; 122
    29ac:	54 e4       	ldi	r21, 0x44	; 68
    29ae:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    29b2:	dc 01       	movw	r26, r24
    29b4:	cb 01       	movw	r24, r22
    29b6:	8c a3       	std	Y+36, r24	; 0x24
    29b8:	9d a3       	std	Y+37, r25	; 0x25
    29ba:	ae a3       	std	Y+38, r26	; 0x26
    29bc:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29be:	6c a1       	ldd	r22, Y+36	; 0x24
    29c0:	7d a1       	ldd	r23, Y+37	; 0x25
    29c2:	8e a1       	ldd	r24, Y+38	; 0x26
    29c4:	9f a1       	ldd	r25, Y+39	; 0x27
    29c6:	20 e0       	ldi	r18, 0x00	; 0
    29c8:	30 e0       	ldi	r19, 0x00	; 0
    29ca:	4a ef       	ldi	r20, 0xFA	; 250
    29cc:	54 e4       	ldi	r21, 0x44	; 68
    29ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d2:	dc 01       	movw	r26, r24
    29d4:	cb 01       	movw	r24, r22
    29d6:	88 a3       	std	Y+32, r24	; 0x20
    29d8:	99 a3       	std	Y+33, r25	; 0x21
    29da:	aa a3       	std	Y+34, r26	; 0x22
    29dc:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    29de:	68 a1       	ldd	r22, Y+32	; 0x20
    29e0:	79 a1       	ldd	r23, Y+33	; 0x21
    29e2:	8a a1       	ldd	r24, Y+34	; 0x22
    29e4:	9b a1       	ldd	r25, Y+35	; 0x23
    29e6:	20 e0       	ldi	r18, 0x00	; 0
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	40 e8       	ldi	r20, 0x80	; 128
    29ec:	5f e3       	ldi	r21, 0x3F	; 63
    29ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29f2:	88 23       	and	r24, r24
    29f4:	2c f4       	brge	.+10     	; 0x2a00 <sevenSegmentHoursDisplay+0xf6>
		__ticks = 1;
    29f6:	81 e0       	ldi	r24, 0x01	; 1
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	9f 8f       	std	Y+31, r25	; 0x1f
    29fc:	8e 8f       	std	Y+30, r24	; 0x1e
    29fe:	3f c0       	rjmp	.+126    	; 0x2a7e <sevenSegmentHoursDisplay+0x174>
	else if (__tmp > 65535)
    2a00:	68 a1       	ldd	r22, Y+32	; 0x20
    2a02:	79 a1       	ldd	r23, Y+33	; 0x21
    2a04:	8a a1       	ldd	r24, Y+34	; 0x22
    2a06:	9b a1       	ldd	r25, Y+35	; 0x23
    2a08:	20 e0       	ldi	r18, 0x00	; 0
    2a0a:	3f ef       	ldi	r19, 0xFF	; 255
    2a0c:	4f e7       	ldi	r20, 0x7F	; 127
    2a0e:	57 e4       	ldi	r21, 0x47	; 71
    2a10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a14:	18 16       	cp	r1, r24
    2a16:	4c f5       	brge	.+82     	; 0x2a6a <sevenSegmentHoursDisplay+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a18:	6c a1       	ldd	r22, Y+36	; 0x24
    2a1a:	7d a1       	ldd	r23, Y+37	; 0x25
    2a1c:	8e a1       	ldd	r24, Y+38	; 0x26
    2a1e:	9f a1       	ldd	r25, Y+39	; 0x27
    2a20:	20 e0       	ldi	r18, 0x00	; 0
    2a22:	30 e0       	ldi	r19, 0x00	; 0
    2a24:	40 e2       	ldi	r20, 0x20	; 32
    2a26:	51 e4       	ldi	r21, 0x41	; 65
    2a28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a2c:	dc 01       	movw	r26, r24
    2a2e:	cb 01       	movw	r24, r22
    2a30:	bc 01       	movw	r22, r24
    2a32:	cd 01       	movw	r24, r26
    2a34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a38:	dc 01       	movw	r26, r24
    2a3a:	cb 01       	movw	r24, r22
    2a3c:	9f 8f       	std	Y+31, r25	; 0x1f
    2a3e:	8e 8f       	std	Y+30, r24	; 0x1e
    2a40:	0f c0       	rjmp	.+30     	; 0x2a60 <sevenSegmentHoursDisplay+0x156>
    2a42:	88 ec       	ldi	r24, 0xC8	; 200
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	9d 8f       	std	Y+29, r25	; 0x1d
    2a48:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a4a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2a4c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2a4e:	01 97       	sbiw	r24, 0x01	; 1
    2a50:	f1 f7       	brne	.-4      	; 0x2a4e <sevenSegmentHoursDisplay+0x144>
    2a52:	9d 8f       	std	Y+29, r25	; 0x1d
    2a54:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a56:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a58:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2a5a:	01 97       	sbiw	r24, 0x01	; 1
    2a5c:	9f 8f       	std	Y+31, r25	; 0x1f
    2a5e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a60:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a62:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2a64:	00 97       	sbiw	r24, 0x00	; 0
    2a66:	69 f7       	brne	.-38     	; 0x2a42 <sevenSegmentHoursDisplay+0x138>
    2a68:	24 c0       	rjmp	.+72     	; 0x2ab2 <sevenSegmentHoursDisplay+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a6a:	68 a1       	ldd	r22, Y+32	; 0x20
    2a6c:	79 a1       	ldd	r23, Y+33	; 0x21
    2a6e:	8a a1       	ldd	r24, Y+34	; 0x22
    2a70:	9b a1       	ldd	r25, Y+35	; 0x23
    2a72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a76:	dc 01       	movw	r26, r24
    2a78:	cb 01       	movw	r24, r22
    2a7a:	9f 8f       	std	Y+31, r25	; 0x1f
    2a7c:	8e 8f       	std	Y+30, r24	; 0x1e
    2a7e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a80:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2a82:	9b 8f       	std	Y+27, r25	; 0x1b
    2a84:	8a 8f       	std	Y+26, r24	; 0x1a
    2a86:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2a88:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2a8a:	01 97       	sbiw	r24, 0x01	; 1
    2a8c:	f1 f7       	brne	.-4      	; 0x2a8a <sevenSegmentHoursDisplay+0x180>
    2a8e:	9b 8f       	std	Y+27, r25	; 0x1b
    2a90:	8a 8f       	std	Y+26, r24	; 0x1a
    2a92:	0f c0       	rjmp	.+30     	; 0x2ab2 <sevenSegmentHoursDisplay+0x1a8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a94:	69 a5       	ldd	r22, Y+41	; 0x29
    2a96:	7a a5       	ldd	r23, Y+42	; 0x2a
    2a98:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a9a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa0:	dc 01       	movw	r26, r24
    2aa2:	cb 01       	movw	r24, r22
    2aa4:	88 a7       	std	Y+40, r24	; 0x28
    2aa6:	88 a5       	ldd	r24, Y+40	; 0x28
    2aa8:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2aaa:	89 8d       	ldd	r24, Y+25	; 0x19
    2aac:	8a 95       	dec	r24
    2aae:	f1 f7       	brne	.-4      	; 0x2aac <sevenSegmentHoursDisplay+0x1a2>
    2ab0:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(2);	// delay to changes in the 7-segment

	sevenSegmentD6_EN();
    2ab2:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <sevenSegmentD6_EN>
	sevenSegmentTensNum(hoursCount);
    2ab6:	80 91 77 01 	lds	r24, 0x0177
    2aba:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <sevenSegmentTensNum>
    2abe:	80 e0       	ldi	r24, 0x00	; 0
    2ac0:	90 e0       	ldi	r25, 0x00	; 0
    2ac2:	a0 e0       	ldi	r26, 0x00	; 0
    2ac4:	b0 e4       	ldi	r27, 0x40	; 64
    2ac6:	8d 8b       	std	Y+21, r24	; 0x15
    2ac8:	9e 8b       	std	Y+22, r25	; 0x16
    2aca:	af 8b       	std	Y+23, r26	; 0x17
    2acc:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2ace:	6d 89       	ldd	r22, Y+21	; 0x15
    2ad0:	7e 89       	ldd	r23, Y+22	; 0x16
    2ad2:	8f 89       	ldd	r24, Y+23	; 0x17
    2ad4:	98 8d       	ldd	r25, Y+24	; 0x18
    2ad6:	2b ea       	ldi	r18, 0xAB	; 171
    2ad8:	3a ea       	ldi	r19, 0xAA	; 170
    2ada:	4a e2       	ldi	r20, 0x2A	; 42
    2adc:	50 e4       	ldi	r21, 0x40	; 64
    2ade:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae2:	dc 01       	movw	r26, r24
    2ae4:	cb 01       	movw	r24, r22
    2ae6:	89 8b       	std	Y+17, r24	; 0x11
    2ae8:	9a 8b       	std	Y+18, r25	; 0x12
    2aea:	ab 8b       	std	Y+19, r26	; 0x13
    2aec:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2aee:	69 89       	ldd	r22, Y+17	; 0x11
    2af0:	7a 89       	ldd	r23, Y+18	; 0x12
    2af2:	8b 89       	ldd	r24, Y+19	; 0x13
    2af4:	9c 89       	ldd	r25, Y+20	; 0x14
    2af6:	20 e0       	ldi	r18, 0x00	; 0
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	40 e8       	ldi	r20, 0x80	; 128
    2afc:	5f e3       	ldi	r21, 0x3F	; 63
    2afe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b02:	88 23       	and	r24, r24
    2b04:	1c f4       	brge	.+6      	; 0x2b0c <sevenSegmentHoursDisplay+0x202>
		__ticks = 1;
    2b06:	81 e0       	ldi	r24, 0x01	; 1
    2b08:	88 8b       	std	Y+16, r24	; 0x10
    2b0a:	91 c0       	rjmp	.+290    	; 0x2c2e <sevenSegmentHoursDisplay+0x324>
	else if (__tmp > 255)
    2b0c:	69 89       	ldd	r22, Y+17	; 0x11
    2b0e:	7a 89       	ldd	r23, Y+18	; 0x12
    2b10:	8b 89       	ldd	r24, Y+19	; 0x13
    2b12:	9c 89       	ldd	r25, Y+20	; 0x14
    2b14:	20 e0       	ldi	r18, 0x00	; 0
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	4f e7       	ldi	r20, 0x7F	; 127
    2b1a:	53 e4       	ldi	r21, 0x43	; 67
    2b1c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b20:	18 16       	cp	r1, r24
    2b22:	0c f0       	brlt	.+2      	; 0x2b26 <sevenSegmentHoursDisplay+0x21c>
    2b24:	7b c0       	rjmp	.+246    	; 0x2c1c <sevenSegmentHoursDisplay+0x312>
	{
		_delay_ms(__us / 1000.0);
    2b26:	6d 89       	ldd	r22, Y+21	; 0x15
    2b28:	7e 89       	ldd	r23, Y+22	; 0x16
    2b2a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b2c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b2e:	20 e0       	ldi	r18, 0x00	; 0
    2b30:	30 e0       	ldi	r19, 0x00	; 0
    2b32:	4a e7       	ldi	r20, 0x7A	; 122
    2b34:	54 e4       	ldi	r21, 0x44	; 68
    2b36:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b3a:	dc 01       	movw	r26, r24
    2b3c:	cb 01       	movw	r24, r22
    2b3e:	8c 87       	std	Y+12, r24	; 0x0c
    2b40:	9d 87       	std	Y+13, r25	; 0x0d
    2b42:	ae 87       	std	Y+14, r26	; 0x0e
    2b44:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b46:	6c 85       	ldd	r22, Y+12	; 0x0c
    2b48:	7d 85       	ldd	r23, Y+13	; 0x0d
    2b4a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b4c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b4e:	20 e0       	ldi	r18, 0x00	; 0
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	4a ef       	ldi	r20, 0xFA	; 250
    2b54:	54 e4       	ldi	r21, 0x44	; 68
    2b56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b5a:	dc 01       	movw	r26, r24
    2b5c:	cb 01       	movw	r24, r22
    2b5e:	88 87       	std	Y+8, r24	; 0x08
    2b60:	99 87       	std	Y+9, r25	; 0x09
    2b62:	aa 87       	std	Y+10, r26	; 0x0a
    2b64:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2b66:	68 85       	ldd	r22, Y+8	; 0x08
    2b68:	79 85       	ldd	r23, Y+9	; 0x09
    2b6a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b6c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b6e:	20 e0       	ldi	r18, 0x00	; 0
    2b70:	30 e0       	ldi	r19, 0x00	; 0
    2b72:	40 e8       	ldi	r20, 0x80	; 128
    2b74:	5f e3       	ldi	r21, 0x3F	; 63
    2b76:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b7a:	88 23       	and	r24, r24
    2b7c:	2c f4       	brge	.+10     	; 0x2b88 <sevenSegmentHoursDisplay+0x27e>
		__ticks = 1;
    2b7e:	81 e0       	ldi	r24, 0x01	; 1
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	9f 83       	std	Y+7, r25	; 0x07
    2b84:	8e 83       	std	Y+6, r24	; 0x06
    2b86:	3f c0       	rjmp	.+126    	; 0x2c06 <sevenSegmentHoursDisplay+0x2fc>
	else if (__tmp > 65535)
    2b88:	68 85       	ldd	r22, Y+8	; 0x08
    2b8a:	79 85       	ldd	r23, Y+9	; 0x09
    2b8c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b8e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b90:	20 e0       	ldi	r18, 0x00	; 0
    2b92:	3f ef       	ldi	r19, 0xFF	; 255
    2b94:	4f e7       	ldi	r20, 0x7F	; 127
    2b96:	57 e4       	ldi	r21, 0x47	; 71
    2b98:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b9c:	18 16       	cp	r1, r24
    2b9e:	4c f5       	brge	.+82     	; 0x2bf2 <sevenSegmentHoursDisplay+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ba0:	6c 85       	ldd	r22, Y+12	; 0x0c
    2ba2:	7d 85       	ldd	r23, Y+13	; 0x0d
    2ba4:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ba6:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ba8:	20 e0       	ldi	r18, 0x00	; 0
    2baa:	30 e0       	ldi	r19, 0x00	; 0
    2bac:	40 e2       	ldi	r20, 0x20	; 32
    2bae:	51 e4       	ldi	r21, 0x41	; 65
    2bb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb4:	dc 01       	movw	r26, r24
    2bb6:	cb 01       	movw	r24, r22
    2bb8:	bc 01       	movw	r22, r24
    2bba:	cd 01       	movw	r24, r26
    2bbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc0:	dc 01       	movw	r26, r24
    2bc2:	cb 01       	movw	r24, r22
    2bc4:	9f 83       	std	Y+7, r25	; 0x07
    2bc6:	8e 83       	std	Y+6, r24	; 0x06
    2bc8:	0f c0       	rjmp	.+30     	; 0x2be8 <sevenSegmentHoursDisplay+0x2de>
    2bca:	88 ec       	ldi	r24, 0xC8	; 200
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	9d 83       	std	Y+5, r25	; 0x05
    2bd0:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2bd2:	8c 81       	ldd	r24, Y+4	; 0x04
    2bd4:	9d 81       	ldd	r25, Y+5	; 0x05
    2bd6:	01 97       	sbiw	r24, 0x01	; 1
    2bd8:	f1 f7       	brne	.-4      	; 0x2bd6 <sevenSegmentHoursDisplay+0x2cc>
    2bda:	9d 83       	std	Y+5, r25	; 0x05
    2bdc:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bde:	8e 81       	ldd	r24, Y+6	; 0x06
    2be0:	9f 81       	ldd	r25, Y+7	; 0x07
    2be2:	01 97       	sbiw	r24, 0x01	; 1
    2be4:	9f 83       	std	Y+7, r25	; 0x07
    2be6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2be8:	8e 81       	ldd	r24, Y+6	; 0x06
    2bea:	9f 81       	ldd	r25, Y+7	; 0x07
    2bec:	00 97       	sbiw	r24, 0x00	; 0
    2bee:	69 f7       	brne	.-38     	; 0x2bca <sevenSegmentHoursDisplay+0x2c0>
    2bf0:	24 c0       	rjmp	.+72     	; 0x2c3a <sevenSegmentHoursDisplay+0x330>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bf2:	68 85       	ldd	r22, Y+8	; 0x08
    2bf4:	79 85       	ldd	r23, Y+9	; 0x09
    2bf6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bf8:	9b 85       	ldd	r25, Y+11	; 0x0b
    2bfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bfe:	dc 01       	movw	r26, r24
    2c00:	cb 01       	movw	r24, r22
    2c02:	9f 83       	std	Y+7, r25	; 0x07
    2c04:	8e 83       	std	Y+6, r24	; 0x06
    2c06:	8e 81       	ldd	r24, Y+6	; 0x06
    2c08:	9f 81       	ldd	r25, Y+7	; 0x07
    2c0a:	9b 83       	std	Y+3, r25	; 0x03
    2c0c:	8a 83       	std	Y+2, r24	; 0x02
    2c0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c10:	9b 81       	ldd	r25, Y+3	; 0x03
    2c12:	01 97       	sbiw	r24, 0x01	; 1
    2c14:	f1 f7       	brne	.-4      	; 0x2c12 <sevenSegmentHoursDisplay+0x308>
    2c16:	9b 83       	std	Y+3, r25	; 0x03
    2c18:	8a 83       	std	Y+2, r24	; 0x02
    2c1a:	0f c0       	rjmp	.+30     	; 0x2c3a <sevenSegmentHoursDisplay+0x330>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2c1c:	69 89       	ldd	r22, Y+17	; 0x11
    2c1e:	7a 89       	ldd	r23, Y+18	; 0x12
    2c20:	8b 89       	ldd	r24, Y+19	; 0x13
    2c22:	9c 89       	ldd	r25, Y+20	; 0x14
    2c24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c28:	dc 01       	movw	r26, r24
    2c2a:	cb 01       	movw	r24, r22
    2c2c:	88 8b       	std	Y+16, r24	; 0x10
    2c2e:	88 89       	ldd	r24, Y+16	; 0x10
    2c30:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c32:	89 81       	ldd	r24, Y+1	; 0x01
    2c34:	8a 95       	dec	r24
    2c36:	f1 f7       	brne	.-4      	; 0x2c34 <sevenSegmentHoursDisplay+0x32a>
    2c38:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(2);	// delay to changes in the 7-segment

	return STOP_WATCH_DONE;
    2c3a:	80 e0       	ldi	r24, 0x00	; 0
}
    2c3c:	e0 96       	adiw	r28, 0x30	; 48
    2c3e:	0f b6       	in	r0, 0x3f	; 63
    2c40:	f8 94       	cli
    2c42:	de bf       	out	0x3e, r29	; 62
    2c44:	0f be       	out	0x3f, r0	; 63
    2c46:	cd bf       	out	0x3d, r28	; 61
    2c48:	cf 91       	pop	r28
    2c4a:	df 91       	pop	r29
    2c4c:	08 95       	ret

00002c4e <sevenSegmentOnesNum>:



/*-------------------------------Private Functions Definitions--------------------------------*/
	void sevenSegmentOnesNum(uint8 num)
{
    2c4e:	df 93       	push	r29
    2c50:	cf 93       	push	r28
    2c52:	00 d0       	rcall	.+0      	; 0x2c54 <sevenSegmentOnesNum+0x6>
    2c54:	0f 92       	push	r0
    2c56:	cd b7       	in	r28, 0x3d	; 61
    2c58:	de b7       	in	r29, 0x3e	; 62
    2c5a:	89 83       	std	Y+1, r24	; 0x01
	switch((num%10))
    2c5c:	89 81       	ldd	r24, Y+1	; 0x01
    2c5e:	9a e0       	ldi	r25, 0x0A	; 10
    2c60:	69 2f       	mov	r22, r25
    2c62:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__udivmodqi4>
    2c66:	89 2f       	mov	r24, r25
    2c68:	28 2f       	mov	r18, r24
    2c6a:	30 e0       	ldi	r19, 0x00	; 0
    2c6c:	3b 83       	std	Y+3, r19	; 0x03
    2c6e:	2a 83       	std	Y+2, r18	; 0x02
    2c70:	8a 81       	ldd	r24, Y+2	; 0x02
    2c72:	9b 81       	ldd	r25, Y+3	; 0x03
    2c74:	84 30       	cpi	r24, 0x04	; 4
    2c76:	91 05       	cpc	r25, r1
    2c78:	09 f4       	brne	.+2      	; 0x2c7c <sevenSegmentOnesNum+0x2e>
    2c7a:	4f c0       	rjmp	.+158    	; 0x2d1a <sevenSegmentOnesNum+0xcc>
    2c7c:	2a 81       	ldd	r18, Y+2	; 0x02
    2c7e:	3b 81       	ldd	r19, Y+3	; 0x03
    2c80:	25 30       	cpi	r18, 0x05	; 5
    2c82:	31 05       	cpc	r19, r1
    2c84:	d4 f4       	brge	.+52     	; 0x2cba <sevenSegmentOnesNum+0x6c>
    2c86:	8a 81       	ldd	r24, Y+2	; 0x02
    2c88:	9b 81       	ldd	r25, Y+3	; 0x03
    2c8a:	81 30       	cpi	r24, 0x01	; 1
    2c8c:	91 05       	cpc	r25, r1
    2c8e:	c9 f1       	breq	.+114    	; 0x2d02 <sevenSegmentOnesNum+0xb4>
    2c90:	2a 81       	ldd	r18, Y+2	; 0x02
    2c92:	3b 81       	ldd	r19, Y+3	; 0x03
    2c94:	22 30       	cpi	r18, 0x02	; 2
    2c96:	31 05       	cpc	r19, r1
    2c98:	2c f4       	brge	.+10     	; 0x2ca4 <sevenSegmentOnesNum+0x56>
    2c9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c9c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c9e:	00 97       	sbiw	r24, 0x00	; 0
    2ca0:	61 f1       	breq	.+88     	; 0x2cfa <sevenSegmentOnesNum+0xac>
    2ca2:	52 c0       	rjmp	.+164    	; 0x2d48 <sevenSegmentOnesNum+0xfa>
    2ca4:	2a 81       	ldd	r18, Y+2	; 0x02
    2ca6:	3b 81       	ldd	r19, Y+3	; 0x03
    2ca8:	22 30       	cpi	r18, 0x02	; 2
    2caa:	31 05       	cpc	r19, r1
    2cac:	71 f1       	breq	.+92     	; 0x2d0a <sevenSegmentOnesNum+0xbc>
    2cae:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb0:	9b 81       	ldd	r25, Y+3	; 0x03
    2cb2:	83 30       	cpi	r24, 0x03	; 3
    2cb4:	91 05       	cpc	r25, r1
    2cb6:	69 f1       	breq	.+90     	; 0x2d12 <sevenSegmentOnesNum+0xc4>
    2cb8:	47 c0       	rjmp	.+142    	; 0x2d48 <sevenSegmentOnesNum+0xfa>
    2cba:	2a 81       	ldd	r18, Y+2	; 0x02
    2cbc:	3b 81       	ldd	r19, Y+3	; 0x03
    2cbe:	27 30       	cpi	r18, 0x07	; 7
    2cc0:	31 05       	cpc	r19, r1
    2cc2:	b9 f1       	breq	.+110    	; 0x2d32 <sevenSegmentOnesNum+0xe4>
    2cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc6:	9b 81       	ldd	r25, Y+3	; 0x03
    2cc8:	88 30       	cpi	r24, 0x08	; 8
    2cca:	91 05       	cpc	r25, r1
    2ccc:	5c f4       	brge	.+22     	; 0x2ce4 <sevenSegmentOnesNum+0x96>
    2cce:	2a 81       	ldd	r18, Y+2	; 0x02
    2cd0:	3b 81       	ldd	r19, Y+3	; 0x03
    2cd2:	25 30       	cpi	r18, 0x05	; 5
    2cd4:	31 05       	cpc	r19, r1
    2cd6:	29 f1       	breq	.+74     	; 0x2d22 <sevenSegmentOnesNum+0xd4>
    2cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cda:	9b 81       	ldd	r25, Y+3	; 0x03
    2cdc:	86 30       	cpi	r24, 0x06	; 6
    2cde:	91 05       	cpc	r25, r1
    2ce0:	21 f1       	breq	.+72     	; 0x2d2a <sevenSegmentOnesNum+0xdc>
    2ce2:	32 c0       	rjmp	.+100    	; 0x2d48 <sevenSegmentOnesNum+0xfa>
    2ce4:	2a 81       	ldd	r18, Y+2	; 0x02
    2ce6:	3b 81       	ldd	r19, Y+3	; 0x03
    2ce8:	28 30       	cpi	r18, 0x08	; 8
    2cea:	31 05       	cpc	r19, r1
    2cec:	31 f1       	breq	.+76     	; 0x2d3a <sevenSegmentOnesNum+0xec>
    2cee:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf0:	9b 81       	ldd	r25, Y+3	; 0x03
    2cf2:	89 30       	cpi	r24, 0x09	; 9
    2cf4:	91 05       	cpc	r25, r1
    2cf6:	29 f1       	breq	.+74     	; 0x2d42 <sevenSegmentOnesNum+0xf4>
    2cf8:	27 c0       	rjmp	.+78     	; 0x2d48 <sevenSegmentOnesNum+0xfa>
	{
	case 0:
		sevenSegmenDisplay(0);
    2cfa:	80 e0       	ldi	r24, 0x00	; 0
    2cfc:	0e 94 ab 10 	call	0x2156	; 0x2156 <sevenSegmenDisplay>
    2d00:	23 c0       	rjmp	.+70     	; 0x2d48 <sevenSegmentOnesNum+0xfa>
		break;
	case 1:
		sevenSegmenDisplay(1);
    2d02:	81 e0       	ldi	r24, 0x01	; 1
    2d04:	0e 94 ab 10 	call	0x2156	; 0x2156 <sevenSegmenDisplay>
    2d08:	1f c0       	rjmp	.+62     	; 0x2d48 <sevenSegmentOnesNum+0xfa>
		break;
	case 2:
		sevenSegmenDisplay(2);
    2d0a:	82 e0       	ldi	r24, 0x02	; 2
    2d0c:	0e 94 ab 10 	call	0x2156	; 0x2156 <sevenSegmenDisplay>
    2d10:	1b c0       	rjmp	.+54     	; 0x2d48 <sevenSegmentOnesNum+0xfa>
		break;
	case 3:
		sevenSegmenDisplay(3);
    2d12:	83 e0       	ldi	r24, 0x03	; 3
    2d14:	0e 94 ab 10 	call	0x2156	; 0x2156 <sevenSegmenDisplay>
    2d18:	17 c0       	rjmp	.+46     	; 0x2d48 <sevenSegmentOnesNum+0xfa>
		break;
	case 4:
		sevenSegmenDisplay(4);
    2d1a:	84 e0       	ldi	r24, 0x04	; 4
    2d1c:	0e 94 ab 10 	call	0x2156	; 0x2156 <sevenSegmenDisplay>
    2d20:	13 c0       	rjmp	.+38     	; 0x2d48 <sevenSegmentOnesNum+0xfa>
		break;
	case 5:
		sevenSegmenDisplay(5);
    2d22:	85 e0       	ldi	r24, 0x05	; 5
    2d24:	0e 94 ab 10 	call	0x2156	; 0x2156 <sevenSegmenDisplay>
    2d28:	0f c0       	rjmp	.+30     	; 0x2d48 <sevenSegmentOnesNum+0xfa>
		break;
	case 6:
		sevenSegmenDisplay(6);
    2d2a:	86 e0       	ldi	r24, 0x06	; 6
    2d2c:	0e 94 ab 10 	call	0x2156	; 0x2156 <sevenSegmenDisplay>
    2d30:	0b c0       	rjmp	.+22     	; 0x2d48 <sevenSegmentOnesNum+0xfa>
		break;
	case 7:
		sevenSegmenDisplay(7);
    2d32:	87 e0       	ldi	r24, 0x07	; 7
    2d34:	0e 94 ab 10 	call	0x2156	; 0x2156 <sevenSegmenDisplay>
    2d38:	07 c0       	rjmp	.+14     	; 0x2d48 <sevenSegmentOnesNum+0xfa>
		break;
	case 8:
		sevenSegmenDisplay(8);
    2d3a:	88 e0       	ldi	r24, 0x08	; 8
    2d3c:	0e 94 ab 10 	call	0x2156	; 0x2156 <sevenSegmenDisplay>
    2d40:	03 c0       	rjmp	.+6      	; 0x2d48 <sevenSegmentOnesNum+0xfa>
		break;
	case 9:
		sevenSegmenDisplay(9);
    2d42:	89 e0       	ldi	r24, 0x09	; 9
    2d44:	0e 94 ab 10 	call	0x2156	; 0x2156 <sevenSegmenDisplay>
		break;
	}

}
    2d48:	0f 90       	pop	r0
    2d4a:	0f 90       	pop	r0
    2d4c:	0f 90       	pop	r0
    2d4e:	cf 91       	pop	r28
    2d50:	df 91       	pop	r29
    2d52:	08 95       	ret

00002d54 <sevenSegmentTensNum>:


void sevenSegmentTensNum(uint8 num)
{
    2d54:	df 93       	push	r29
    2d56:	cf 93       	push	r28
    2d58:	00 d0       	rcall	.+0      	; 0x2d5a <sevenSegmentTensNum+0x6>
    2d5a:	0f 92       	push	r0
    2d5c:	cd b7       	in	r28, 0x3d	; 61
    2d5e:	de b7       	in	r29, 0x3e	; 62
    2d60:	89 83       	std	Y+1, r24	; 0x01
	switch((num/10))
    2d62:	89 81       	ldd	r24, Y+1	; 0x01
    2d64:	9a e0       	ldi	r25, 0x0A	; 10
    2d66:	69 2f       	mov	r22, r25
    2d68:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__udivmodqi4>
    2d6c:	28 2f       	mov	r18, r24
    2d6e:	30 e0       	ldi	r19, 0x00	; 0
    2d70:	3b 83       	std	Y+3, r19	; 0x03
    2d72:	2a 83       	std	Y+2, r18	; 0x02
    2d74:	8a 81       	ldd	r24, Y+2	; 0x02
    2d76:	9b 81       	ldd	r25, Y+3	; 0x03
    2d78:	84 30       	cpi	r24, 0x04	; 4
    2d7a:	91 05       	cpc	r25, r1
    2d7c:	09 f4       	brne	.+2      	; 0x2d80 <sevenSegmentTensNum+0x2c>
    2d7e:	4f c0       	rjmp	.+158    	; 0x2e1e <sevenSegmentTensNum+0xca>
    2d80:	2a 81       	ldd	r18, Y+2	; 0x02
    2d82:	3b 81       	ldd	r19, Y+3	; 0x03
    2d84:	25 30       	cpi	r18, 0x05	; 5
    2d86:	31 05       	cpc	r19, r1
    2d88:	d4 f4       	brge	.+52     	; 0x2dbe <sevenSegmentTensNum+0x6a>
    2d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d8c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d8e:	81 30       	cpi	r24, 0x01	; 1
    2d90:	91 05       	cpc	r25, r1
    2d92:	c9 f1       	breq	.+114    	; 0x2e06 <sevenSegmentTensNum+0xb2>
    2d94:	2a 81       	ldd	r18, Y+2	; 0x02
    2d96:	3b 81       	ldd	r19, Y+3	; 0x03
    2d98:	22 30       	cpi	r18, 0x02	; 2
    2d9a:	31 05       	cpc	r19, r1
    2d9c:	2c f4       	brge	.+10     	; 0x2da8 <sevenSegmentTensNum+0x54>
    2d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2da0:	9b 81       	ldd	r25, Y+3	; 0x03
    2da2:	00 97       	sbiw	r24, 0x00	; 0
    2da4:	61 f1       	breq	.+88     	; 0x2dfe <sevenSegmentTensNum+0xaa>
    2da6:	52 c0       	rjmp	.+164    	; 0x2e4c <sevenSegmentTensNum+0xf8>
    2da8:	2a 81       	ldd	r18, Y+2	; 0x02
    2daa:	3b 81       	ldd	r19, Y+3	; 0x03
    2dac:	22 30       	cpi	r18, 0x02	; 2
    2dae:	31 05       	cpc	r19, r1
    2db0:	71 f1       	breq	.+92     	; 0x2e0e <sevenSegmentTensNum+0xba>
    2db2:	8a 81       	ldd	r24, Y+2	; 0x02
    2db4:	9b 81       	ldd	r25, Y+3	; 0x03
    2db6:	83 30       	cpi	r24, 0x03	; 3
    2db8:	91 05       	cpc	r25, r1
    2dba:	69 f1       	breq	.+90     	; 0x2e16 <sevenSegmentTensNum+0xc2>
    2dbc:	47 c0       	rjmp	.+142    	; 0x2e4c <sevenSegmentTensNum+0xf8>
    2dbe:	2a 81       	ldd	r18, Y+2	; 0x02
    2dc0:	3b 81       	ldd	r19, Y+3	; 0x03
    2dc2:	27 30       	cpi	r18, 0x07	; 7
    2dc4:	31 05       	cpc	r19, r1
    2dc6:	b9 f1       	breq	.+110    	; 0x2e36 <sevenSegmentTensNum+0xe2>
    2dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dca:	9b 81       	ldd	r25, Y+3	; 0x03
    2dcc:	88 30       	cpi	r24, 0x08	; 8
    2dce:	91 05       	cpc	r25, r1
    2dd0:	5c f4       	brge	.+22     	; 0x2de8 <sevenSegmentTensNum+0x94>
    2dd2:	2a 81       	ldd	r18, Y+2	; 0x02
    2dd4:	3b 81       	ldd	r19, Y+3	; 0x03
    2dd6:	25 30       	cpi	r18, 0x05	; 5
    2dd8:	31 05       	cpc	r19, r1
    2dda:	29 f1       	breq	.+74     	; 0x2e26 <sevenSegmentTensNum+0xd2>
    2ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    2dde:	9b 81       	ldd	r25, Y+3	; 0x03
    2de0:	86 30       	cpi	r24, 0x06	; 6
    2de2:	91 05       	cpc	r25, r1
    2de4:	21 f1       	breq	.+72     	; 0x2e2e <sevenSegmentTensNum+0xda>
    2de6:	32 c0       	rjmp	.+100    	; 0x2e4c <sevenSegmentTensNum+0xf8>
    2de8:	2a 81       	ldd	r18, Y+2	; 0x02
    2dea:	3b 81       	ldd	r19, Y+3	; 0x03
    2dec:	28 30       	cpi	r18, 0x08	; 8
    2dee:	31 05       	cpc	r19, r1
    2df0:	31 f1       	breq	.+76     	; 0x2e3e <sevenSegmentTensNum+0xea>
    2df2:	8a 81       	ldd	r24, Y+2	; 0x02
    2df4:	9b 81       	ldd	r25, Y+3	; 0x03
    2df6:	89 30       	cpi	r24, 0x09	; 9
    2df8:	91 05       	cpc	r25, r1
    2dfa:	29 f1       	breq	.+74     	; 0x2e46 <sevenSegmentTensNum+0xf2>
    2dfc:	27 c0       	rjmp	.+78     	; 0x2e4c <sevenSegmentTensNum+0xf8>
	{
	case 0:
		sevenSegmenDisplay(0);
    2dfe:	80 e0       	ldi	r24, 0x00	; 0
    2e00:	0e 94 ab 10 	call	0x2156	; 0x2156 <sevenSegmenDisplay>
    2e04:	23 c0       	rjmp	.+70     	; 0x2e4c <sevenSegmentTensNum+0xf8>
		break;
	case 1:
		sevenSegmenDisplay(1);
    2e06:	81 e0       	ldi	r24, 0x01	; 1
    2e08:	0e 94 ab 10 	call	0x2156	; 0x2156 <sevenSegmenDisplay>
    2e0c:	1f c0       	rjmp	.+62     	; 0x2e4c <sevenSegmentTensNum+0xf8>
		break;
	case 2:
		sevenSegmenDisplay(2);
    2e0e:	82 e0       	ldi	r24, 0x02	; 2
    2e10:	0e 94 ab 10 	call	0x2156	; 0x2156 <sevenSegmenDisplay>
    2e14:	1b c0       	rjmp	.+54     	; 0x2e4c <sevenSegmentTensNum+0xf8>
		break;
	case 3:
		sevenSegmenDisplay(3);
    2e16:	83 e0       	ldi	r24, 0x03	; 3
    2e18:	0e 94 ab 10 	call	0x2156	; 0x2156 <sevenSegmenDisplay>
    2e1c:	17 c0       	rjmp	.+46     	; 0x2e4c <sevenSegmentTensNum+0xf8>
		break;
	case 4:
		sevenSegmenDisplay(4);
    2e1e:	84 e0       	ldi	r24, 0x04	; 4
    2e20:	0e 94 ab 10 	call	0x2156	; 0x2156 <sevenSegmenDisplay>
    2e24:	13 c0       	rjmp	.+38     	; 0x2e4c <sevenSegmentTensNum+0xf8>
		break;
	case 5:
		sevenSegmenDisplay(5);
    2e26:	85 e0       	ldi	r24, 0x05	; 5
    2e28:	0e 94 ab 10 	call	0x2156	; 0x2156 <sevenSegmenDisplay>
    2e2c:	0f c0       	rjmp	.+30     	; 0x2e4c <sevenSegmentTensNum+0xf8>
		break;
	case 6:
		sevenSegmenDisplay(6);
    2e2e:	86 e0       	ldi	r24, 0x06	; 6
    2e30:	0e 94 ab 10 	call	0x2156	; 0x2156 <sevenSegmenDisplay>
    2e34:	0b c0       	rjmp	.+22     	; 0x2e4c <sevenSegmentTensNum+0xf8>
		break;
	case 7:
		sevenSegmenDisplay(7);
    2e36:	87 e0       	ldi	r24, 0x07	; 7
    2e38:	0e 94 ab 10 	call	0x2156	; 0x2156 <sevenSegmenDisplay>
    2e3c:	07 c0       	rjmp	.+14     	; 0x2e4c <sevenSegmentTensNum+0xf8>
		break;
	case 8:
		sevenSegmenDisplay(8);
    2e3e:	88 e0       	ldi	r24, 0x08	; 8
    2e40:	0e 94 ab 10 	call	0x2156	; 0x2156 <sevenSegmenDisplay>
    2e44:	03 c0       	rjmp	.+6      	; 0x2e4c <sevenSegmentTensNum+0xf8>
		break;
	case 9:
		sevenSegmenDisplay(9);
    2e46:	89 e0       	ldi	r24, 0x09	; 9
    2e48:	0e 94 ab 10 	call	0x2156	; 0x2156 <sevenSegmenDisplay>
		break;
	}
}
    2e4c:	0f 90       	pop	r0
    2e4e:	0f 90       	pop	r0
    2e50:	0f 90       	pop	r0
    2e52:	cf 91       	pop	r28
    2e54:	df 91       	pop	r29
    2e56:	08 95       	ret

00002e58 <sevenSegmentResetDisplay>:
 [Description]:	This function is responsible to Reset stopwatch on 7-Segment's
 [Args]:   void
 [Return]: EN_StopWatch_Error_t
 ---------------------------------------------------------------------------------------*/
void sevenSegmentResetDisplay(void)
{
    2e58:	df 93       	push	r29
    2e5a:	cf 93       	push	r28
    2e5c:	cd b7       	in	r28, 0x3d	; 61
    2e5e:	de b7       	in	r29, 0x3e	; 62
	secondsCount = 0;
    2e60:	10 92 75 01 	sts	0x0175, r1
	minutesCount = 0;
    2e64:	10 92 76 01 	sts	0x0176, r1
	hoursCount = 0;
    2e68:	10 92 77 01 	sts	0x0177, r1
}
    2e6c:	cf 91       	pop	r28
    2e6e:	df 91       	pop	r29
    2e70:	08 95       	ret

00002e72 <sevenSegmentPauseDisplay>:
 [Description]:	This function is responsible to Pause stopwatch on 7-Segment's
 [Args]:   void
 [Return]: EN_StopWatch_Error_t
 ---------------------------------------------------------------------------------------*/
void sevenSegmentPauseDisplay(void)
{
    2e72:	df 93       	push	r29
    2e74:	cf 93       	push	r28
    2e76:	cd b7       	in	r28, 0x3d	; 61
    2e78:	de b7       	in	r29, 0x3e	; 62
	TIMER_DeInit();
    2e7a:	0e 94 04 09 	call	0x1208	; 0x1208 <TIMER_DeInit>
}
    2e7e:	cf 91       	pop	r28
    2e80:	df 91       	pop	r29
    2e82:	08 95       	ret

00002e84 <sevenSegmentResumeDisplay>:
 [Description]:	This function is responsible to Resume stopwatch on 7-Segment's
 [Args]:   void
 [Return]: EN_StopWatch_Error_t
 ---------------------------------------------------------------------------------------*/
void sevenSegmentResumeDisplay(void)
{
    2e84:	df 93       	push	r29
    2e86:	cf 93       	push	r28
    2e88:	cd b7       	in	r28, 0x3d	; 61
    2e8a:	de b7       	in	r29, 0x3e	; 62
	TIMER_Init();
    2e8c:	0e 94 7f 08 	call	0x10fe	; 0x10fe <TIMER_Init>
}
    2e90:	cf 91       	pop	r28
    2e92:	df 91       	pop	r29
    2e94:	08 95       	ret

00002e96 <main>:
/*------------------------------------------------------------------------------
 *                                 Main Function
 *------------------------------------------------------------------------------*/

int main(void)
{
    2e96:	df 93       	push	r29
    2e98:	cf 93       	push	r28
    2e9a:	cd b7       	in	r28, 0x3d	; 61
    2e9c:	de b7       	in	r29, 0x3e	; 62
	stopWatchInit();
    2e9e:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <stopWatchInit>

	while(1)
	{
		stopWatchStart();
    2ea2:	0e 94 17 11 	call	0x222e	; 0x222e <stopWatchStart>
    2ea6:	fd cf       	rjmp	.-6      	; 0x2ea2 <main+0xc>

00002ea8 <__udivmodqi4>:
    2ea8:	99 1b       	sub	r25, r25
    2eaa:	79 e0       	ldi	r23, 0x09	; 9
    2eac:	04 c0       	rjmp	.+8      	; 0x2eb6 <__udivmodqi4_ep>

00002eae <__udivmodqi4_loop>:
    2eae:	99 1f       	adc	r25, r25
    2eb0:	96 17       	cp	r25, r22
    2eb2:	08 f0       	brcs	.+2      	; 0x2eb6 <__udivmodqi4_ep>
    2eb4:	96 1b       	sub	r25, r22

00002eb6 <__udivmodqi4_ep>:
    2eb6:	88 1f       	adc	r24, r24
    2eb8:	7a 95       	dec	r23
    2eba:	c9 f7       	brne	.-14     	; 0x2eae <__udivmodqi4_loop>
    2ebc:	80 95       	com	r24
    2ebe:	08 95       	ret

00002ec0 <__prologue_saves__>:
    2ec0:	2f 92       	push	r2
    2ec2:	3f 92       	push	r3
    2ec4:	4f 92       	push	r4
    2ec6:	5f 92       	push	r5
    2ec8:	6f 92       	push	r6
    2eca:	7f 92       	push	r7
    2ecc:	8f 92       	push	r8
    2ece:	9f 92       	push	r9
    2ed0:	af 92       	push	r10
    2ed2:	bf 92       	push	r11
    2ed4:	cf 92       	push	r12
    2ed6:	df 92       	push	r13
    2ed8:	ef 92       	push	r14
    2eda:	ff 92       	push	r15
    2edc:	0f 93       	push	r16
    2ede:	1f 93       	push	r17
    2ee0:	cf 93       	push	r28
    2ee2:	df 93       	push	r29
    2ee4:	cd b7       	in	r28, 0x3d	; 61
    2ee6:	de b7       	in	r29, 0x3e	; 62
    2ee8:	ca 1b       	sub	r28, r26
    2eea:	db 0b       	sbc	r29, r27
    2eec:	0f b6       	in	r0, 0x3f	; 63
    2eee:	f8 94       	cli
    2ef0:	de bf       	out	0x3e, r29	; 62
    2ef2:	0f be       	out	0x3f, r0	; 63
    2ef4:	cd bf       	out	0x3d, r28	; 61
    2ef6:	09 94       	ijmp

00002ef8 <__epilogue_restores__>:
    2ef8:	2a 88       	ldd	r2, Y+18	; 0x12
    2efa:	39 88       	ldd	r3, Y+17	; 0x11
    2efc:	48 88       	ldd	r4, Y+16	; 0x10
    2efe:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f00:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f02:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f04:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f06:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f08:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f0a:	b9 84       	ldd	r11, Y+9	; 0x09
    2f0c:	c8 84       	ldd	r12, Y+8	; 0x08
    2f0e:	df 80       	ldd	r13, Y+7	; 0x07
    2f10:	ee 80       	ldd	r14, Y+6	; 0x06
    2f12:	fd 80       	ldd	r15, Y+5	; 0x05
    2f14:	0c 81       	ldd	r16, Y+4	; 0x04
    2f16:	1b 81       	ldd	r17, Y+3	; 0x03
    2f18:	aa 81       	ldd	r26, Y+2	; 0x02
    2f1a:	b9 81       	ldd	r27, Y+1	; 0x01
    2f1c:	ce 0f       	add	r28, r30
    2f1e:	d1 1d       	adc	r29, r1
    2f20:	0f b6       	in	r0, 0x3f	; 63
    2f22:	f8 94       	cli
    2f24:	de bf       	out	0x3e, r29	; 62
    2f26:	0f be       	out	0x3f, r0	; 63
    2f28:	cd bf       	out	0x3d, r28	; 61
    2f2a:	ed 01       	movw	r28, r26
    2f2c:	08 95       	ret

00002f2e <_exit>:
    2f2e:	f8 94       	cli

00002f30 <__stop_program>:
    2f30:	ff cf       	rjmp	.-2      	; 0x2f30 <__stop_program>
